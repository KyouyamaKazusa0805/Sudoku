namespace System.Diagnostics.CodeGen;

/// <summary>
/// Defines a kind of behavior describing source generator's generated source code on overridding <see cref="object.GetHashCode"/>.
/// </summary>
/// <seealso cref="object.GetHashCode"/>
public enum GeneratedGetHashCodeBehavior
{
	/// <summary>
	/// Indicates the generated code will directly throws <see cref="NotSupportedException"/> to mark the target method cannot be invoked by user
	/// due to the method is in <see langword="ref struct"/>, which is meaningless on calling this method.
	/// </summary>
	/// <remarks>
	/// The generated code will be like:
	/// <code><![CDATA[
	/// // <auto-generated/>
	/// 
	/// ref partial struct Type
	/// {
	///     /// <inheritdoc cref="object.Equals(object?)"/>
	///     [CompilerGenerated]
	///     [GeneratedCode("SourceGeneratorName", "1.0.0.0")]
	///     [Obsolete(RefStructDefaultImplementationMessage.OverriddenGetHashCodeMethod, false)]
	///     public override readonly partial int GetHashCode()
	///         => throw new NotSupportedException(RefStructDefaultImplementationMessage.OverriddenGetHashCodeMethod);
	/// }
	/// ]]></code>
	/// </remarks>
	RefStructDefault,

	/// <summary>
	/// Indicates the generated code will directly returns the backing fields in the type, as returning value.
	/// </summary>
	/// <remarks>
	/// The generated code will be like:
	/// <code><![CDATA[
	/// // <auto-generated/>
	/// 
	/// partial struct Type
	/// {
	///     /// <inheritdoc cref="object.GetHashCode"/>
	///     [CompilerGenerated]
	///     [GeneratedCode("SourceGeneratorName", "1.0.0.0")]
	///     public override readonly partial int GetHashCode() => _mask;
	///     
	///     // Suppose the type contains a field named '_mask':
	///     //private readonly int _mask;
	/// }
	/// ]]></code>
	/// Where the extra field name <c>_mask</c> can be specified as the other argument <c>extraArguments</c>.
	/// </remarks>
	SimpleField,

	/// <summary>
	/// Indicates the generated code will returns an expression calling <c>HashCode.Combine</c> method group
	/// (e.g. <see cref="HashCode.Combine{T1}(T1)"/>), passing fields or expressions into it.
	/// </summary>
	/// <remarks>
	/// The generated code will be like:
	/// <code><![CDATA[
	/// // <auto-generated/>
	/// 
	/// partial struct Type
	/// {
	///     /// <inheritdoc cref="object.GetHashCode"/>
	///     [CompilerGenerated]
	///     [GeneratedCode("SourceGeneratorName", "1.0.0.0")]
	///     public override readonly partial int GetHashCode() => HashCode.Combine(_m1, _m2);
	///     
	///     // Suppose the type contains a field named '_m1' and '_m2':
	///     //private readonly int _m1;
	///     //private readonly string _m2;
	/// }
	/// ]]></code>
	/// Where the extra field name <c>_m1</c> and <c>_m2</c> can be specified as the other argument <c>extraArguments</c>.
	/// </remarks>
	/// <seealso cref="HashCode.Combine{T1}(T1)"/>
	CallingHashCodeCombine
}
