namespace System.SourceGeneration;

/// <summary>
/// Defines a kind of behavior describing source generator's generated source code on overridding <see cref="object.Equals(object?)"/>.
/// </summary>
/// <seealso cref="object.Equals(object?)"/>
public enum GeneratedEqualsBehavior
{
	/// <summary>
	/// Indicates the generated code will directly return <see langword="false"/> to mark the target method cannot be invoked by user
	/// due to the method is in <see langword="ref struct"/>, which is meaningless on calling this method.
	/// </summary>
	/// <remarks>
	/// The generated code will be like:
	/// <code><![CDATA[
	/// // <auto-generated/>
	/// 
	/// ref partial struct Type
	/// {
	///     /// <inheritdoc cref="object.Equals(object?)"/>
	///     [CompilerGenerated]
	///     [GeneratedCode("SourceGeneratorName", "1.0.0.0")]
	///     [Obsolete(RefStructDefaultImplementationMessage.OverriddenEqualsMethod, false)]
	///     public override readonly partial bool Equals([NotNullWhen(false)] object? obj) => false;
	/// }
	/// ]]></code>
	/// </remarks>
	RefStructDefault,

	/// <summary>
	/// Indicates the generated code will do the type checking, and then directly calls the overloaded method on <c>Equals</c>.
	/// </summary>
	/// <remarks>
	/// The generated code will be like:
	/// <code><![CDATA[
	/// // <auto-generated/>
	/// 
	/// partial struct Type
	/// {
	///     /// <inheritdoc cref="object.Equals(object?)"/>
	///     [CompilerGenerated]
	///     [GeneratedCode("SourceGeneratorName", "1.0.0.0")]
	///     public override readonly bool Equals([NotNullWhen(false)] object? obj) => obj is Type comparer && Equals(comparer);
	///     
	///     // Suppose the type 'Type' has already contained an overloading like this:
	///     //public readonly partial bool Equals(Type other) { ... }
	/// }
	/// ]]></code>
	/// </remarks>
	TypeCheckingAndCallingOverloading,

	/// <summary>
	/// Indicates the generated code will use <see langword="as"/> expression, and then directly calls the overloaded method on <c>Equals</c>
	/// which can receive a nullable type as argument's type.
	/// </summary>
	/// <remarks>
	/// The generated code will be like:
	/// <code><![CDATA[
	/// // <auto-generated/>
	/// 
	/// partial class Type
	/// {
	///     /// <inheritdoc cref="object.Equals(object?)"/>
	///     [CompilerGenerated]
	///     [GeneratedCode("SourceGeneratorName", "1.0.0.0")]
	///     public override bool Equals([NotNullWhen(false)] object? obj) => Equals(comparer as Type);
	///     
	///     // Suppose the type 'Type' has already contained an overloading like this:
	///     //public partial bool Equals([NotNullWhen(true)] Type? other) { ... }
	/// }
	/// ]]></code>
	/// </remarks>
	AsCastAndCallingOverloading
}
