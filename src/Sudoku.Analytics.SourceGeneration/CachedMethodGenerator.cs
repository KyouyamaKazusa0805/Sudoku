namespace Sudoku.SourceGeneration;

/// <summary>
/// Represents a source generator that copies the whole method, and replaces some variables with cached fields.
/// </summary>
[Generator(LanguageNames.CSharp)]
public sealed partial class CachedMethodGenerator : IIncrementalGenerator
{
	private const string InterceptorMethodCallerAttributeTypeFullName = "Sudoku.Analytics.Intercepting.InterceptorMethodCallerAttribute";

	private const string CachedAttributeTypeFullName = "Sudoku.Analytics.Intercepting.CachedAttribute";

	private const string GeneratedNamespace = "Sudoku.Analytics.Intercepting.Generated";

	private const string InterceptsLocationAttributeFullName = "System.Runtime.CompilerServices.InterceptsLocationAttribute";

	private const string CommentLineBegin = "// --INTERCEPTOR_VARIABLE_DECLARATION_BEGIN--";

	private const string CommentLineEnd = "// --INTERCEPTOR_VARIABLE_DECLARATION_END--";

	private const string AttributeInsertionMatchString = "<<insert-here>>";


	private static readonly string[] ValidVariableNames = [
		"__EmptyCells",
		"__BivalueCells",
		"__CandidatesMap",
		"__DigitsMap",
		"__ValuesMap"
	];

	/// <summary>
	/// Represents message "Method marked '[InterceptorMethodCaller]' can only be block body".
	/// </summary>
	private static readonly DiagnosticDescriptor Descriptor_Interceptor0101 = new(
		"INTERCEPTOR0101",
		"Method marked '[InterceptorMethodCaller]' can only be block body",
		"Method '{0}' marked '[InterceptorMethodCaller]' can only be block body",
		"Interceptor.Design",
		DiagnosticSeverity.Error,
		true
	);

	/// <summary>
	/// Represents message "Method marked '[InterceptorMethodCaller]' requires at least one invocation expression
	/// that references to a method marked '[Cached]'".
	/// </summary>
	private static readonly DiagnosticDescriptor Descriptor_Interceptor0102 = new(
		"INTERCEPTOR0102",
		"Method marked '[InterceptorMethodCaller]' requires at least one invocation expression that references to a method marked '[Cached]'",
		"Method '{0}' marked '[InterceptorMethodCaller]' requires at least one invocation expression that references to a method marked '[Cached]'",
		"Interceptor.Design",
		DiagnosticSeverity.Error,
		true
	);

	/// <summary>
	/// Represents message "Method marked '[Cached]' cannot be <see langword="partial"/>".
	/// </summary>
	private static readonly DiagnosticDescriptor Descriptor_Interceptor0103 = new(
		"INTERCEPTOR0103",
		"Method marked '[Cached]' cannot be partial",
		"Method '{0}' marked '[Cached]' cannot be partial",
		"Interceptor.Design",
		DiagnosticSeverity.Error,
		true
	);


	/// <inheritdoc/>
	public void Initialize(IncrementalGeneratorInitializationContext context)
		// This generator will aim to methods, to find whether a method block contains at least one intercepted usage.
		// If so, such method will be replaced with cached method.
		// The requirement is that, the callee method should be applied with '[InterceptorCaller]'.
		=> context.RegisterSourceOutput(
			context.SyntaxProvider
				.ForAttributeWithMetadataName(
					InterceptorMethodCallerAttributeTypeFullName,
					static (node, _) => node is MethodDeclarationSyntax,
					Transform
				)
				.Where(static data => data is not null)
				.Select(static (data, _) => data!)
				.Collect(),
			Output
		);


	private static void Output(SourceProductionContext spc, ImmutableArray<TransformResult> transformResults)
	{
		var failed = new List<FailedTransformResult>();
		var success = new List<SuccessTransformResult>();
		foreach (var result in transformResults)
		{
			switch (result)
			{
				case FailedTransformResult f: { failed.Add(f); break; }
				case SuccessTransformResult s: { success.Add(s); break; }
			}
		}
		failed.ForEach(f => spc.ReportDiagnostic(f.Diagnostic));
		if (failed.Count != 0)
		{
			return;
		}

		var list = new List<string>();
		foreach (var resultGroup in from result in success group result by result.Text)
		{
			// Replace all with new values.
			var attribute = new List<string>();
			foreach (var (_, (filePath, lineNumber, characterNumber)) in resultGroup)
			{
				attribute.Add($""""[global::{InterceptsLocationAttributeFullName}("""{filePath}""", {lineNumber}, {characterNumber})]"""");
			}
			list.Add(resultGroup.Key.Replace(AttributeInsertionMatchString, string.Join("\r\n\t\t", attribute)));
		}

		spc.AddSource(
			"CachingIntercepted.g.cs",
			$$"""
			{{Banner.AutoGenerated}}
			
			#nullable enable

			{{string.Join("\r\n\r\n", list)}}
			"""
		);
	}

	private static TransformResult? Transform(GeneratorAttributeSyntaxContext gasc, CancellationToken ct)
	{
		//if (!System.Diagnostics.Debugger.IsAttached)
		//{
		//	System.Diagnostics.Debugger.Launch();
		//}

		if (gasc is not
			{
				TargetNode: MethodDeclarationSyntax
				{
					ExpressionBody: var expressionBody,
					Identifier: { ValueText: var methodName } identifierToken
				} node,
				SemanticModel: { Compilation: var compilation } semanticModel
			})
		{
			return null;
		}

		if (expressionBody is not null)
		{
			return new FailedTransformResult(
				Diagnostic.Create(
					Descriptor_Interceptor0101,
					node.GetLocation(),
					messageArgs: [methodName]
				)
			);
		}

		var cachedAttributeSymbol = compilation.GetTypeByMetadataName(CachedAttributeTypeFullName);
		if (cachedAttributeSymbol is null)
		{
			return null;
		}

		foreach (var invocation in node.DescendantNodes().OfType<InvocationExpressionSyntax>())
		{
			var invocationLocation = default(Location);
			var referencedMethodDeclaration = default(MethodDeclarationSyntax);
			var referencedMethodSymbol = default(IMethodSymbol);

			var invocationExpression = invocation.Expression;
			var symbolInfo = semanticModel.GetSymbolInfo(invocation, ct);
			switch (symbolInfo)
			{
				case { CandidateSymbols: [IMethodSymbol { DeclaringSyntaxReferences: var syntaxRefs } methodSymbol] }
				when methodSymbol.GetAttributes().Any(cachedAttributeChecker):
				{
					if (syntaxRefs is not [var syntaxRef])
					{
						return new FailedTransformResult(
							Diagnostic.Create(
								Descriptor_Interceptor0103,
								Location.Create(syntaxRefs[0].SyntaxTree, syntaxRefs[0].Span),
								messageArgs: [invocationExpression.ToString()]
							)
						);
					}

					invocationLocation = (invocationExpression as MemberAccessExpressionSyntax)?.Name.GetLocation();
					referencedMethodDeclaration = syntaxRef.GetSyntax(ct) as MethodDeclarationSyntax;
					referencedMethodSymbol = methodSymbol;
					break;
				}
				case { Symbol: IMethodSymbol { DeclaringSyntaxReferences: var syntaxRefs } methodSymbol }
				when methodSymbol.GetAttributes().Any(cachedAttributeChecker):
				{
					if (syntaxRefs is not [var syntaxRef])
					{
						return new FailedTransformResult(
							Diagnostic.Create(
								Descriptor_Interceptor0103,
								Location.Create(syntaxRefs[0].SyntaxTree, syntaxRefs[0].Span),
								messageArgs: [invocationExpression.ToString()]
							)
						);
					}

					invocationLocation = (invocationExpression as MemberAccessExpressionSyntax)?.Name.GetLocation();
					referencedMethodDeclaration = syntaxRef.GetSyntax(ct) as MethodDeclarationSyntax;
					referencedMethodSymbol = methodSymbol;
					break;
				}
			}

			if (invocationLocation is null || referencedMethodDeclaration is null || referencedMethodSymbol is null)
			{
				continue;
			}

			if (referencedMethodSymbol.IsGenericMethod)
			{
				continue;
			}

			if (referencedMethodDeclaration.Body is not { Statements: var bodyStatements })
			{
				continue;
			}

			// Now we have the referenced method data.
			// We should determine whether the method is block-bodied, and remove variable declarations
			// bound with cached-related properties, and append attributes [InterceptsLocation], emitting referenced locations.
			// However, here we cannot collect for all possible usages of [InterceptsLocation], so it will be postponed to be checked.
			var statements = new List<StatementSyntax>();
			var startFlag = false;
			foreach (var statement in bodyStatements)
			{
				if (statement.HasLeadingTrivia)
				{
					var leadingTrivia = statement.GetLeadingTrivia().ToFullString();
					if (leadingTrivia.Contains(CommentLineBegin))
					{
						startFlag = true;
						continue;
					}
					if (leadingTrivia.Contains(CommentLineEnd))
					{
						statements.Add(statement.WithoutLeadingTrivia());
						startFlag = false;
						continue;
					}
				}
				if (!startFlag)
				{
					statements.Add(statement);
				}
			}

			if (invocationLocation.SourceTree is not { FilePath: var filePath })
			{
				continue;
			}

			//var genericTypesString = referencedMethodSymbol.IsGenericMethod
			//	&& (from typeParameter in referencedMethodSymbol.TypeParameters select typeParameter.ToDisplayString()) is var p
			//	&& string.Join(", ", p) is var typeParametersString
			//	? $"<{typeParametersString}>"
			//	: string.Empty;
			var lineSpan = invocationLocation.GetMappedLineSpan();
			var parametersString = string.Join(
				", ",
				from parameter in referencedMethodSymbol.Parameters
				let refKindString = parameter.RefKind switch
				{
					RefKind.Ref => "ref ",
					RefKind.Out => "out ",
					RefKind.In => "in ",
					RefKind.RefReadOnlyParameter => "ref readonly ",
					_ => string.Empty
				}
				let scopedKindString = parameter.ScopedKind switch
				{
					ScopedKind.ScopedRef or ScopedKind.ScopedValue => "scoped ",
					_ => string.Empty
				}
				let typeNameString = parameter.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)
				select $"{scopedKindString}{refKindString}{typeNameString} {parameter.Name}"
			);

			// Replace reserved identifiers with cached properties.
			// Here 'Trim' will aggressively removes comments that might be important - this is considered to be a bug.
			// However, I may not good at handling leading trivia of statements. I'll fix in future but not for now.
			var targetString = string.Join("\r\n\t\t", from statement in statements select statement.ToFullString().Trim());
			foreach (var variableName in ValidVariableNames)
			{
				targetString = targetString.Replace(variableName, variableName[2..]);
			}

			// Add one extra indenting.
			var targetStringAppendIndenting = new List<string>();
			foreach (var line in targetString.Split(['\r', '\n'], StringSplitOptions.RemoveEmptyEntries))
			{
				targetStringAppendIndenting.Add($"\t{line}");
			}

			// Get XML doc comments.
			// The target XML doc commment structure won't include triple slashes. We should append them;
			// In addition, consider indenting, we should append indenting \t's.
			// And, we should remove the first and last line (<member> tag).
			var xmlDocComments = referencedMethodSymbol.GetDocumentationCommentXml(cancellationToken: ct)?
				.Split(['\r', '\n'], StringSplitOptions.RemoveEmptyEntries);
			var xmlDocCommentLines = new List<string>();
			if (xmlDocComments is not null)
			{
				for (var i = 1; i < xmlDocComments.Length - 1; i++)
				{
					xmlDocCommentLines.Add($"/// {xmlDocComments[i].TrimStart()}");
				}
			}

			// Return type.
			var returnTypeName = referencedMethodSymbol.ReturnType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
			var returnRefKindType = referencedMethodSymbol switch
			{
				{ ReturnsByRefReadonly: true } => "ref readonly ",
				{ ReturnsByRef: true } => "ref ",
				_ => string.Empty
			};
			var returnTypeString = $"{returnRefKindType}{returnTypeName}";

			// Return the value.
			return new SuccessTransformResult(
				$$"""
				namespace {{GeneratedNamespace}}
				{
					/// <summary>
					/// Interceptor method that will replace implementation on such referenced method invocation.
					/// </summary>
					public static class {{referencedMethodSymbol.ContainingType.Name}}_Intercepted
					{
						{{(xmlDocCommentLines.Count == 0 ? "/// <summary>Intercepted method.</summary>" : string.Join("\r\n\t\t", xmlDocCommentLines))}}
						{{AttributeInsertionMatchString}}
						public static {{returnTypeString}} {{referencedMethodSymbol.Name}}{{/*genericTypesString*/string.Empty}}({{parametersString}})
						{
						{{string.Join("\r\n", targetStringAppendIndenting)}}
						}
					}
				}
				""",

				// Here we should manually add 1... I don't know why the value is always less exactly 1.
				new(filePath, lineSpan.StartLinePosition.Line + 1, lineSpan.StartLinePosition.Character + 1)
			);
		}

		return new FailedTransformResult(
			Diagnostic.Create(
				Descriptor_Interceptor0102,
				identifierToken.GetLocation(),
				messageArgs: [identifierToken.ValueText]
			)
		);


		bool cachedAttributeChecker(AttributeData a)
			=> SymbolEqualityComparer.Default.Equals(a.AttributeClass, cachedAttributeSymbol);
	}
}
