<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Strategying</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Strategying.BetweenRule">
            <summary>
            Represents a between rule.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.BetweenRule.BothOpen">
            <summary>
            Indicates both left and right are open (not included).
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.BetweenRule.LeftOpen">
            <summary>
            Indicates only the left is open, and the right is closed.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.BetweenRule.RightOpen">
            <summary>
            Indicates only the right is open, and the left is closed.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.BetweenRule.BothClosed">
            <summary>
            Indicates both left and right are closed (included).
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.ComparisonOperator">
            <summary>
            Represent an operator to be used in comparison.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.Equality">
            <summary>
            Indicates the comparison rule is to compare equality.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.Inequality">
            <summary>
            Indicates the comparison rule is to compare inequality.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.GreaterThan">
            <summary>
            Indicates the comparison rule is to compare greater-than.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.GreaterThanOrEqual">
            <summary>
            Indicates the comparison rule is to compare greater-than or equality.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.LessThan">
            <summary>
            Indicates the comparison rule is to compare less-than.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.LessThanOrEqual">
            <summary>
            Indicates the comparison rule is to compare less-than or equality.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.ComparisonOperatorExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Sudoku.Strategying.ComparisonOperator"/>.
            </summary>
            <seealso cref="T:Sudoku.Strategying.ComparisonOperator"/>
        </member>
        <member name="M:Sudoku.Strategying.ComparisonOperatorExtensions.GetOperator``1(Sudoku.Strategying.ComparisonOperator)">
            <summary>
            Creates a delegate method that executes the specified rule of comparison.
            </summary>
            <typeparam name="T">The type of the target.</typeparam>
            <param name="this">The comparison.</param>
            <returns>A delegate function.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when the argument is out of range (not defined).</exception>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.Constraint">
            <summary>
            Represents a rule that checks whether a grid or its relied analysis information is passed the constraint.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.Constraint.AllowDuplicate">
            <summary>
            Indicates whether the constraint can duplicate.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.Check(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <summary>
            Determine whether the specified grid is passed the constraint.
            </summary>
            <param name="context">Indicates the context used.</param>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.op_Equality(Sudoku.Strategying.Constraints.Constraint,Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.op_Inequality(Sudoku.Strategying.Constraints.Constraint,Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.ConstraintCheckingContext">
            <summary>
            Represents context used by <see cref="T:Sudoku.Strategying.Constraints.Constraint"/> instance.
            </summary>
            <param name="grid">Indicates the reference to the grid to be checked.</param>
            <param name="analyzerResult">Indicates the analyzer result.</param>
            <seealso cref="T:Sudoku.Strategying.Constraints.Constraint"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConstraintCheckingContext.#ctor(Sudoku.Concepts.Grid@,Sudoku.Analytics.AnalyzerResult)">
            <summary>
            Represents context used by <see cref="T:Sudoku.Strategying.Constraints.Constraint"/> instance.
            </summary>
            <param name="grid">Indicates the reference to the grid to be checked.</param>
            <param name="analyzerResult">Indicates the analyzer result.</param>
            <seealso cref="T:Sudoku.Strategying.Constraints.Constraint"/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ConstraintCheckingContext.RequiresAnalyzer">
            <summary>
            Indicates whether a screening rule requires property <see cref="P:Sudoku.Strategying.Constraints.ConstraintCheckingContext.AnalyzerResult"/>.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Constraints.ConstraintCheckingContext.Grid">
            <summary>
            The generated field declaration for parameter <c>grid</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ConstraintCheckingContext.AnalyzerResult">
            <summary>
            The generated property declaration for parameter <c>analyzerResult</c>.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.ConstraintCollection">
            <summary>
            Represents a constraint collection.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConstraintCollection.IsValidFor(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <summary>
            For a given <see cref="T:Sudoku.Strategying.Constraints.ConstraintCheckingContext"/>,
            determine whether the specified grid and its related analysis result satisfy the current limited constraint rules.
            </summary>
            <param name="context">The context to be used.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConstraintCollection.FindFirst``1(System.Func{Sudoku.Strategying.Constraints.Constraint,System.Boolean},System.Func{Sudoku.Strategying.Constraints.Constraint,``0},``0)">
            <summary>
            Try to get the first <see cref="T:Sudoku.Strategying.Constraints.Constraint"/> satisfying the specified condition,
            returning the value of type <typeparamref name="TResult"/> created by the specified method.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="match">The match method.</param>
            <param name="selector">The selector method.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The final result.</returns>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConstraintCollection.FindFirst``2(System.Func{``0,``1},``1)">
            <summary>
            Try to get the first <see cref="T:Sudoku.Strategying.Constraints.Constraint"/> satisfying the specified condition,
            returning the value of type <typeparamref name="TResult"/> created by the specified method.
            </summary>
            <typeparam name="TConstraint">The type of constraint.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="matchedSelector">
            Indicates the matched selector. The method will be used in both checking and converting operation.
            </param>
            <param name="defaultValue">
            Indicates the default value used. By default the value equals to <see langword="default"/>(<typeparamref name="TResult"/>).
            </param>
            <returns>The final result.</returns>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.CountBetweenConstraint">
            <summary>
            Represents a count between constraint.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.CountBetweenConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.CountBetweenConstraint.Range">
            <summary>
            Indicates the range of the numbers set.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.CountBetweenConstraint.CellState">
            <summary>
            Indicates the cell state to be checked. The desired values should be
            <see cref="F:Sudoku.Concepts.CellState.Given"/> or <see cref="F:Sudoku.Concepts.CellState.Empty"/>.
            </summary>
            <seealso cref="F:Sudoku.Concepts.CellState.Given"/>
            <seealso cref="F:Sudoku.Concepts.CellState.Empty"/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.CountBetweenConstraint.BetweenRule">
            <summary>
            Indicates the between rule.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountBetweenConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountBetweenConstraint.Check(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountBetweenConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountBetweenConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.DiamondConstraint">
            <summary>
            Represents a constraint that checks for diamond property.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DiamondConstraint.#ctor">
            <summary>
            Represents a constraint that checks for diamond property.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.DifficultyLevelConstraint">
            <summary>
            Represents difficulty level constraint.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.DifficultyLevel">
            <summary>
            Indicates the difficulty level.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.Operator">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.ValidDifficultyLevels">
            <summary>
            Indicates all possible <see cref="T:Sudoku.Analytics.Categorization.DifficultyLevel"/> values. 
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.Check(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.IComparisonOperatorConstraint">
            <summary>
            Represents a type that supports for comparison operator.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IComparisonOperatorConstraint.Operator">
            <summary>
            Indicates the comparison operator used.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.IttoryuConstraint">
            <summary>
            Represents a constraint that checks whether a puzzle can be finished by ittoryu rules.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuConstraint.Rounds">
            <summary>
            Indicates the rounds used.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuConstraint.Operator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuConstraint.Check(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.IttoryuLengthConstraint">
            <summary>
            Represents ittoryu length constraint.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Finder">
            <summary>
            Indicates the disordered ittoryu finder.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Length">
            <summary>
            Indicates the length.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Operator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Check(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.MinimalConstraint">
            <summary>
            Represents minimal constraint.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.MinimalConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.MinimalConstraint.ShouldBeMinimal">
            <summary>
            Indicates whether the puzzle shsould be minimal.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.MinimalConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.MinimalConstraint.Check(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.MinimalConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.MinimalConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.PearlConstraint">
            <summary>
            Represents a constraint that checks for pearl property.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlConstraint.#ctor">
            <summary>
            Represents a constraint that checks for pearl property.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint">
            <summary>
            Represents a constraint that checks for pearl or diamond property.
            </summary>
            <param name="checkPearl">Indicates whether the constraint checks for pearl.</param>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.#ctor(System.Boolean)">
            <summary>
            Represents a constraint that checks for pearl or diamond property.
            </summary>
            <param name="checkPearl">Indicates whether the constraint checks for pearl.</param>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.ShouldBePearlOrDiamond">
            <summary>
            Indicates whether the puzzle should be pearl or diamond.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdocs/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.Check(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.CheckPearl">
            <summary>
            The generated property declaration for parameter <c>checkPearl</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.SymmetryConstraint">
            <summary>
            Represents symmetry constraint. This constraint won't be used because <see cref="T:Sudoku.Algorithm.Generating.HodokuPuzzleGenerator"/> can controls this.
            </summary>
            <seealso cref="T:Sudoku.Algorithm.Generating.HodokuPuzzleGenerator"/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.SymmetryConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.SymmetryConstraint.SymmetricTypes">
            <summary>
            Indicates the supported symmetry types to be used.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SymmetryConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SymmetryConstraint.Check(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SymmetryConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SymmetryConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.TechniqueConstraint">
            <summary>
            Represents a rule that checks whether the specified analyzer result after analyzed by a grid
            contains the specified techniques.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.TechniqueConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.TechniqueConstraint.LimitCount">
            <summary>
            Indicates the appearing times.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.TechniqueConstraint.Operator">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.TechniqueConstraint.Technique">
            <summary>
            Indicates the technique used.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.TechniqueConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.TechniqueConstraint.Check(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.TechniqueConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.TechniqueConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
    </members>
</doc>
