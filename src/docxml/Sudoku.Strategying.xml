<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Strategying</name>
    </assembly>
    <members>
        <member name="T:Sudoku.ModuleInitializer">
            <target name="type">
				<summary>
					<para>
						Provides with the type that contains a module initializer method, called automatically by the CLR
						(Common Language Runtime) to initialize some values.
					</para>
					<para>
						<i>
							The type is called by the compiler and the CLR (Common Language Runtime),
							which means you cannot use any members in this type manually.
						</i>
					</para>
				</summary>
			</target>
        </member>
        <member name="M:Sudoku.ModuleInitializer.Initialize">
            <target name="method">
				<summary>
					Called by the runtime automatically while booting on this solution to initialize the values,
					data members or any other things that can or should be initialized here.
				</summary>
				<remarks>
					The concept <b>module</b> is different with <b>assembly</b>.
					The solution can contain multiple assemblies, while each assembly can contain multiple modules.
					However, due to the design of Visual Studio project file system, each assembly will only contain
					one module by default.
				</remarks>
			</target>
        </member>
        <member name="T:Sudoku.Resources.StrategyingResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources._Token_Comma">
            <summary>
              Looks up a localized string similar to , .
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.BothClosed">
            <summary>
              Looks up a localized string similar to both side closed.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.BothOpen">
            <summary>
              Looks up a localized string similar to both side open.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.ConclusionConstraint">
            <summary>
              Looks up a localized string similar to Conclusion count rule: Conclusion {0} should {1}appear.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.CountBetweenConstraint">
            <summary>
              Looks up a localized string similar to Count between rule: {0} should be between {1} and {2}, {3}.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.DiamondString">
            <summary>
              Looks up a localized string similar to diamond.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.DifficultyLevelConstraint">
            <summary>
              Looks up a localized string similar to Difficulty level rule: {0} {1} ({2}).
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.EmptyCell">
            <summary>
              Looks up a localized string similar to Number of empty cells.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.GivenCell">
            <summary>
              Looks up a localized string similar to Number of given cells.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.IttoryuConstraint">
            <summary>
              Looks up a localized string similar to Ittoryu rule: finish puzzle with {0} {1} rounds.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.IttoryuLengthConstraint">
            <summary>
              Looks up a localized string similar to Ittoryu length rule: {0} {1} consecutively-finished digits.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.LeftOpen">
            <summary>
              Looks up a localized string similar to only left open.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.MinimalConstraint">
            <summary>
              Looks up a localized string similar to Minimal rule: should {0}be a minimal puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.NoString">
            <summary>
              Looks up a localized string similar to not .
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.NounPluralSuffix">
            <summary>
              Looks up a localized string similar to s.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.PearlOrDiamondConstraint">
            <summary>
              Looks up a localized string similar to {0} rule: should {1}be a {2} puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.PearlString">
            <summary>
              Looks up a localized string similar to pearl.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.RightOpen">
            <summary>
              Looks up a localized string similar to only right open.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.SinglePreferConstraint">
            <summary>
              Looks up a localized string similar to Single prefer rule: {0} is preferred as primary technique, Hidden Single in rows or columns {1}included.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.SymmetryConstraint">
            <summary>
              Looks up a localized string similar to Symmetry rule: {0}.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.TechniqueConstraint">
            <summary>
              Looks up a localized string similar to Technique rule: {0}.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.StrategyingResources.TechniqueCountConstraint">
            <summary>
              Looks up a localized string similar to Technique appearing times rule: {0} appears {1} {2} time(s).
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.BetweenRule">
            <summary>
            Represents a between rule.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.BetweenRule.BothOpen">
            <summary>
            Indicates both left and right are open (not included).
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.BetweenRule.LeftOpen">
            <summary>
            Indicates only the left is open, and the right is closed.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.BetweenRule.RightOpen">
            <summary>
            Indicates only the right is open, and the left is closed.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.BetweenRule.BothClosed">
            <summary>
            Indicates both left and right are closed (included).
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.ComparisonOperator">
            <summary>
            Represent an operator to be used in comparison.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.Equality">
            <summary>
            Indicates the comparison rule is to compare equality.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.Inequality">
            <summary>
            Indicates the comparison rule is to compare inequality.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.GreaterThan">
            <summary>
            Indicates the comparison rule is to compare greater-than.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.GreaterThanOrEqual">
            <summary>
            Indicates the comparison rule is to compare greater-than or equality.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.LessThan">
            <summary>
            Indicates the comparison rule is to compare less-than.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.LessThanOrEqual">
            <summary>
            Indicates the comparison rule is to compare less-than or equality.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.ComparisonOperatorExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Sudoku.Strategying.ComparisonOperator"/>.
            </summary>
            <seealso cref="T:Sudoku.Strategying.ComparisonOperator"/>
        </member>
        <member name="M:Sudoku.Strategying.ComparisonOperatorExtensions.GetOperatorString(Sudoku.Strategying.ComparisonOperator)">
            <summary>
            Gets the string representation of the operator.
            </summary>
            <param name="this">The value.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Sudoku.Strategying.ComparisonOperatorExtensions.GetOperator``1(Sudoku.Strategying.ComparisonOperator)">
            <summary>
            Creates a delegate method that executes the specified rule of comparison.
            </summary>
            <typeparam name="T">The type of the target.</typeparam>
            <param name="this">The comparison.</param>
            <returns>A delegate function.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when the argument is out of range (not defined).</exception>
        </member>
        <member name="T:Sudoku.Strategying.Constraint">
            <summary>
            Represents a rule that checks whether a grid or its relied analysis information is passed the constraint.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraint.AllowDuplicate">
            <summary>
            Indicates whether the constraint can duplicate.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraint.CheckingQueryExpression">
            <summary>
            Indicates the checking <see cref="T:System.Linq.Expressions.Expression`1"/> instance of the constraint.
            </summary>
            <remarks>
            <para>
            This property will be reserved, in order to combine multiple constraint checking rules by using custom boolean logic.
            For example, a user may want either one of two constraints satisfy rather than checking for both two constraints.
            By using this property, use <see cref="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)"/> to achieve the goal.
            </para>
            <para>
            Due to implement this property and limitation of <see cref="T:System.Linq.Expressions.Expression`1"/>, we cannot apply the type
            <see cref="T:Sudoku.Strategying.ConstraintCheckingContext"/> as a <see langword="ref struct"/> because <see cref="T:System.Linq.Expressions.Expression`1"/>
            doesn't support for <see langword="ref struct"/> types.
            </para>
            </remarks>
            <seealso cref="T:System.Linq.Expressions.Expression`1"/>
            <seealso cref="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)"/>
            <seealso cref="T:Sudoku.Strategying.ConstraintCheckingContext"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraint.Check(Sudoku.Strategying.ConstraintCheckingContext)">
            <summary>
            Determine whether the specified grid is passed the constraint.
            </summary>
            <param name="context">Indicates the context used.</param>
        </member>
        <member name="M:Sudoku.Strategying.Constraint.Equals(Sudoku.Strategying.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraint.ToString(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraint.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraint.op_Equality(Sudoku.Strategying.Constraint,Sudoku.Strategying.Constraint)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraint.op_Inequality(Sudoku.Strategying.Constraint,Sudoku.Strategying.Constraint)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="T:Sudoku.Strategying.ConstraintCheckingContext">
            <summary>
            Represents context that will be called by method <see cref="M:Sudoku.Strategying.Constraint.Check(Sudoku.Strategying.ConstraintCheckingContext)"/>.
            </summary>
            <param name="Grid">Indicates the reference to the grid to be checked.</param>
            <param name="AnalyzerResult">Indicates the analyzer result.</param>
            <seealso cref="M:Sudoku.Strategying.Constraint.Check(Sudoku.Strategying.ConstraintCheckingContext)"/>
        </member>
        <member name="M:Sudoku.Strategying.ConstraintCheckingContext.#ctor(Sudoku.Concepts.Grid@,Sudoku.Analytics.AnalyzerResult)">
            <summary>
            Represents context that will be called by method <see cref="M:Sudoku.Strategying.Constraint.Check(Sudoku.Strategying.ConstraintCheckingContext)"/>.
            </summary>
            <param name="Grid">Indicates the reference to the grid to be checked.</param>
            <param name="AnalyzerResult">Indicates the analyzer result.</param>
            <seealso cref="M:Sudoku.Strategying.Constraint.Check(Sudoku.Strategying.ConstraintCheckingContext)"/>
        </member>
        <member name="P:Sudoku.Strategying.ConstraintCheckingContext.Grid">
            <summary>Indicates the reference to the grid to be checked.</summary>
        </member>
        <member name="P:Sudoku.Strategying.ConstraintCheckingContext.AnalyzerResult">
            <summary>Indicates the analyzer result.</summary>
        </member>
        <member name="T:Sudoku.Strategying.ConstraintCollection">
            <summary>
            Represents a constraint collection.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.ConstraintCollection.IsValidFor(Sudoku.Strategying.ConstraintCheckingContext)">
            <summary>
            For a given <see cref="T:Sudoku.Strategying.ConstraintCheckingContext"/>,
            determine whether the specified grid and its related analysis result satisfy the current limited constraint rules.
            </summary>
            <param name="context">The context to be used.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Strategying.ConstraintCollection.FindFirst``1(System.Func{Sudoku.Strategying.Constraint,System.Boolean},System.Func{Sudoku.Strategying.Constraint,``0},``0)">
            <summary>
            Try to get the first <see cref="T:Sudoku.Strategying.Constraint"/> satisfying the specified condition,
            returning the value of type <typeparamref name="TResult"/> created by the specified method.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="match">The match method.</param>
            <param name="selector">The selector method.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The final result.</returns>
        </member>
        <member name="M:Sudoku.Strategying.ConstraintCollection.FindFirst``2(System.Func{``0,``1},``1)">
            <summary>
            Try to get the first <see cref="T:Sudoku.Strategying.Constraint"/> satisfying the specified condition,
            returning the value of type <typeparamref name="TResult"/> created by the specified method.
            </summary>
            <typeparam name="TConstraint">The type of constraint.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="matchedSelector">
            Indicates the matched selector. The method will be used in both checking and converting operation.
            </param>
            <param name="defaultValue">
            Indicates the default value used. By default the value equals to <see langword="default"/>(<typeparamref name="TResult"/>).
            </param>
            <returns>The final result.</returns>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.ConclusionConstraint">
            <summary>
            Represents a conclusion constraint.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ConclusionConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ConclusionConstraint.ShouldAppear">
            <summary>
            Indicates whether the conclusion should be appeared.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ConclusionConstraint.Conclusion">
            <summary>
            Indicates the conclusion.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConclusionConstraint.Check(Sudoku.Strategying.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConclusionConstraint.Equals(Sudoku.Strategying.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConclusionConstraint.ToString(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConclusionConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConclusionConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.CountBetweenConstraint">
            <summary>
            Represents a count between constraint.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.CountBetweenConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.CountBetweenConstraint.Range">
            <summary>
            Indicates the range of the numbers set.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.CountBetweenConstraint.CellState">
            <summary>
            Indicates the cell state to be checked. The desired values should be
            <see cref="F:Sudoku.Concepts.CellState.Given"/> or <see cref="F:Sudoku.Concepts.CellState.Empty"/>.
            </summary>
            <seealso cref="F:Sudoku.Concepts.CellState.Given"/>
            <seealso cref="F:Sudoku.Concepts.CellState.Empty"/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.CountBetweenConstraint.BetweenRule">
            <summary>
            Indicates the between rule.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountBetweenConstraint.Equals(Sudoku.Strategying.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountBetweenConstraint.Check(Sudoku.Strategying.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountBetweenConstraint.ToString(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountBetweenConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountBetweenConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.DiamondConstraint">
            <summary>
            Represents a constraint that checks for diamond property.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DiamondConstraint.#ctor">
            <summary>
            Represents a constraint that checks for diamond property.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.DifficultyLevelConstraint">
            <summary>
            Represents difficulty level constraint.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.DifficultyLevel">
            <summary>
            Indicates the difficulty level.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.Operator">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.ValidDifficultyLevels">
            <summary>
            Indicates all possible <see cref="T:Sudoku.Analytics.Categorization.DifficultyLevel"/> values. 
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.Equals(Sudoku.Strategying.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.Check(Sudoku.Strategying.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.ToString(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.IttoryuConstraint">
            <summary>
            Represents a constraint that checks whether a puzzle can be finished by ittoryu rules.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuConstraint.Rounds">
            <summary>
            Indicates the rounds used.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuConstraint.Operator">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuConstraint.Sudoku#Strategying#Constraints#ILimitCountConstraint{System#Int32}#LimitCount">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuConstraint.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuConstraint.Maximum">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuConstraint.Equals(Sudoku.Strategying.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuConstraint.Check(Sudoku.Strategying.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuConstraint.ToString(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.IttoryuLengthConstraint">
            <summary>
            Represents ittoryu length constraint.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Finder">
            <summary>
            Indicates the disordered ittoryu finder.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Length">
            <summary>
            Indicates the length.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Operator">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Sudoku#Strategying#Constraints#ILimitCountConstraint{System#Int32}#LimitCount">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Maximum">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Equals(Sudoku.Strategying.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Check(Sudoku.Strategying.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.ToString(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.MinimalConstraint">
            <summary>
            Represents minimal constraint.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.MinimalConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.MinimalConstraint.ShouldBeMinimal">
            <summary>
            Indicates whether the puzzle shsould be minimal.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.MinimalConstraint.Equals(Sudoku.Strategying.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.MinimalConstraint.Check(Sudoku.Strategying.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.MinimalConstraint.ToString(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.MinimalConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.MinimalConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.PearlConstraint">
            <summary>
            Represents a constraint that checks for pearl property.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlConstraint.#ctor">
            <summary>
            Represents a constraint that checks for pearl property.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint">
            <summary>
            Represents a constraint that checks for pearl or diamond property.
            </summary>
            <param name="checkPearl">Indicates whether the constraint checks for pearl.</param>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.#ctor(System.Boolean)">
            <summary>
            Represents a constraint that checks for pearl or diamond property.
            </summary>
            <param name="checkPearl">Indicates whether the constraint checks for pearl.</param>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.ShouldBePearlOrDiamond">
            <summary>
            Indicates whether the puzzle should be pearl or diamond.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.Equals(Sudoku.Strategying.Constraint)">
            <inheritdocs/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.Check(Sudoku.Strategying.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.ToString(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.CheckPearl">
            <summary>
            The generated property declaration for parameter <c>checkPearl</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.SinglePreferConstraint">
            <summary>
            Represents a single prefer constraint.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.SinglePreferConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.SinglePreferConstraint.AllowsHiddenSingleInRowsOrColumns">
            <summary>
            Indicates whether the constraint allows hidden singles on rows or columns.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.SinglePreferConstraint.SinglePrefer">
            <summary>
            Indicates which way a user likes to finish a grid.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SinglePreferConstraint.Equals(Sudoku.Strategying.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SinglePreferConstraint.Check(Sudoku.Strategying.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SinglePreferConstraint.ToString(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SinglePreferConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SinglePreferConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.IComparisonOperatorConstraint">
            <summary>
            Represents a type that supports for comparison operator.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IComparisonOperatorConstraint.Operator">
            <summary>
            Indicates the comparison operator used.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.ILimitCountConstraint`1">
            <summary>
            Represents a type that supports limit number.
            </summary>
            <typeparam name="TNumber">The type of the number.</typeparam>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ILimitCountConstraint`1.LimitCount">
            <summary>
            Indicates the limit number.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ILimitCountConstraint`1.Minimum">
            <summary>
            Indicates the minimum value.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ILimitCountConstraint`1.Maximum">
            <summary>
            Indicates the maximum value.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.SymmetryConstraint">
            <summary>
            Represents symmetry constraint. This constraint won't be used because <see cref="T:Sudoku.Algorithm.Generating.HodokuPuzzleGenerator"/> can controls this.
            </summary>
            <seealso cref="T:Sudoku.Algorithm.Generating.HodokuPuzzleGenerator"/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.SymmetryConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.SymmetryConstraint.SymmetricTypes">
            <summary>
            Indicates the supported symmetry types to be used.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SymmetryConstraint.Equals(Sudoku.Strategying.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SymmetryConstraint.Check(Sudoku.Strategying.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SymmetryConstraint.ToString(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SymmetryConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SymmetryConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.TechniqueConstraint">
            <summary>
            Represents a technique constraint. Different with <see cref="T:Sudoku.Strategying.Constraints.TechniqueCountConstraint"/>,
            this constraint only controls the appearing techniques, rather than the number of times appeared.
            </summary>
            <seealso cref="T:Sudoku.Strategying.Constraints.TechniqueCountConstraint"/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.TechniqueConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.TechniqueConstraint.Techniques">
            <summary>
            Indicates the techniques must appear.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.TechniqueConstraint.Check(Sudoku.Strategying.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.TechniqueConstraint.Equals(Sudoku.Strategying.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.TechniqueConstraint.ToString(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.TechniqueConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.TechniqueConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.TechniqueCountConstraint">
            <summary>
            Represents a rule that checks whether the specified analyzer result after analyzed by a grid
            contains the specified techniques.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.TechniqueCountConstraint.AllowDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.TechniqueCountConstraint.LimitCount">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.TechniqueCountConstraint.Operator">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.TechniqueCountConstraint.Technique">
            <summary>
            Indicates the technique used.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.TechniqueCountConstraint.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.TechniqueCountConstraint.Maximum">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.TechniqueCountConstraint.Equals(Sudoku.Strategying.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.TechniqueCountConstraint.Check(Sudoku.Strategying.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.TechniqueCountConstraint.ToString(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.TechniqueCountConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.TechniqueCountConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
    </members>
</doc>
