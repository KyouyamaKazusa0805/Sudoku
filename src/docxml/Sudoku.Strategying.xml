<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Strategying</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Strategying.BetweenRule">
            <summary>
            Represents a between rule.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.BetweenRule.BothOpen">
            <summary>
            Indicates both left and right are open (not included).
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.BetweenRule.LeftOpen">
            <summary>
            Indicates only the left is open, and the right is closed.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.BetweenRule.RightOpen">
            <summary>
            Indicates only the right is open, and the left is closed.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.BetweenRule.BothClosed">
            <summary>
            Indicates both left and right are closed (included).
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.ComparisonOperator">
            <summary>
            Represent an operator to be used in comparison.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.Equality">
            <summary>
            Indicates the comparison rule is to compare equality.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.Inequality">
            <summary>
            Indicates the comparison rule is to compare inequality.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.GreaterThan">
            <summary>
            Indicates the comparison rule is to compare greater-than.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.GreaterThanOrEqual">
            <summary>
            Indicates the comparison rule is to compare greater-than or equality.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.LessThan">
            <summary>
            Indicates the comparison rule is to compare less-than.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.ComparisonOperator.LessThanOrEqual">
            <summary>
            Indicates the comparison rule is to compare less-than or equality.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.ComparisonOperatorExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Sudoku.Strategying.ComparisonOperator"/>.
            </summary>
            <seealso cref="T:Sudoku.Strategying.ComparisonOperator"/>
        </member>
        <member name="M:Sudoku.Strategying.ComparisonOperatorExtensions.GetOperator``1(Sudoku.Strategying.ComparisonOperator)">
            <summary>
            Creates a delegate method that executes the specified rule of comparison.
            </summary>
            <typeparam name="T">The type of the target.</typeparam>
            <param name="this">The comparison.</param>
            <returns>A delegate function.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when the argument is out of range (not defined).</exception>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.AnalyzerTechniqueConstraint">
            <summary>
            Represents a rule that checks whether the specified analyzer result after analyzed by a grid
            contains the specified techniques.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.AnalyzerTechniqueConstraint.Techniques">
            <summary>
            Indicates the techniques used.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueConstraint.VerifyConfliction(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueConstraint.CheckCore(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueConstraint.ValidateCore">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.AnalyzerTechniqueCountConstraint">
            <summary>
            Represents a constraint that checks for techniques, and their appeared counts.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.AnalyzerTechniqueCountConstraint.UniversalQuantifier">
            <summary>
            Indicates the universal quantifier.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.AnalyzerTechniqueCountConstraint.TechniqueAppearing">
            <summary>
            Indicates the dictionary that stores the appearing cases on each technique.
            </summary>
            <remarks>
            The return type of this property is <see cref="T:System.Collections.Frozen.FrozenDictionary`2"/>. You can create an instance
            by using extension method <c>ToFrozenDictionary</c> in type <see cref="T:System.Collections.Frozen.FrozenDictionary"/>.
            </remarks>
            <seealso cref="T:System.Collections.Frozen.FrozenDictionary"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueCountConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueCountConstraint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueCountConstraint.CheckCore(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueCountConstraint.ValidateCore">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueCountConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.AnalyzerTechniqueGroupConstraint">
            <summary>
            Represents a constraint that checks for a technique group.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.AnalyzerTechniqueGroupConstraint.TechniqueGroup">
            <summary>
            Indicates the desired technique group.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueGroupConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueGroupConstraint.CheckCore(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueGroupConstraint.ValidateCore">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueGroupConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueGroupConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.AnalyzerTechniqueNameConstraint">
            <summary>
            Represents a constraint that checks for the name of the technique.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.AnalyzerTechniqueNameConstraint.Pattern">
            <summary>
            Indicates the desired name pattern.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.AnalyzerTechniqueNameConstraint.CurrentCulture">
            <summary>
            Indicates the current culture.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueNameConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueNameConstraint.CheckCore(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueNameConstraint.ValidateCore">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueNameConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.AnalyzerTechniqueNameConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.BottleneckConstraint">
            <summary>
            Represents a constraint that checks whether a puzzle contains any bottleneck.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.BottleneckConstraint.Type">
            <summary>
            Indicates the type of the bottleneck will be checked.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.BottleneckConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.BottleneckConstraint.CheckCore(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.BottleneckConstraint.ValidateCore">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.BottleneckConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.BottleneckConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.ConclusionConstraint">
            <summary>
            Represents a conclusion constraint.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ConclusionConstraint.UniversalQuantifier">
            <summary>
            Indicates the universal quantifier.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ConclusionConstraint.Conclusions">
            <summary>
            Indicates the conclusions to be checked.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConclusionConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConclusionConstraint.CheckCore(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConclusionConstraint.ValidateCore">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConclusionConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConclusionConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.Constraint">
            <summary>
            Represents a rule that checks whether a grid or its relied analysis information is passed the constraint.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.Check(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <summary>
            Determine whether the specified grid is passed the constraint.
            </summary>
            <param name="context">Indicates the context used.</param>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.VerifyConfliction(Sudoku.Strategying.Constraints.Constraint)">
            <summary>
            Determine whether the current constraint will raise a confliction with the specified constraint.
            By default, the method always return <see cref="P:Sudoku.Strategying.Validation.ConflictionResult.Successful"/>.
            </summary>
            <param name="other">The constraint to be checked.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating whether the current constraint will conflict with the specified one.</returns>
            <seealso cref="P:Sudoku.Strategying.Validation.ConflictionResult.Successful"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.CheckCore(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc cref="M:Sudoku.Strategying.Constraints.Constraint.Check(Sudoku.Strategying.Constraints.ConstraintCheckingContext)"/>
            <remarks><i>
            This method only handles for the core rule of the type, which means we should suppose the values are valid.
            </i></remarks>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.ValidateCore">
            <summary>
            Verifies the validity of properties set.
            </summary>
            <returns>A <see cref="T:Sudoku.Strategying.Validation.ValidationResult"/> instance describing the final result on validation.</returns>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.DictionaryEquals``2(``0,``1,Sudoku.Strategying.UniversalQuantifier)">
            <summary>
            Compares instances <typeparamref name="T1"/> and <typeparamref name="T2"/> with inner values.
            </summary>
            <typeparam name="T1">The type of the first dictionary.</typeparam>
            <typeparam name="T2">The type of the second dictionary.</typeparam>
            <param name="left">The first element to be compared.</param>
            <param name="right">The second element to be compared.</param>
            <param name="universalQuantifier">The universal quantifier.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.DictionaryGreaterThanOrEquals``2(``0,``1,Sudoku.Strategying.UniversalQuantifier)">
            <summary>
            Compares instances <typeparamref name="T1"/> and <typeparamref name="T2"/> with inner values.
            </summary>
            <typeparam name="T1">The type of the first dictionary.</typeparam>
            <typeparam name="T2">The type of the second dictionary.</typeparam>
            <param name="left">The first element to be compared.</param>
            <param name="right">The second element to be compared.</param>
            <param name="universalQuantifier">The universal quantifier.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.op_Equality(Sudoku.Strategying.Constraints.Constraint,Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.Constraint.op_Inequality(Sudoku.Strategying.Constraints.Constraint,Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.ConstraintCheckingContext">
            <summary>
            Represents context used by <see cref="T:Sudoku.Strategying.Constraints.Constraint"/> instance.
            </summary>
            <param name="grid">Indicates the reference to the grid to be checked.</param>
            <param name="analyzerResult">Indicates the analyzer result.</param>
            <param name="collectorResult">Indicates the collector result.</param>
            <param name="cancellationToken">Indicates the cancellation token that can cancel the current operation.</param>
            <seealso cref="T:Sudoku.Strategying.Constraints.Constraint"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConstraintCheckingContext.#ctor(Sudoku.Concepts.Grid@,Sudoku.Analytics.AnalyzerResult,Sudoku.Analytics.Step[][],System.Threading.CancellationToken)">
            <summary>
            Represents context used by <see cref="T:Sudoku.Strategying.Constraints.Constraint"/> instance.
            </summary>
            <param name="grid">Indicates the reference to the grid to be checked.</param>
            <param name="analyzerResult">Indicates the analyzer result.</param>
            <param name="collectorResult">Indicates the collector result.</param>
            <param name="cancellationToken">Indicates the cancellation token that can cancel the current operation.</param>
            <seealso cref="T:Sudoku.Strategying.Constraints.Constraint"/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ConstraintCheckingContext.RequiresAnalyzer">
            <summary>
            Indicates whether a screening rule requires property <see cref="P:Sudoku.Strategying.Constraints.ConstraintCheckingContext.AnalyzerResult"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ConstraintCheckingContext.RequiresCollector">
            <summary>
            Indicates whether a screening rule requires property <see cref="P:Sudoku.Strategying.Constraints.ConstraintCheckingContext.CollectorResult"/>.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Constraints.ConstraintCheckingContext.Grid">
            <summary>
            The generated field declaration for parameter <c>grid</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ConstraintCheckingContext.AnalyzerResult">
            <summary>
            The generated property declaration for parameter <c>analyzerResult</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ConstraintCheckingContext.CollectorResult">
            <summary>
            The generated property declaration for parameter <c>collectorResult</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ConstraintCheckingContext.CancellationToken">
            <summary>
            The generated property declaration for parameter <c>cancellationToken</c>.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.ConstraintCollection">
            <summary>
            Represents a constraint collection.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.ConstraintCollection.Item(System.Int32)">
            <summary>
            Gets the constraint at the specified index.
            </summary>
            <param name="index">The desired index.</param>
            <returns>The <see cref="T:Sudoku.Strategying.Constraints.Constraint"/> instance at the specified index.</returns>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConstraintCollection.Equals(Sudoku.Strategying.Constraints.ConstraintCollection)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConstraintCollection.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConstraintCollection.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConstraintCollection.op_Equality(Sudoku.Strategying.Constraints.ConstraintCollection,Sudoku.Strategying.Constraints.ConstraintCollection)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.ConstraintCollection.op_Inequality(Sudoku.Strategying.Constraints.ConstraintCollection,Sudoku.Strategying.Constraints.ConstraintCollection)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.CountBetweenConstraint">
            <summary>
            Represents a count between constraint.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.CountBetweenConstraint.Range">
            <summary>
            Indicates the minimum value.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.CountBetweenConstraint.CellState">
            <summary>
            Indicates the cell state to be checked.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.CountBetweenConstraint.BetweenRule">
            <summary>
            Indicates the between rule.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountBetweenConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountBetweenConstraint.CheckCore(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountBetweenConstraint.ValidateCore">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountBetweenConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountBetweenConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.CountConstraint">
            <summary>
            Represents a rule that checks for the number of cells appeared in cell, using the specified cell state.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.CountConstraint.LimitCount">
            <summary>
            Indicates the limit number of cells to be checked.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.CountConstraint.CellState">
            <summary>
            Indicates the cell state to be checked.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.CountConstraint.Operator">
            <summary>
            Indicates the comparison operator.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountConstraint.CheckCore(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountConstraint.ValidateCore">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.CountConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.DiamondConstraint">
            <summary>
            Represents a constraint that checks for diamond property.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DiamondConstraint.#ctor">
            <summary>
            Represents a constraint that checks for diamond property.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.DifficultyLevelConstraint">
            <summary>
            Represents difficulty level constraint.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.DifficultyLevel">
            <summary>
            Indicates the difficulty level.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.Operator">
            <summary>
            Indicates the operator.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.CheckCore(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.ValidateCore">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.DifficultyLevelConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.IttoryuConstraint">
            <summary>
            Represents a constraint that checks whether a puzzle can be finished by ittoryu rules.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuConstraint.Rounds">
            <summary>
            Indicates the rounds used.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuConstraint.Operator">
            <summary>
            Indicates the operator to compare values.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuConstraint.CheckCore(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuConstraint.ValidateCore">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.IttoryuLengthConstraint">
            <summary>
            Represents ittoryu length constraint.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Finder">
            <summary>
            Indicates the disordered ittoryu finder.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Length">
            <summary>
            Indicates the length.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Operator">
            <summary>
            Indicates the comparison operator.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.VerifyConfliction(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.CheckCore(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.ValidateCore">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.IttoryuLengthConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.MinimalConstraint">
            <summary>
            Represents minimal constraint.
            </summary>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.MinimalConstraint.ShouldBeMinimal">
            <summary>
            Indicates whether the puzzle shsould be minimal.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.MinimalConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.MinimalConstraint.CheckCore(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.MinimalConstraint.ValidateCore">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.MinimalConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.MinimalConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.PearlConstraint">
            <summary>
            Represents a constraint that checks for pearl property.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlConstraint.#ctor">
            <summary>
            Represents a constraint that checks for pearl property.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint">
            <summary>
            Represents a constraint that checks for pearl or diamond property.
            </summary>
            <param name="checkPearl">Indicates whether the constraint checks for pearl.</param>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.#ctor(System.Boolean)">
            <summary>
            Represents a constraint that checks for pearl or diamond property.
            </summary>
            <param name="checkPearl">Indicates whether the constraint checks for pearl.</param>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdocs/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.CheckCore(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.ValidateCore">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.CheckPearl">
            <summary>
            The generated property declaration for parameter <c>checkPearl</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.PearlOrDiamondConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.Constraints.SymmetryConstraint">
            <summary>
            Represents symmetry constraint. This constraint won't be used because <see cref="T:Sudoku.Algorithm.Generating.HodokuPuzzleGenerator"/> can controls this.
            </summary>
            <seealso cref="T:Sudoku.Algorithm.Generating.HodokuPuzzleGenerator"/>
        </member>
        <member name="P:Sudoku.Strategying.Constraints.SymmetryConstraint.SymmetricTypes">
            <summary>
            Indicates the supported symmetry types to be used.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SymmetryConstraint.Equals(Sudoku.Strategying.Constraints.Constraint)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SymmetryConstraint.CheckCore(Sudoku.Strategying.Constraints.ConstraintCheckingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SymmetryConstraint.ValidateCore">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SymmetryConstraint.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Strategying.Constraints.SymmetryConstraint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Strategying.UniversalQuantifier">
            <summary>
            Represents the universal quantifier.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.UniversalQuantifier.Any">
            <summary>
            Indicates the quantifier is "any".
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.UniversalQuantifier.All">
            <summary>
            Indicates the quantifier is "all".
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Validation.ConflictionResult">
            <summary>
            Represents a result information that describes the confliction.
            </summary>
            <param name="IsSuccess">Indicates the confliction result descibes for "success" status, without any confliction.</param>
            <param name="FailedConstraint">Indicates the failed constraint.</param>
            <param name="Type">Indicates the confliction type appeared.</param>
            <param name="Severity">Indicates the severity of the failure.</param>
            <completionlist cref="T:Sudoku.Strategying.Validation.ConflictionResult"/>
        </member>
        <member name="M:Sudoku.Strategying.Validation.ConflictionResult.#ctor(System.Boolean,Sudoku.Strategying.Constraints.Constraint,Sudoku.Strategying.Validation.ConflictionType,Sudoku.Strategying.Validation.Severity)">
            <summary>
            Represents a result information that describes the confliction.
            </summary>
            <param name="IsSuccess">Indicates the confliction result descibes for "success" status, without any confliction.</param>
            <param name="FailedConstraint">Indicates the failed constraint.</param>
            <param name="Type">Indicates the confliction type appeared.</param>
            <param name="Severity">Indicates the severity of the failure.</param>
            <completionlist cref="T:Sudoku.Strategying.Validation.ConflictionResult"/>
        </member>
        <member name="P:Sudoku.Strategying.Validation.ConflictionResult.IsSuccess">
            <summary>Indicates the confliction result descibes for "success" status, without any confliction.</summary>
        </member>
        <member name="P:Sudoku.Strategying.Validation.ConflictionResult.FailedConstraint">
            <summary>Indicates the failed constraint.</summary>
        </member>
        <member name="P:Sudoku.Strategying.Validation.ConflictionResult.Type">
            <summary>Indicates the confliction type appeared.</summary>
        </member>
        <member name="P:Sudoku.Strategying.Validation.ConflictionResult.Severity">
            <summary>Indicates the severity of the failure.</summary>
        </member>
        <member name="P:Sudoku.Strategying.Validation.ConflictionResult.Successful">
            <summary>
            Indictes the successful message.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Validation.ConflictionResult.Failed(Sudoku.Strategying.Constraints.Constraint,Sudoku.Strategying.Validation.ConflictionType,Sudoku.Strategying.Validation.Severity)">
            <summary>
            Indicates the failed message.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="type">The type.</param>
            <param name="severity">The severity.</param>
            <returns>A <see cref="T:Sudoku.Strategying.Validation.ConflictionResult"/> instance.</returns>
        </member>
        <member name="T:Sudoku.Strategying.Validation.NoConflictionResult">
            <summary>
            Indicates there is no confliction.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Validation.NoConflictionResult.#ctor">
            <summary>
            Indicates there is no confliction.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Validation.ContainsConflictionResult">
            <summary>
            Indicates there is any confliction appears.
            </summary>
            <param name="Constraint">The constraint that creates this error.</param>
            <param name="Type">The type of the confliction.</param>
            <param name="Severity">Indicates the severity of this failure.</param>
        </member>
        <member name="M:Sudoku.Strategying.Validation.ContainsConflictionResult.#ctor(Sudoku.Strategying.Constraints.Constraint,Sudoku.Strategying.Validation.ConflictionType,Sudoku.Strategying.Validation.Severity)">
            <summary>
            Indicates there is any confliction appears.
            </summary>
            <param name="Constraint">The constraint that creates this error.</param>
            <param name="Type">The type of the confliction.</param>
            <param name="Severity">Indicates the severity of this failure.</param>
        </member>
        <member name="P:Sudoku.Strategying.Validation.ContainsConflictionResult.Constraint">
            <summary>The constraint that creates this error.</summary>
        </member>
        <member name="T:Sudoku.Strategying.Validation.ConflictionType">
            <summary>
            Indicates the confliction type.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Validation.ConflictionType.None">
            <summary>
            Indicates no confliction raised.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Validation.ConflictionType.ValueFullyCovered">
            <summary>
            Indicates the value is fully covered by the other <see cref="T:Sudoku.Strategying.Constraints.Constraint"/>.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Validation.ConflictionType.ValueDiffers">
            <summary>
            Indicates the value differs.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Validation.Severity">
            <summary>
            Represents a field that describes the severity of the failure.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Validation.Severity.None">
            <summary>
            The placeholder of the severity.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Validation.Severity.Info">
            <summary>
            Indicates the severity is to report information.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Validation.Severity.Warning">
            <summary>
            Indicates the severity is to report warning.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Validation.Severity.Error">
            <summary>
            Indicates the severity is to report error.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Validation.ValidationReason">
            <summary>
            Represents a field that describes why the validation failed.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Validation.ValidationReason.None">
            <summary>
            The placeholder of this enumeration type.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Validation.ValidationReason.EnumerationFieldNotDefined">
            <summary>
            Indicates the enumeration field is not defined.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Validation.ValidationReason.OutOfRange">
            <summary>
            Indicates the value is out of range.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Validation.ValidationReason.AlwaysTrue">
            <summary>
            Indicates the value will make the condition always true.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Validation.ValidationReason.AlwaysFalse">
            <summary>
            Indicates the value will make the condition always false.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Validation.ValidationReason.TooStrict">
            <summary>
            Indicates the conditition is too strict, causing little puzzles can be checked.
            </summary>
        </member>
        <member name="F:Sudoku.Strategying.Validation.ValidationReason.MalformedPattern">
            <summary>
            Indicates the pattern is malformed.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Validation.ValidationResult">
            <summary>
            Represents a result data that describes why the validation failed.
            </summary>
            <param name="IsSuccess">Indicates whether the validation is passed and no error produced.</param>
            <param name="FailedPropertyName">Indicates the failed property name to be set.</param>
            <param name="Reason">Indicates the failed reason.</param>
            <param name="Severity">Indicates the severity of the failure.</param>
            <completionlist cref="T:Sudoku.Strategying.Validation.ValidationResult"/>
        </member>
        <member name="M:Sudoku.Strategying.Validation.ValidationResult.#ctor(System.Boolean,System.String,Sudoku.Strategying.Validation.ValidationReason,Sudoku.Strategying.Validation.Severity)">
            <summary>
            Represents a result data that describes why the validation failed.
            </summary>
            <param name="IsSuccess">Indicates whether the validation is passed and no error produced.</param>
            <param name="FailedPropertyName">Indicates the failed property name to be set.</param>
            <param name="Reason">Indicates the failed reason.</param>
            <param name="Severity">Indicates the severity of the failure.</param>
            <completionlist cref="T:Sudoku.Strategying.Validation.ValidationResult"/>
        </member>
        <member name="P:Sudoku.Strategying.Validation.ValidationResult.IsSuccess">
            <summary>Indicates whether the validation is passed and no error produced.</summary>
        </member>
        <member name="P:Sudoku.Strategying.Validation.ValidationResult.FailedPropertyName">
            <summary>Indicates the failed property name to be set.</summary>
        </member>
        <member name="P:Sudoku.Strategying.Validation.ValidationResult.Reason">
            <summary>Indicates the failed reason.</summary>
        </member>
        <member name="P:Sudoku.Strategying.Validation.ValidationResult.Severity">
            <summary>Indicates the severity of the failure.</summary>
        </member>
        <member name="P:Sudoku.Strategying.Validation.ValidationResult.Successful">
            <summary>
            Represents a <see cref="T:Sudoku.Strategying.Validation.ValidationResult"/> that describes for a successful message.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Validation.ValidationResult.Failed(System.String,Sudoku.Strategying.Validation.ValidationReason,Sudoku.Strategying.Validation.Severity)">
            <summary>
            Represents a <see cref="T:Sudoku.Strategying.Validation.ValidationResult"/> that describes for a failed message.
            </summary>
            <param name="failedPropertyName">Indicates the name of the failed property.</param>
            <param name="reason">Indicates the reason why raises the failure.</param>
            <param name="severity">Indicates the severity of the failure.</param>
            <returns>The <see cref="T:Sudoku.Strategying.Validation.ValidationResult"/> instance.</returns>
        </member>
        <member name="T:Sudoku.Strategying.Validation.SuccessValidationResult">
            <summary>
            Represents a result that is succeeded after executed.
            </summary>
        </member>
        <member name="M:Sudoku.Strategying.Validation.SuccessValidationResult.#ctor">
            <summary>
            Represents a result that is succeeded after executed.
            </summary>
        </member>
        <member name="T:Sudoku.Strategying.Validation.FailedValidationResult">
            <summary>
            Represents a result why causes the failure.
            </summary>
            <param name="FailPropertyName">Indicates the property name that makes the validation failed.</param>
            <param name="Reason"><inheritdoc cref="T:Sudoku.Strategying.Validation.ValidationResult" path="/param[@name='Reason']"/></param>
            <param name="Severity"><inheritdoc cref="T:Sudoku.Strategying.Validation.ValidationResult" path="/param[@name='Severity']"/></param>
        </member>
        <member name="M:Sudoku.Strategying.Validation.FailedValidationResult.#ctor(System.String,Sudoku.Strategying.Validation.ValidationReason,Sudoku.Strategying.Validation.Severity)">
            <summary>
            Represents a result why causes the failure.
            </summary>
            <param name="FailPropertyName">Indicates the property name that makes the validation failed.</param>
            <param name="Reason"><inheritdoc cref="T:Sudoku.Strategying.Validation.ValidationResult" path="/param[@name='Reason']"/></param>
            <param name="Severity"><inheritdoc cref="T:Sudoku.Strategying.Validation.ValidationResult" path="/param[@name='Severity']"/></param>
        </member>
        <member name="P:Sudoku.Strategying.Validation.FailedValidationResult.FailPropertyName">
            <summary>Indicates the property name that makes the validation failed.</summary>
        </member>
    </members>
</doc>
