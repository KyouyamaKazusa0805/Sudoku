<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Core.Async</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Solving.Async.SolutionEnumerableSolverExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Sudoku.Solving.ISolutionEnumerableSolver"/>.
            </summary>
            <seealso cref="T:Sudoku.Solving.ISolutionEnumerableSolver"/>
        </member>
        <member name="M:Sudoku.Solving.Async.SolutionEnumerableSolverExtensions.CountSolutionsAsync(Sudoku.Solving.ISolutionEnumerableSolver,Sudoku.Concepts.Grid,System.Threading.CancellationToken)">
            <summary>
            Count the number of solutions can be found of a grid.
            </summary>
            <param name="this">The solver.</param>
            <param name="grid">The grid to be solved.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> instance indicating the asynchronous operation,
            with an <see cref="T:System.Int32"/> value indicating the result can be produced after the operation executed.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Async.SolutionEnumerableSolverExtensions.EnumerateSolutionsAsync(Sudoku.Solving.ISolutionEnumerableSolver,Sudoku.Concepts.Grid,System.Threading.CancellationToken)">
            <summary>
            Try to enumerate all possible solutions of the specified grid, by using the current solver, in asynchronous way.
            </summary>
            <param name="this">The solver.</param>
            <param name="grid">The grid.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A sequence of <see cref="T:Sudoku.Concepts.Grid"/> values indicating the raw solution text to the puzzle.</returns>
        </member>
    </members>
</doc>
