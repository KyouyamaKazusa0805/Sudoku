<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Analytics.Exocets</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Concepts.ExocetShapeKind">
            <summary>
            Indicates a shape modifier that is used for a complex fish pattern.
            </summary>
            <remarks><flags-attribute>
		<para>
			<i>
				This type is marked <see cref="T:System.FlagsAttribute" />, which means you can use
				<see langword="operator" /> | to combine multiple fields.
			</i>
		</para>
	</flags-attribute></remarks>
        </member>
        <member name="F:Sudoku.Concepts.ExocetShapeKind.Basic">
            <summary>
            Indicates the basic exocet. This field is a reserved field.
            </summary>
        </member>
        <member name="F:Sudoku.Concepts.ExocetShapeKind.Franken">
            <summary>
            Indicates the franken exocet.
            </summary>
        </member>
        <member name="F:Sudoku.Concepts.ExocetShapeKind.Mutant">
            <summary>
            Indicates the mutant exocet.
            </summary>
        </member>
        <member name="T:Sudoku.Concepts.IComplexSeniorExocet">
            <summary>
            The base overrides for complex senior exocet steps.
            </summary>
        </member>
        <member name="P:Sudoku.Concepts.IComplexSeniorExocet.CrosslineHousesMask">
            <summary>
            The mask that holds a list of cross-line houses used.
            </summary>
        </member>
        <member name="P:Sudoku.Concepts.IComplexSeniorExocet.ExtraHousesMask">
            <summary>
            The mask that holds a list of extra houses used.
            </summary>
        </member>
        <member name="T:Sudoku.Concepts.IDoubleExocet">
            <summary>
            The base overrides for double exocet steps.
            </summary>
        </member>
        <member name="P:Sudoku.Concepts.IDoubleExocet.BaseCells">
            <summary>
            A list of cells as the base cells.
            </summary>
        </member>
        <member name="P:Sudoku.Concepts.IDoubleExocet.TargetCells">
            <summary>
            A list of cells as the target cells.
            </summary>
        </member>
        <member name="P:Sudoku.Concepts.IDoubleExocet.BaseCellsTheOther">
            <summary>
            A list of cells as the other pair of base cells.
            </summary>
        </member>
        <member name="P:Sudoku.Concepts.IDoubleExocet.TargetCellsTheOther">
            <summary>
            A list of cells as the other pair of target cells.
            </summary>
        </member>
        <member name="T:Sudoku.Concepts.LockedMember">
            <summary>
            Represents a locked member. This type is only used by searching for exocets.
            </summary>
            <param name="LockedCells">Indicates the locked cells.</param>
            <param name="LockedBlock">Indicates the locked block.</param>
        </member>
        <member name="M:Sudoku.Concepts.LockedMember.#ctor(Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Represents a locked member. This type is only used by searching for exocets.
            </summary>
            <param name="LockedCells">Indicates the locked cells.</param>
            <param name="LockedBlock">Indicates the locked block.</param>
        </member>
        <member name="P:Sudoku.Concepts.LockedMember.LockedCells">
            <summary>Indicates the locked cells.</summary>
        </member>
        <member name="P:Sudoku.Concepts.LockedMember.LockedBlock">
            <summary>Indicates the locked block.</summary>
        </member>
        <member name="T:Sudoku.Concepts.CellMapExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Sudoku.Concepts.CellMap"/> instances.
            </summary>
            <seealso cref="T:Sudoku.Concepts.CellMap"/>
        </member>
        <member name="M:Sudoku.Concepts.CellMapExtensions.GroupTargets(Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Try to group up with target cells, separating into multiple parts, grouped by its containing row or column.
            </summary>
            <param name="this">The target cells to be split.</param>
            <param name="houses">The mask value holding a list of houses to be matched.</param>
            <returns>
            A list of <see cref="T:Sudoku.Concepts.CellMap"/> grouped,
            representing as a <see cref="T:Sudoku.Linq.BitStatusMapGrouping`4"/>.
            </returns>
            <seealso cref="T:Sudoku.Linq.BitStatusMapGrouping`4"/>
        </member>
        <member name="T:Sudoku.Concepts.ObjectModel.ExocetShapeKindExtensions">
            <summary>
            Provides with extension methods around enumeration type <see cref="T:Sudoku.Concepts.ExocetShapeKind"/>.
            </summary>
        </member>
        <member name="M:Sudoku.Concepts.ObjectModel.ExocetShapeKindExtensions.GetShapeKind(Sudoku.Concepts.IComplexSeniorExocet)">
            <summary>
            Try to get shape kind via the houses.
            </summary>
            <param name="this">The houses provider.</param>
            <returns>A <see cref="T:Sudoku.Concepts.ExocetShapeKind"/> result.</returns>
        </member>
        <member name="T:Sudoku.Concepts.GridExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Sudoku.Concepts.Grid"/>.
            </summary>
            <seealso cref="T:Sudoku.Concepts.Grid"/>
        </member>
        <member name="M:Sudoku.Concepts.GridExtensions.CheckCrossLineIntersectionLeaveEmpty(Sudoku.Concepts.Grid@,Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Check whether all intersected cells by original cross-line cells and extra house cells are non-empty,
            and cannot be of value appeared in base cells.
            </summary>
            <param name="this">The grid to be checked.</param>
            <param name="crossline">The cross-line cells.</param>
            <param name="baseCellsDigitsMask">The mask that holds a list of digits appeared in base cells.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Concepts.GridExtensions.CheckTargetCellsDigitsValidity(Sudoku.Concepts.Grid@,Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Check whether all digits appeared in base cells can be filled in target empty cells.
            </summary>
            <param name="this">The grid to be checked.</param>
            <param name="targetCellsToBeChecked">The target cells to be checked.</param>
            <param name="baseCellsDigitsMask">A mask that holds a list of digits appeared in base cells.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Concepts.GridExtensions.GetValueDigitsAppearedInCrossline(Sudoku.Concepts.Grid@,Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Try to get all possible digits as value representation in cross-line cells.
            </summary>
            <param name="this">The grid to be checked.</param>
            <param name="crossline">The cross-line cells to be checked.</param>
            <param name="baseCellsDigitsMask">The digits appeared in base cells.</param>
            <returns>A list of digits appeared in cross-line cells as value representation.</returns>
        </member>
    </members>
</doc>
