<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Text.Tokenization</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Concepts.CellMapTokenExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Sudoku.Concepts.CellMap"/>.
            </summary>
            <seealso cref="T:Sudoku.Concepts.CellMap"/>
        </member>
        <member name="M:Sudoku.Concepts.CellMapTokenExtensions.GetToken(Sudoku.Concepts.CellMap@)">
            <summary>
            Indicates the token to the current instance.
            </summary>
            <param name="this">The instance.</param>
            <returns>The string token.</returns>
        </member>
        <member name="M:Sudoku.Concepts.CellMapTokenExtensions.CreateFromToken(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:Sudoku.Concepts.CellMapTokenExtensions.CreateFromToken(System.String)"/>
        </member>
        <member name="M:Sudoku.Concepts.CellMapTokenExtensions.CreateFromToken(System.String)">
            <summary>
            Creates a <see cref="T:Sudoku.Concepts.CellMap"/> instance using the specified token of length 18.
            </summary>
            <param name="token">Indicates the token.</param>
            <returns>A <see cref="T:Sudoku.Concepts.CellMap"/> result.</returns>
            <exception cref="T:System.FormatException">Throws when the length of the argument mismatched.</exception>
        </member>
        <member name="T:Sudoku.Concepts.GridTokenExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Sudoku.Concepts.Grid"/>.
            </summary>
            <seealso cref="T:Sudoku.Concepts.Grid"/>
        </member>
        <member name="P:Sudoku.Concepts.GridTokenExtensions.Base32CharSpan">
            <inheritdoc/>
            <summary>
            The character span that indicates all possible characters appeared in a number with base 32.
            </summary>
        </member>
        <member name="M:Sudoku.Concepts.GridTokenExtensions.GetToken(Sudoku.Concepts.Grid@)">
            <summary>
            Indicates the token of the grid at the initial state.
            </summary>
            <param name="this">Indicates the current instance.</param>
            <returns>The token.</returns>
            <remarks>
            A raw string example is:
            <code><![CDATA[
            35i4ra00rlr4btf9a8s573tsk1ldni00ccfg094v02pk54ff1hc6e7
            ]]></code>
            We should cut them by 6 characters as a group:
            <code><![CDATA[
            35i4ra 00rlr4 btf9a8 s573ts k1ldni 00ccfg 094v02 pk54ff 1hc6e7
            ]]></code>
            9 groups in total.
            Then we should convert it into a valid 9-digit number by treating them as 32-based integers.
            Finally, combinate all groups, then we are done.
            The final text is
            <code><![CDATA[
            106500970000907108400008520945000380672839410000406000009600002860000751051780039
            ]]></code>
            </remarks>
            <exception cref="T:System.NotSupportedException">Throws when the puzzle type is Sukaku.</exception>
        </member>
        <member name="M:Sudoku.Concepts.GridTokenExtensions.CreateFromToken(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:Sudoku.Concepts.GridTokenExtensions.CreateFromToken(System.String)"/>
        </member>
        <member name="M:Sudoku.Concepts.GridTokenExtensions.CreateFromToken(System.String)">
            <summary>
            Creates a <see cref="T:Sudoku.Concepts.Grid"/> instance using the specified token of length 54.
            </summary>
            <param name="token">Indicates the token.</param>
            <returns>A <see cref="T:Sudoku.Concepts.Grid"/> result.</returns>
            <exception cref="T:System.FormatException">Throws when the length of the argument mismatched.</exception>
        </member>
        <member name="M:Sudoku.Concepts.GridTokenExtensions.GetDigitViaToken(System.String)">
            <summary>
            Get digit via token.
            </summary>
            <param name="s">The string.</param>
            <returns>The result digit.</returns>
        </member>
        <member name="T:Sudoku.Text.Tokenization.ITokenizable`1">
            <summary>
            Represents an object that can create a token of type <see cref="T:System.String"/> to describe the encrpyted representation.
            </summary>
            <typeparam name="TSelf">The type of itself.</typeparam>
        </member>
        <member name="P:Sudoku.Text.Tokenization.ITokenizable`1.Token">
            <summary>
            Indicates the token of the object.
            </summary>
        </member>
        <member name="M:Sudoku.Text.Tokenization.ITokenizable`1.Create(System.String)">
            <summary>
            Create an instance of type <typeparamref name="TSelf"/> that is used a token.
            </summary>
            <param name="token">The token to be used.</param>
            <returns>A <typeparamref name="TSelf"/> instance created.</returns>
            <exception cref="T:System.FormatException">Throws when the token is invalid.</exception>
        </member>
    </members>
</doc>
