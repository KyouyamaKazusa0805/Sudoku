<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.IO.Library</name>
    </assembly>
    <members>
        <member name="T:Sudoku.IO.Library.LibraryInfo">
            <summary>
            Represents an entry that plays with a puzzle library file.
            </summary>
            <param name="directory">Indicates the parent directory that stores the library.</param>
            <param name="fileId">Indicates the file name used. The value should be valid as a file name, without file extension.</param>
            <remarks><i>
            This type only supports for Windows now. For other OS platforms,
            I will allow them in the future because I'm not familiar with file systems on other OS platforms.
            </i></remarks>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.#ctor(System.String,System.String)">
            <summary>
            Represents an entry that plays with a puzzle library file.
            </summary>
            <param name="directory">Indicates the parent directory that stores the library.</param>
            <param name="fileId">Indicates the file name used. The value should be valid as a file name, without file extension.</param>
            <remarks><i>
            This type only supports for Windows now. For other OS platforms,
            I will allow them in the future because I'm not familiar with file systems on other OS platforms.
            </i></remarks>
        </member>
        <member name="F:Sudoku.IO.Library.LibraryInfo.SeparatorChar">
            <summary>
            Indicates the separator character.
            </summary>
        </member>
        <member name="F:Sudoku.IO.Library.LibraryInfo.ConfigFileHeader">
            <summary>
            Indicates the file header of config files after created or initialized.
            </summary>
        </member>
        <member name="P:Sudoku.IO.Library.LibraryInfo.IsInitialized">
            <summary>
            Indicates whether the library-related files are initialized.
            </summary>
        </member>
        <member name="P:Sudoku.IO.Library.LibraryInfo.Count">
            <summary>
            Indicates the number of puzzles stored in this file.
            </summary>
            <remarks>
            This property is run synchronously, calling <see cref="M:Sudoku.IO.Library.LibraryInfo.GetCountAsync(System.Threading.CancellationToken)"/>.
            <b>Always measure performance if you want to use this property.</b>
            </remarks>
            <seealso cref="M:Sudoku.IO.Library.LibraryInfo.GetCountAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="P:Sudoku.IO.Library.LibraryInfo.LibraryFilePath">
            <summary>
            Indicates the path of the library file. The file only contains the puzzles.
            If you want to check for details of the configuration, use <see cref="P:Sudoku.IO.Library.LibraryInfo.ConfigFilePath"/> instead.
            </summary>
            <seealso cref="P:Sudoku.IO.Library.LibraryInfo.ConfigFilePath"/>
        </member>
        <member name="P:Sudoku.IO.Library.LibraryInfo.ConfigFilePath">
            <summary>
            Indicates the path of configuration file. The file contains the information of the library.
            </summary>
            <remarks>
            <para>
            Due to the design of the library APIs, a puzzle library contains two parts, separated with 2 files.
            One is the configuration file, and the other is the library details, only containing puzzles.
            </para>
            <para><i>
            Call this property will implicitly create config file if file is not found. No exception will be thrown here.
            </i></para>
            </remarks>
        </member>
        <member name="P:Sudoku.IO.Library.LibraryInfo.Author">
            <summary>
            Indicates the author of the library. Return <see langword="null"/> if no author configured.
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws when the library is not initialized.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Throws when the config file is missing.</exception>
        </member>
        <member name="P:Sudoku.IO.Library.LibraryInfo.Name">
            <summary>
            Indicates the name of the library.
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws when the library is not initialized.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Throws when the config file is missing.</exception>
        </member>
        <member name="P:Sudoku.IO.Library.LibraryInfo.Description">
            <summary>
            Indicates the description to the library.
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws when the library is not initialized.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Throws when the config file is missing.</exception>
        </member>
        <member name="P:Sudoku.IO.Library.LibraryInfo.Tags">
            <summary>
            Indicates the tags of the library.
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws when the library is not initialized.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Throws when the config file is missing.</exception>
        </member>
        <member name="P:Sudoku.IO.Library.LibraryInfo.LastModifiedTime">
            <summary>
            Indicates the last modified time of the library file.
            </summary>
        </member>
        <member name="P:Sudoku.IO.Library.LibraryInfo.ConfigFileExtension">
            <summary>
            Indicates the supported extension of config file. The extension will be used by API in runtime, recognizing config files.
            </summary>
        </member>
        <member name="P:Sudoku.IO.Library.LibraryInfo.Item(System.Int32)">
            <summary>
            Try to get the element at the specified index.
            </summary>
            <param name="index">The desired index.</param>
            <returns>The target <see cref="T:Sudoku.Concepts.Grid"/> instance at the specified index.</returns>
            <remarks>
            This property is run synchronously, calling <see cref="M:Sudoku.IO.Library.LibraryInfo.GetAtAsync(System.Int32,System.Threading.CancellationToken)"/>.
            <b>Always measure performance if you want to use this indexer.</b>
            </remarks>
            <seealso cref="M:Sudoku.IO.Library.LibraryInfo.GetAtAsync(System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.Deconstruct(System.String@,System.String@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax like <c>(a, b, c)</c> to define your own deconstruction logic.
				</summary>
			</target>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.Initialize">
            <summary>
            Initializes the library-related files if not found. If initialized, throw <see cref="T:Sudoku.IO.Library.LibraryInitializationException"/>.
            </summary>
            <exception cref="T:Sudoku.IO.Library.LibraryInitializationException">Throws when the library has already been initialized.</exception>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.Delete">
            <summary>
            Delete the current library, removing files from local path.
            </summary>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.ClearPuzzles">
            <summary>
            Clears the current library, removing all puzzles stored in this library, making the file empty,
            but reserving the files not deleted.
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws when the library isn't initialized.</exception>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.Equals(Sudoku.IO.Library.LibraryInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.Any">
            <summary>
            Determines whether the library contains at least one puzzle.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.AppendPuzzleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>
            Append a puzzle, represented as a <see cref="T:System.String"/> value,
            into the specified file path represented as a puzzle library.
            </para>
            <para>
            If the library is not initialized, it will be automatically initialized. No exceptions will be thrown on this case.
            </para>
            </summary>
            <param name="grid">The grid text code to be appended.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance that can be used in <see langword="await"/> expression.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the grid cannot be recognized.</exception>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.AppendPuzzleAsync(Sudoku.Concepts.Grid,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Sudoku.IO.Library.LibraryInfo.AppendPuzzleAsync(System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.AppendPuzzlesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            <para>
            Append a list of puzzles, represented as a list of <see cref="T:System.String"/> values,
            into the specified file path represented as a puzzle library.
            </para>
            <para>
            If the library is not initialized, it will be automatically initialized. No exceptions will be thrown on this case.
            </para>
            </summary>
            <param name="grids">A list of grid text code to be appended.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current asynchronous operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> of an <see cref="T:System.Int32"/> instance indicating how many text code are appended into the file.
            </returns>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.AppendPuzzlesAsync(System.Collections.Generic.IAsyncEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Sudoku.IO.Library.LibraryInfo.AppendPuzzlesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.AppendPuzzlesAsync(System.Collections.Generic.IEnumerable{Sudoku.Concepts.Grid},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Sudoku.IO.Library.LibraryInfo.AppendPuzzlesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.RemovePuzzleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes all puzzles that exactly same as the specified one from the file.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance that can be used in <see langword="await"/> expression.</returns>
            <exception cref="T:System.InvalidOperationException">Throw when the library file is not initialized.</exception>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.RemovePuzzleAsync(Sudoku.Concepts.Grid,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Sudoku.IO.Library.LibraryInfo.RemovePuzzleAsync(System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.RemoveDuplicatePuzzlesAsync(System.Threading.CancellationToken)">
            <summary>
            Removes a list of duplicate puzzles stored in the current library.
            </summary>
            <param name="cancellationToken">The cancellation token that can cancel the current asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance that can be used in <see langword="await"/> expression.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the puzzle should be initialized first.</exception>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.WriteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Write a puzzle into a file just created.</para>
            <para>
            If the library is not initialized, it will be automatically initialized. No exceptions will be thrown on this case.
            </para>
            </summary>
            <param name="grid">The grid to be written.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance that can be used in <see langword="await"/> expression.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the grid cannot be recognized.</exception>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.WriteAsync(Sudoku.Concepts.Grid,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Sudoku.IO.Library.LibraryInfo.WriteAsync(System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.GetCountAsync(System.Threading.CancellationToken)">
            <summary>
            Calculates how many puzzles in this file.
            </summary>
            <param name="cancellationToken">The cancellation token that can cancel the current asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> of an <see cref="T:System.Int32"/> value indicating the result.</returns>
            <remarks>
            <b><i>If you want to check whether the puzzle has at least one puzzle, please use method <see cref="M:Sudoku.IO.Library.LibraryInfo.Any"/> instead.</i></b>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Throws when the library file is not initialized.</exception>
            <seealso cref="M:Sudoku.IO.Library.LibraryInfo.Any"/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.GetAtAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Sudoku.Concepts.Grid"/> at the specified index.
            </summary>
            <param name="index">The desired index.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> of <see cref="T:Sudoku.Concepts.Grid"/> instance as the result.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the library file is not initialized.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Throws when the index is out of range.</exception>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.CreateTextPointer">
            <summary>
            Creates a <see cref="T:Sudoku.IO.Library.TextPointer"/> instance that uses <see cref="T:System.IO.FileStream"/> to read puzzles line by line.
            </summary>
            <returns>A <see cref="T:Sudoku.IO.Library.TextPointer"/> instance that reads for the current library.</returns>
            <remarks><b>
            This method returns an instance that implements <see cref="T:System.IAsyncDisposable"/> and <see cref="T:System.IDisposable"/>,
            meaning you must call <see cref="M:System.IAsyncDisposable.DisposeAsync"/> or <see cref="M:System.IDisposable.Dispose"/>
            after you finishing using the return value:
            <code><![CDATA[await using var pointer = library.CreateTextPointer();]]></code>
            </b></remarks>
            <seealso cref="T:Sudoku.IO.Library.TextPointer"/>
            <seealso cref="T:System.IDisposable"/>
            <seealso cref="T:System.IAsyncDisposable"/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.EnumerateTextAsync(System.Threading.CancellationToken)">
            <summary>
            Enumerates raw text codes stored in the library.
            </summary>
            <param name="cancellationToken">The cancellation token that can cancel the current asynchronous operation.</param>
            <returns>An async-iterable collection of <see cref="T:System.String"/> values as raw text codes.</returns>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.ConfigFileReplaceOrAppend(System.Func{System.String,System.Boolean},System.String,System.String)">
            <summary>
            Replace or append the value into the file, using the specified match method.
            </summary>
            <param name="match">The matcher method.</param>
            <param name="replaceOrAppendValue">The value to replace with original value, or appened.</param>
            <param name="callerPropertyName">
            Indicates the property name as caller. This parameter shouldn't be assigned. It will be assigned by compiler.
            </param>
            <exception cref="T:System.InvalidOperationException">Throws when multiple same properties found.</exception>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.RegisterConfigFileExtension(System.String)">
            <summary>
            Registers the config file extension. Argument should contain prefix period token '<c>.</c>'.
            </summary>
            <param name="extension">The extension of the config file. Period '<c>.</c>' required.</param>
            <remarks>
            <b>Please note that only one extension can work. If you call this method multiple times, only the last one will work.</b>
            </remarks>
            <exception cref="T:System.ArgumentException">Throws when the argument <paramref name="extension"/> is not valid.</exception>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.GetSingleLineGridString(Sudoku.Concepts.Grid@)">
            <summary>
            Returns <c>grid.ToString("#")</c>.
            </summary>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.AuthorPattern">
            <remarks>
            Pattern:<br/>
            <code>author:\\s*([\\s\\S]+)</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [Aa].<br/>
            ○ Match a character in the set [Uu].<br/>
            ○ Match a character in the set [Tt].<br/>
            ○ Match a character in the set [Hh].<br/>
            ○ Match a character in the set [Oo].<br/>
            ○ Match a character in the set [Rr].<br/>
            ○ Match ':'.<br/>
            ○ Match a whitespace character greedily any number of times.<br/>
            ○ 1st capture group.<br/>
                ○ Match any character atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.NamePattern">
            <remarks>
            Pattern:<br/>
            <code>name:\\s*([\\S\\s]+)</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [Nn].<br/>
            ○ Match a character in the set [Aa].<br/>
            ○ Match a character in the set [Mm].<br/>
            ○ Match a character in the set [Ee].<br/>
            ○ Match ':'.<br/>
            ○ Match a whitespace character greedily any number of times.<br/>
            ○ 1st capture group.<br/>
                ○ Match any character atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.DescriptionPattern">
            <remarks>
            Pattern:<br/>
            <code>description:\\s*([\\S\\s]+)</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [Dd].<br/>
            ○ Match a character in the set [Ee].<br/>
            ○ Match a character in the set [Ss].<br/>
            ○ Match a character in the set [Cc].<br/>
            ○ Match a character in the set [Rr].<br/>
            ○ Match a character in the set [Ii].<br/>
            ○ Match a character in the set [Pp].<br/>
            ○ Match a character in the set [Tt].<br/>
            ○ Match a character in the set [Ii].<br/>
            ○ Match a character in the set [Oo].<br/>
            ○ Match a character in the set [Nn].<br/>
            ○ Match ':'.<br/>
            ○ Match a whitespace character greedily any number of times.<br/>
            ○ 1st capture group.<br/>
                ○ Match any character atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.TagsPattern">
            <remarks>
            Pattern:<br/>
            <code>tags:\\s*([\\S\\s]+)</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [Tt].<br/>
            ○ Match a character in the set [Aa].<br/>
            ○ Match a character in the set [Gg].<br/>
            ○ Match a character in the set [Ss].<br/>
            ○ Match ':'.<br/>
            ○ Match a whitespace character greedily any number of times.<br/>
            ○ 1st capture group.<br/>
                ○ Match any character atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="F:Sudoku.IO.Library.LibraryInfo._directory">
            <summary>
            The generated field declaration for parameter <c>directory</c>.
            </summary>
        </member>
        <member name="P:Sudoku.IO.Library.LibraryInfo.FileId">
            <summary>
            The generated property declaration for parameter <c>fileId</c>.
            </summary>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.op_Equality(Sudoku.IO.Library.LibraryInfo,Sudoku.IO.Library.LibraryInfo)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInfo.op_Inequality(Sudoku.IO.Library.LibraryInfo,Sudoku.IO.Library.LibraryInfo)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="T:Sudoku.IO.Library.LibraryInitializationException">
            <summary>
            Represents an exception type that will be thrown if a library instance has already been initialized, but a user still calls
            method <see cref="M:Sudoku.IO.Library.LibraryInfo.Initialize"/>.
            </summary>
            <param name="directory"><inheritdoc cref="M:Sudoku.IO.Library.LibraryInfo.#ctor(System.String,System.String)" path="/param[@name='directory']"/></param>
            <param name="fileId"><inheritdoc cref="M:Sudoku.IO.Library.LibraryInfo.#ctor(System.String,System.String)" path="/param[@name='fileId']"/></param>
            <remarks><i>
            This type is only used by Windows platform because the relied type <see cref="T:Sudoku.IO.Library.LibraryInfo"/>
            is marked <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute"/>, limited in Windows.
            </i></remarks>
            <seealso cref="M:Sudoku.IO.Library.LibraryInfo.Initialize"/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInitializationException.#ctor(System.String,System.String)">
            <summary>
            Represents an exception type that will be thrown if a library instance has already been initialized, but a user still calls
            method <see cref="M:Sudoku.IO.Library.LibraryInfo.Initialize"/>.
            </summary>
            <param name="directory"><inheritdoc cref="M:Sudoku.IO.Library.LibraryInfo.#ctor(System.String,System.String)" path="/param[@name='directory']"/></param>
            <param name="fileId"><inheritdoc cref="M:Sudoku.IO.Library.LibraryInfo.#ctor(System.String,System.String)" path="/param[@name='fileId']"/></param>
            <remarks><i>
            This type is only used by Windows platform because the relied type <see cref="T:Sudoku.IO.Library.LibraryInfo"/>
            is marked <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute"/>, limited in Windows.
            </i></remarks>
            <seealso cref="M:Sudoku.IO.Library.LibraryInfo.Initialize"/>
        </member>
        <member name="M:Sudoku.IO.Library.LibraryInitializationException.#ctor(Sudoku.IO.Library.LibraryInfo)">
            <summary>
            Initializes a <see cref="T:Sudoku.IO.Library.LibraryInitializationException"/> instance via the specified directory and file ID.
            </summary>
            <param name="library">The library instance.</param>
        </member>
        <member name="P:Sudoku.IO.Library.LibraryInitializationException.Message">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.IO.Library.TextPointer">
            <summary>
            Represents a text pointer object that reads the detail of a <see cref="T:Sudoku.IO.Library.LibraryInfo"/>.
            </summary>
            <remarks><i>
            This type only supports for Windows now because the relied type <see cref="T:Sudoku.IO.Library.LibraryInfo"/> is limited in Windows.
            </i></remarks>
            <seealso cref="T:Sudoku.IO.Library.LibraryInfo"/>
        </member>
        <member name="F:Sudoku.IO.Library.TextPointer.MaxLimitOfPuzzleLength">
            <summary>
            Indicates the max limit of a puzzle length.
            </summary>
        </member>
        <member name="F:Sudoku.IO.Library.TextPointer._stream">
            <summary>
            Indicates the internal stream.
            </summary>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.#ctor(Sudoku.IO.Library.LibraryInfo)">
            <summary>
            Initializes a <see cref="T:Sudoku.IO.Library.TextPointer"/> instance via the specified library.
            </summary>
            <param name="library">Indicates the libary object.</param>
            <exception cref="T:System.ArgumentException">Throws when the library is not initialized.</exception>
        </member>
        <member name="P:Sudoku.IO.Library.TextPointer.ForwardPuzzlesCount">
            <summary>
            Indicates the number of puzzles left to be iterated from the current position. The current puzzle will be included.
            </summary>
        </member>
        <member name="P:Sudoku.IO.Library.TextPointer.BackPuzzlesCount">
            <summary>
            Indicates the number of puzzles left to be iterated back from the current position. The current puzzle will be included.
            </summary>
        </member>
        <member name="P:Sudoku.IO.Library.TextPointer.Current">
            <summary>
            Indicates the currently-pointed puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.IO.Library.TextPointer.Length">
            <summary>
            Indicates the number of puzzles stored in the file, regardless of the position of the pointer.
            </summary>
            <remarks><inheritdoc cref="P:Sudoku.IO.Library.LibraryInfo.Count" path="/remarks"/></remarks>
            <seealso cref="M:Sudoku.IO.Library.LibraryInfo.GetCountAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="P:Sudoku.IO.Library.TextPointer.Library">
            <summary>
            Indicates the library object.
            </summary>
        </member>
        <member name="P:Sudoku.IO.Library.TextPointer.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.IO.Library.TextPointer.System#Collections#Generic#IReadOnlyCollection{System#String}#Count">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.IO.Library.TextPointer.PositionOfPointer">
            <summary>
            Indicates the position of the pointer.
            </summary>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.SetStart">
            <summary>
            Sets the pointer to the start position, 0.
            </summary>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.SetEnd">
            <summary>
            Sets the pointer to the end position, the length of the stream.
            </summary>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.Equals(Sudoku.IO.Library.TextPointer)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.TryReadNextPuzzle(System.String@)">
            <summary>
            Try to read the next puzzle beginning with the current text pointer position.
            </summary>
            <param name="result">The result of the grid, represented as a <see cref="T:System.String"/> result.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating whether the file exists the next grid.</returns>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.TryReadPreviousPuzzle(System.String@)">
            <summary>
            Try to read the previous puzzle beginning with the current text pointer position.
            </summary>
            <param name="result">The result of the grid, represented as a <see cref="T:System.String"/> result.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating whether the file exists the previous grid.</returns>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.TrySkipNext(System.Int32)">
            <summary>
            Try to skip the number of puzzles forward, making the pointer point to the next grid after the skipped grids.
            </summary>
            <param name="count">The desired number of puzzles to be skipped. The default value is 1.</param>
            <returns>The number of puzzles skipped in fact.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when the argument <paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.TrySkipPrevious(System.Int32)">
            <summary>
            Try to skip the number of puzzles back, making the pointer point to the next grid before the skipped grids.
            </summary>
            <param name="count">The desired number of puzzles to be skipped. The default value is 1.</param>
            <returns>The number of puzzles skipped in fact.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when the argument <paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.TryFetchNext(System.Int32,System.ReadOnlySpan{System.String}@)">
            <summary>
            Fetch the number of puzzles beginning with the current pointer position.
            </summary>
            <param name="count">The desired number of puzzles.</param>
            <param name="result">Indicates the puzzles fetched.</param>
            <returns>The number of puzzles fetched.</returns>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.TryFetchPrevious(System.Int32,System.ReadOnlySpan{System.String}@)">
            <summary>
            Fetch the number of puzzles in previous beginning with the current pointer position.
            </summary>
            <param name="count">The desired number of puzzles.</param>
            <param name="result">Indicates the puzzles fetched.</param>
            <returns>The number of puzzles fetched.</returns>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.GetEnumerator">
            <summary>
            Returns itself. The method is consumed by <see langword="foreach"/> loops.
            </summary>
            <returns>A <see cref="T:Sudoku.IO.Library.TextPointer"/> instance that can iterate on each puzzle stored in library file.</returns>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.System#Collections#IEnumerator#Reset">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.System#Collections#IEnumerator#MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.System#Collections#Generic#IEnumerable{System#String}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.op_Increment(Sudoku.IO.Library.TextPointer)">
            <summary>
            Moves the pointer to the next puzzle. If the pointer is at the end of the sequence, moves to the first element.
            </summary>
            <param name="value">The instance to be moved.</param>
            <returns>A reference that is same as argument <paramref name="value"/>.</returns>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.op_CheckedIncrement(Sudoku.IO.Library.TextPointer)">
            <summary>
            Moves the pointer to the next puzzle. If the pointer is at the end of the sequence,
            throw <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="value">The instance to be moved.</param>
            <returns>A reference that is same as argument <paramref name="value"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the pointer cannot be moved.</exception>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.op_Decrement(Sudoku.IO.Library.TextPointer)">
            <summary>
            Moves the pointer to the previous puzzle. If the pointer is at the start of the sequence, moves to the last element.
            </summary>
            <param name="value">The instance to be moved.</param>
            <returns>A reference that is same as argument <paramref name="value"/>.</returns>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.op_CheckedDecrement(Sudoku.IO.Library.TextPointer)">
            <summary>
            Moves the pointer to the previous puzzle. If the pointer is at the start of the sequence, throw <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="value">The instance to be moved.</param>
            <returns>A reference that is same as argument <paramref name="value"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the pointer cannot be moved.</exception>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.op_Addition(Sudoku.IO.Library.TextPointer,System.Int32)">
            <summary>
            Skips the specified number of puzzles forward.
            </summary>
            <param name="value">The value to be used.</param>
            <param name="count">The number of puzzles to be skipped.</param>
            <returns>A reference that is same as argument <paramref name="value"/>.</returns>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.op_CheckedAddition(Sudoku.IO.Library.TextPointer,System.Int32)">
            <summary>
            Skips the specified number of puzzles forward. If the pointer has already moved to the last element,
            throw <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="value">The value to be used.</param>
            <param name="count">The number of puzzles to be skipped.</param>
            <returns>A reference that is same as argument <paramref name="value"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when no elements can be skipped.</exception>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.op_Subtraction(Sudoku.IO.Library.TextPointer,System.Int32)">
            <summary>
            Skips the specified number of puzzles back.
            </summary>
            <param name="value">The value to be used.</param>
            <param name="count">The number of puzzles to be skipped.</param>
            <returns>A reference that is same as argument <paramref name="value"/>.</returns>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.op_CheckedSubtraction(Sudoku.IO.Library.TextPointer,System.Int32)">
            <summary>
            Skips the specified number of puzzles back. If the pointer has already moved to the first element,
            throw <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="value">The value to be used.</param>
            <param name="count">The number of puzzles to be skipped.</param>
            <returns>A reference that is same as argument <paramref name="value"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when no elements can be skipped.</exception>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.op_Equality(Sudoku.IO.Library.TextPointer,Sudoku.IO.Library.TextPointer)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Sudoku.IO.Library.TextPointer.op_Inequality(Sudoku.IO.Library.TextPointer,Sudoku.IO.Library.TextPointer)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AuthorPattern_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AuthorPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AuthorPattern_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AuthorPattern_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AuthorPattern_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AuthorPattern_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AuthorPattern_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AuthorPattern_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AuthorPattern_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AuthorPattern_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NamePattern_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NamePattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NamePattern_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NamePattern_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NamePattern_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NamePattern_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NamePattern_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NamePattern_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NamePattern_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NamePattern_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DescriptionPattern_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DescriptionPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DescriptionPattern_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DescriptionPattern_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DescriptionPattern_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DescriptionPattern_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DescriptionPattern_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DescriptionPattern_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DescriptionPattern_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DescriptionPattern_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TagsPattern_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the TagsPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.TagsPattern_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TagsPattern_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TagsPattern_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TagsPattern_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TagsPattern_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TagsPattern_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TagsPattern_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TagsPattern_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_617574686F723A5F4F7264696E616C49676E6F726543617365">
            <summary>Supports searching for the string "author:".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_6465736372697074696F6E3A5F4F7264696E616C49676E6F726543617365">
            <summary>Supports searching for the string "description:".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_6E616D653A5F4F7264696E616C49676E6F726543617365">
            <summary>Supports searching for the string "name:".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_746167733A5F4F7264696E616C49676E6F726543617365">
            <summary>Supports searching for the string "tags:".</summary>
        </member>
    </members>
</doc>
