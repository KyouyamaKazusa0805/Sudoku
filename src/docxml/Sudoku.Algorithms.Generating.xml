<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Algorithms.Generating</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Generating.FilteredGeneratorProgress">
            <summary>
            Represents a progress data type that is nearly same as <see cref="T:Sudoku.Generating.GeneratorProgress"/>, but with filtered data.
            </summary>
            <param name="Count">The number of checked puzzles.</param>
            <param name="Succeeded">The number of succeeded puzzles.</param>
            <seealso cref="T:Sudoku.Generating.GeneratorProgress"/>
        </member>
        <member name="M:Sudoku.Generating.FilteredGeneratorProgress.#ctor(System.Int32,System.Int32)">
            <summary>
            Represents a progress data type that is nearly same as <see cref="T:Sudoku.Generating.GeneratorProgress"/>, but with filtered data.
            </summary>
            <param name="Count">The number of checked puzzles.</param>
            <param name="Succeeded">The number of succeeded puzzles.</param>
            <seealso cref="T:Sudoku.Generating.GeneratorProgress"/>
        </member>
        <member name="P:Sudoku.Generating.FilteredGeneratorProgress.Count">
            <summary>The number of checked puzzles.</summary>
        </member>
        <member name="P:Sudoku.Generating.FilteredGeneratorProgress.Succeeded">
            <summary>The number of succeeded puzzles.</summary>
        </member>
        <member name="P:Sudoku.Generating.FilteredGeneratorProgress.Percentage">
            <summary>
            Indicates the percentage.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.FilteredGeneratorProgress.Sudoku#Generating#IProgressDataProvider{Sudoku#Generating#FilteredGeneratorProgress}#ToDisplayString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.FilteredGeneratorProgress.Sudoku#Generating#IProgressDataProvider{Sudoku#Generating#FilteredGeneratorProgress}#Create(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Generating.FullPuzzle">
            <summary>
            Represents a full puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.FullPuzzle.Solution">
            <summary>
            Indicates the solution to the puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.FullPuzzle.Equals(Sudoku.Generating.PuzzleBase)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.FullPuzzle.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Sudoku.Generating.FullPuzzleFailed">
            <summary>
            Provides failed for generating full puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.FullPuzzleFailed.#ctor(Sudoku.Generating.GeneratingFailedReason)">
            <summary>
            Initializes a <see cref="T:Sudoku.Generating.FullPuzzleFailed"/> instance.
            </summary>
        </member>
        <member name="T:Sudoku.Generating.FullPuzzleSuccessful">
            <summary>
            Provides successful for generating full puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.FullPuzzleSuccessful.#ctor(Sudoku.Concepts.Grid@)">
            <summary>
            Initializes a <see cref="T:Sudoku.Generating.FullPuzzleSuccessful"/> instance.
            </summary>
        </member>
        <member name="T:Sudoku.Generating.GeneratingFailedReason">
            <summary>
            Represents a result that describes why the generation failed.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.GeneratingFailedReason.None">
            <summary>
            Indicates the generation is success without any error.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.GeneratingFailedReason.NotSupported">
            <summary>
            Indicates the generation not supported.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.GeneratingFailedReason.InvalidData">
            <summary>
            Indicates the argument or member hold invalid data.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.GeneratingFailedReason.Canceled">
            <summary>
            Indicates a user canceled the task.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.GeneratingFailedReason.Unnecessary">
            <summary>
            Indicates the generation operation is unncessary; nearly all puzzles contain such feature.
            </summary>
        </member>
        <member name="T:Sudoku.Generating.Generator">
            <summary>
            Represents a puzzle generator, implemented by HoDoKu.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.Generator.AutoClues">
            <summary>
            Indicates the auto clues count.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.Generator._generateIndices">
            <summary>
            The order in which cells are set when generating a full grid.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.Generator._rng">
            <summary>
            A random generator for creating new puzzles.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.Generator._solver">
            <summary>
            Indicates the internal fast solver.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.Generator._stack">
            <summary>
            The recursion stack.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.Generator._newFullSudoku">
            <summary>
            The final grid to be used.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.Generator._newValidSudoku">
            <summary>
            The final grid to be used.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.Generator.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Sudoku.Generating.Generator" />.
            </summary>
            <remarks>
            <target name="constructor">
				<i>
					The feature "Custom parameterless struct constructor" makes the parameterless struct constructor
					different with <c>default(T)</c>. If you has defined a parameterless struct constructor,
					<c>new T()</c> is no longer with the same meaning as <c>default(T)</c>.
				</i>
			</target>
            </remarks>
        </member>
        <member name="M:Sudoku.Generating.Generator.Generate(System.Int32,Sudoku.SymmetricType,System.Threading.CancellationToken)">
            <summary>
            Try to generate a puzzle.
            </summary>
            <param name="cluesCount">
            <para>Indicates the number of clues the generator supports for <b>approximately</b>.</para>
            <para>
            Please note that the target puzzle may not contain the same number of givens as this value.
            If the number of givens from a puzzle is below this value but it also has a unique solution,
            this puzzle will be still treated as valid one.
            </para>
            </param>
            <param name="symmetricType">The symmetric type to be specified. The value is <see cref="F:Sudoku.SymmetricType.Central"/> by default.</param>
            <param name="cancellationToken">The cancellation token that can cancel the operation.</param>
            <returns>The result grid.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the argument <paramref name="symmetricType"/> holds multiple flags,
            or the argument <paramref name="cluesCount"/> is invalid.
            </exception>
        </member>
        <member name="M:Sudoku.Generating.Generator.GenerateInitPos(System.Int32,Sudoku.SymmetricType,System.Threading.CancellationToken)">
            <summary>
            Takes a full sudoku from <see cref="F:Sudoku.Generating.Generator._newFullSudoku"/> and generates a valid puzzle by deleting cells.
            If a deletion produces a grid with more than one solution it is of course undone.
            </summary>
            <inheritdoc cref="M:Sudoku.Generating.Generator.Generate(System.Int32,Sudoku.SymmetricType,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Sudoku.Generating.Generator.GenerateForFullGrid">
            <summary>
            Generate a solution grid.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value indicating whether the generation operation is succeeded.</returns>
        </member>
        <member name="M:Sudoku.Generating.Generator.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Generating.Generator.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Generating.Generator.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Generating.GeneratorProgress">
            <summary>
            Represents a progress used by <see cref="M:Sudoku.Generating.IGenerator`1.Generate(System.IProgress{Sudoku.Generating.GeneratorProgress},System.Threading.CancellationToken)"/>.
            </summary>
            <param name="Count">The number of puzzles generated currently.</param>
            <seealso cref="M:Sudoku.Generating.IGenerator`1.Generate(System.IProgress{Sudoku.Generating.GeneratorProgress},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Sudoku.Generating.GeneratorProgress.#ctor(System.Int32)">
            <summary>
            Represents a progress used by <see cref="M:Sudoku.Generating.IGenerator`1.Generate(System.IProgress{Sudoku.Generating.GeneratorProgress},System.Threading.CancellationToken)"/>.
            </summary>
            <param name="Count">The number of puzzles generated currently.</param>
            <seealso cref="M:Sudoku.Generating.IGenerator`1.Generate(System.IProgress{Sudoku.Generating.GeneratorProgress},System.Threading.CancellationToken)"/>
        </member>
        <member name="P:Sudoku.Generating.GeneratorProgress.Count">
            <summary>The number of puzzles generated currently.</summary>
        </member>
        <member name="M:Sudoku.Generating.GeneratorProgress.Sudoku#Generating#IProgressDataProvider{Sudoku#Generating#GeneratorProgress}#ToDisplayString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.GeneratorProgress.Sudoku#Generating#IProgressDataProvider{Sudoku#Generating#GeneratorProgress}#Create(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Generating.GeneratorRecursionStackEntry">
            <summary>
            One entry in recursion stack.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.GeneratorRecursionStackEntry.Candidates">
            <summary>
            The candidates for cells <see cref="F:Sudoku.Generating.GeneratorRecursionStackEntry.Cell"/>.
            </summary>
            <seealso cref="F:Sudoku.Generating.GeneratorRecursionStackEntry.Cell"/>
        </member>
        <member name="F:Sudoku.Generating.GeneratorRecursionStackEntry.Cell">
            <summary>
            The index of the cell that's being tried.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.GeneratorRecursionStackEntry.CandidateIndex">
            <summary>
            The index of the last tried candidate in <see cref="F:Sudoku.Generating.GeneratorRecursionStackEntry.Candidates"/>.
            </summary>
            <seealso cref="F:Sudoku.Generating.GeneratorRecursionStackEntry.Candidates"/>
        </member>
        <member name="F:Sudoku.Generating.GeneratorRecursionStackEntry.SudokuGrid">
            <summary>
            The current state of the sudoku.
            </summary>
        </member>
        <member name="T:Sudoku.Generating.HardPatternPuzzleGenerator">
            <summary>
            Defines a puzzle generator that makes the given pattern as a hard one.
            A <b>hard pattern</b> doesn't mean the puzzle will be hard or fiendish.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.HardPatternPuzzleGenerator.BlockFactor">
            <summary>
            Indicates the block factor.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.HardPatternPuzzleGenerator.SwappingFactor">
            <summary>
            Indicates the swapping factor.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.HardPatternPuzzleGenerator._randomShared">
            <summary>
            Indicates the shared <see cref="T:System.Random"/> instance.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.HardPatternPuzzleGenerator._solver">
            <summary>
            Indicates the inner solver that can fast solve a sudoku puzzle, to check the validity
            of a puzzle being generated.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.HardPatternPuzzleGenerator.Rng">
            <summary>
            Indicates the backing random.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.Generate(System.IProgress{Sudoku.Generating.GeneratorProgress},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.GenerateAnswerGrid(System.Span{System.Char},System.Span{System.Char})">
            <summary>
            Generates the answer sudoku grid via the specified puzzle and the solution variable pointer.
            </summary>
            <param name="puzzleString">The pointer that points to the puzzle.</param>
            <param name="solutionString">
            The pointer that points to the solution. The result value will be changed here.
            </param>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.CreatePattern(System.Span{System.Int32})">
            <summary>
            Creates a start pattern based on a base pattern.
            </summary>
            <param name="pattern">The base pattern.</param>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.RecreatePattern(System.Span{System.Int32})">
            <summary>
            To re-create the pattern.
            </summary>
            <param name="pattern">The pointer that points to an array of the pattern values.</param>
        </member>
        <member name="M:Sudoku.Generating.HardPatternPuzzleGenerator.CheckDuplicate(System.Span{System.Char},System.Int32)">
            <summary>
            Check whether the digit in its peer cells has duplicate ones.
            </summary>
            <param name="gridString">The pointer that points to a grid.</param>
            <param name="cell">The cell.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Generating.IGenerator`1">
            <summary>
            Represents a generator type that produces a complex data type <typeparamref name="TResult"/>,
            encapsulating the details of the result.
            </summary>
            <typeparam name="TResult">
            The type of the result. This type must be either <see cref="T:Sudoku.Concepts.Grid"/> or <see cref="T:Sudoku.Generating.PuzzleBase"/>.
            </typeparam>
            <seealso cref="T:Sudoku.Concepts.Grid"/>
            <seealso cref="T:Sudoku.Generating.PuzzleBase"/>
        </member>
        <member name="M:Sudoku.Generating.IGenerator`1.Generate(System.IProgress{Sudoku.Generating.GeneratorProgress},System.Threading.CancellationToken)">
            <summary>
            Generates a puzzle and return an instance of type <typeparamref name="TResult"/> indicating the result.
            </summary>
            <param name="progress">An <see cref="T:System.IProgress`1"/> instance that is used for reporting the state.</param>
            <param name="cancellationToken">The cancellation token that can cancel the operation.</param>
            <returns>The result returned.</returns>
        </member>
        <member name="T:Sudoku.Generating.IProgressDataProvider`1">
            <summary>
            Indicates the data provider type,
            </summary>
            <typeparam name="TSelf">The type of the implementation data provider.</typeparam>
        </member>
        <member name="P:Sudoku.Generating.IProgressDataProvider`1.Count">
            <summary>
            Indicates the number of puzzles having been generated.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.IProgressDataProvider`1.ToDisplayString">
            <summary>
            Try to fetch display string for the current instance.
            </summary>
            <returns>The display string.</returns>
        </member>
        <member name="M:Sudoku.Generating.IProgressDataProvider`1.Create(System.Int32,System.Int32)">
            <summary>
            Try to create a <typeparamref name="TSelf"/> instance.
            </summary>
            <param name="count">The number of puzzles generated.</param>
            <param name="succeeded">The number of puzzles has passed the checking.</param>
            <returns>A <typeparamref name="TSelf"/> instance.</returns>
        </member>
        <member name="T:Sudoku.Generating.JustOneCell.ConlusionCellAlignment">
            <summary>
            Represents a rule that describes for the just-one-cell puzzles only produce conclusions in row 5, column 5 and block 5.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.JustOneCell.ConlusionCellAlignment.NotLimited">
            <summary>
            Indicates conclusion cell can be everywhere.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.JustOneCell.ConlusionCellAlignment.CenterHouse">
            <summary>
            Indicates conclusion cell can only be inside row 5, column 5 and block 5.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.JustOneCell.ConlusionCellAlignment.CenterBlock">
            <summary>
            Indicates conclusion cell can only be inside block 5.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.JustOneCell.ConlusionCellAlignment.CenterCell">
            <summary>
            Indicates the conclusion cell must be <c>r5c5</c>.
            </summary>
        </member>
        <member name="T:Sudoku.Generating.JustOneCell.JustOneCellPuzzle">
            <summary>
            Represents the answer to a just-one-cell sudoku puzzle.
            </summary>
            <param name="cell">Indicates the target cell.</param>
            <param name="digit">Indicates the target digit.</param>
            <param name="step">
            <para>Indiactes the step for the pattern.</para>
            <para>
            Assign a not-<see langword="null"/> value to this parameter
            if argument <see cref="P:Sudoku.Generating.PuzzleBase.FailedReason"/> is <see cref="F:Sudoku.Generating.GeneratingFailedReason.None"/>.
            Set the arguments of constructor <see cref="M:Sudoku.Analytics.Step.#ctor(Sudoku.Concepts.Conclusion[],Sudoku.Drawing.View[],Sudoku.Analytics.Configuration.StepSearcherOptions)"/>
            to be <c>[]</c>, <c>[]</c> and <c><see langword="new"/>()</c> respectively,
            in order to avoid the potential bug on displaying details.
            </para>
            </param>
            <param name="interferingCells">Indicates the interfering digits.</param>
            <param name="interferingRatio">Indicates the interfering ratio.</param>
        </member>
        <member name="M:Sudoku.Generating.JustOneCell.JustOneCellPuzzle.#ctor(System.Int32,System.Int32,Sudoku.Analytics.Step,Sudoku.Concepts.CellMap@,System.Double)">
            <summary>
            Represents the answer to a just-one-cell sudoku puzzle.
            </summary>
            <param name="cell">Indicates the target cell.</param>
            <param name="digit">Indicates the target digit.</param>
            <param name="step">
            <para>Indiactes the step for the pattern.</para>
            <para>
            Assign a not-<see langword="null"/> value to this parameter
            if argument <see cref="P:Sudoku.Generating.PuzzleBase.FailedReason"/> is <see cref="F:Sudoku.Generating.GeneratingFailedReason.None"/>.
            Set the arguments of constructor <see cref="M:Sudoku.Analytics.Step.#ctor(Sudoku.Concepts.Conclusion[],Sudoku.Drawing.View[],Sudoku.Analytics.Configuration.StepSearcherOptions)"/>
            to be <c>[]</c>, <c>[]</c> and <c><see langword="new"/>()</c> respectively,
            in order to avoid the potential bug on displaying details.
            </para>
            </param>
            <param name="interferingCells">Indicates the interfering digits.</param>
            <param name="interferingRatio">Indicates the interfering ratio.</param>
        </member>
        <member name="P:Sudoku.Generating.JustOneCell.JustOneCellPuzzle.Success">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.JustOneCell.JustOneCellPuzzle.Equals(Sudoku.Generating.PuzzleBase)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Generating.JustOneCell.JustOneCellPuzzle.Cell">
            <summary>
            The generated property declaration for parameter <c>cell</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.JustOneCell.JustOneCellPuzzle.Digit">
            <summary>
            The generated property declaration for parameter <c>digit</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.JustOneCell.JustOneCellPuzzle.Step">
            <summary>
            The generated property declaration for parameter <c>step</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.JustOneCell.JustOneCellPuzzle.InterferingCells">
            <summary>
            The generated property declaration for parameter <c>interferingCells</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.JustOneCell.JustOneCellPuzzle.InterferingRatio">
            <summary>
            The generated property declaration for parameter <c>interferingRatio</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.JustOneCell.JustOneCellPuzzle.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Sudoku.Generating.JustOneCell.JustOneCellPuzzleFailed">
            <summary>
            Provides failed for generating just-one-cell puzzles.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.JustOneCell.JustOneCellPuzzleFailed.#ctor(Sudoku.Generating.GeneratingFailedReason)">
            <summary>
            Initializes a <see cref="T:Sudoku.Generating.JustOneCell.JustOneCellPuzzleFailed"/> instance.
            </summary>
            <param name="reason">The failed reason.</param>
        </member>
        <member name="T:Sudoku.Generating.JustOneCell.JustOneCellPuzzleSuccessful">
            <summary>
            Provides with successful generating for just-one-cell puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.JustOneCell.JustOneCellPuzzleSuccessful.#ctor(Sudoku.Concepts.Grid@,System.Int32,System.Int32,Sudoku.Analytics.Step,Sudoku.Concepts.CellMap@,System.Double)">
            <summary>
            Initializes a <see cref="T:Sudoku.Generating.JustOneCell.JustOneCellPuzzleSuccessful"/> instance.
            </summary>
        </member>
        <member name="T:Sudoku.Generating.JustOneCell.PhasedJustOneCellPuzzle">
            <summary>
            Represents a just-one-cell puzzle, but contains the base puzzle that has a unique solution.
            </summary>
            <param name="cell"><inheritdoc/></param>
            <param name="digit"><inheritdoc/></param>
            <param name="step"><inheritdoc/></param>
            <param name="baseGrid">Indicates the base grid.</param>
            <param name="interferingCells"><inheritdoc/></param>
            <param name="interferingRatio"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Generating.JustOneCell.PhasedJustOneCellPuzzle.#ctor(System.Int32,System.Int32,Sudoku.Analytics.Step,Sudoku.Concepts.Grid@,Sudoku.Concepts.CellMap@,System.Double)">
            <summary>
            Represents a just-one-cell puzzle, but contains the base puzzle that has a unique solution.
            </summary>
            <param name="cell"><inheritdoc/></param>
            <param name="digit"><inheritdoc/></param>
            <param name="step"><inheritdoc/></param>
            <param name="baseGrid">Indicates the base grid.</param>
            <param name="interferingCells"><inheritdoc/></param>
            <param name="interferingRatio"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Generating.JustOneCell.PhasedJustOneCellPuzzle.Equals(Sudoku.Generating.PuzzleBase)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Generating.JustOneCell.PhasedJustOneCellPuzzle.BaseGrid">
            <summary>
            The generated property declaration for parameter <c>baseGrid</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.JustOneCell.PhasedJustOneCellPuzzle.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Sudoku.Generating.JustOneCell.PhasedJustOneCellPuzzleFailed">
            <summary>
            Provides failed message for <see cref="T:Sudoku.Generating.JustOneCell.PhasedJustOneCellPuzzle"/>.
            </summary>
            <seealso cref="T:Sudoku.Generating.JustOneCell.PhasedJustOneCellPuzzle"/>
        </member>
        <member name="M:Sudoku.Generating.JustOneCell.PhasedJustOneCellPuzzleFailed.#ctor(Sudoku.Generating.GeneratingFailedReason)">
            <summary>
            Initializes a <see cref="T:Sudoku.Generating.JustOneCell.JustOneCellPuzzleFailed"/> instance.
            </summary>
            <param name="reason">The failed reason.</param>
        </member>
        <member name="T:Sudoku.Generating.JustOneCell.PhasedJustOneCellPuzzleSuccessful">
            <summary>
            Provides successful message for <see cref="T:Sudoku.Generating.JustOneCell.PhasedJustOneCellPuzzle"/>.
            </summary>
            <seealso cref="T:Sudoku.Generating.JustOneCell.PhasedJustOneCellPuzzle"/>
        </member>
        <member name="M:Sudoku.Generating.JustOneCell.PhasedJustOneCellPuzzleSuccessful.#ctor(Sudoku.Concepts.Grid@,Sudoku.Concepts.Grid@,System.Int32,System.Int32,Sudoku.Analytics.Step,Sudoku.Concepts.CellMap@,System.Double)">
            <summary>
            Initializes a <see cref="T:Sudoku.Generating.JustOneCell.JustOneCellPuzzleSuccessful"/> instance.
            </summary>
        </member>
        <member name="T:Sudoku.Generating.PatternBasedPuzzleGenerator">
            <summary>
            Represents a generator that is based on pattern.
            </summary>
            <param name="missingDigit">Indicates the missing digit that can be used.</param>
            <param name="seedPattern">Indicates the predefind pattern used.</param>
        </member>
        <member name="M:Sudoku.Generating.PatternBasedPuzzleGenerator.#ctor(Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Represents a generator that is based on pattern.
            </summary>
            <param name="missingDigit">Indicates the missing digit that can be used.</param>
            <param name="seedPattern">Indicates the predefind pattern used.</param>
        </member>
        <member name="M:Sudoku.Generating.PatternBasedPuzzleGenerator.Generate(System.IProgress{Sudoku.Generating.GeneratorProgress},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Sudoku.Generating.IGenerator`1.Generate(System.IProgress{Sudoku.Generating.GeneratorProgress},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Sudoku.Generating.PatternBasedPuzzleGenerator.GenerateCore(System.Int32[],Sudoku.Concepts.Grid@,Sudoku.Concepts.Grid@,System.Int32,System.Int32@,System.IProgress{Sudoku.Generating.GeneratorProgress},System.Threading.CancellationToken)">
            <summary>
            The back method to generate a valid sudoku grid puzzle.
            </summary>
            <param name="patternCellsSorted">The cells ordered by the number of related cells.</param>
            <param name="playground">The playground to be operated with.</param>
            <param name="resultGrid">The result grid to be returned.</param>
            <param name="i">The index that the current searching is on.</param>
            <param name="count">The number of puzzles generated.</param>
            <param name="progress">The progress instance.</param>
            <param name="cancellationToken">The cancellation token that can cancel the operation.</param>
        </member>
        <member name="M:Sudoku.Generating.PatternBasedPuzzleGenerator.OrderCellsViaConnectionComplexity">
            <summary>
            Order the pattern cells via connection complexity.
            </summary>
            <returns>The cells ordered.</returns>
        </member>
        <member name="F:Sudoku.Generating.PatternBasedPuzzleGenerator._seedPattern">
            <summary>
            The generated field declaration for parameter <c>seedPattern</c>.
            </summary>
        </member>
        <member name="T:Sudoku.Generating.PuzzleBase">
            <summary>
            Represents a base type for puzzle generated, need creating a data structure to store the details for the generated puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.PuzzleBase.Success">
            <summary>
            Indicates whether the data represents "success" message and values are valid in use.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.PuzzleBase.FailedReason">
            <summary>
            Indicates the failed reason why causes the failure.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.PuzzleBase.Puzzle">
            <summary>
            Indicates the puzzle just created. If the value <see cref="P:Sudoku.Generating.PuzzleBase.FailedReason"/> returns a value
            not <see cref="F:Sudoku.Generating.GeneratingFailedReason.None"/>, the value will always be <see cref="F:Sudoku.Concepts.Grid.Undefined"/>.
            </summary>
            <seealso cref="P:Sudoku.Generating.PuzzleBase.FailedReason"/>
            <seealso cref="F:Sudoku.Generating.GeneratingFailedReason.None"/>
            <seealso cref="F:Sudoku.Concepts.Grid.Undefined"/>
        </member>
        <member name="M:Sudoku.Generating.PuzzleBase.Equals(Sudoku.Generating.PuzzleBase)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.PuzzleBase.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.PuzzleBase.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Generating.PuzzleBase.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Generating.PuzzleBase.op_Equality(Sudoku.Generating.PuzzleBase,Sudoku.Generating.PuzzleBase)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Sudoku.Generating.PuzzleBase.op_Inequality(Sudoku.Generating.PuzzleBase,Sudoku.Generating.PuzzleBase)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="T:Sudoku.Generating.TechniqueBased.FullHousePuzzleGenerator">
            <summary>
            Represents a type that generates puzzles that only contains full house usages.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.TechniqueBased.FullHousePuzzleGenerator.Analyzer">
            <summary>
            Represents an analyzer.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.TechniqueBased.FullHousePuzzleGenerator.EmptyCellsCount">
            <summary>
            <para>Indicates the number of empty cells that generated puzzles will be used.</para>
            <para>
            The value can be all possible integers between -1 and 21, without 0.
            If the value is -1, all possible number of empty cells in a puzzle can be tried; otherwise set a value between 1 and 21.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Generating.TechniqueBased.FullHousePuzzleGenerator.SupportedTypes">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Generating.TechniqueBased.FullHousePuzzleGenerator.SupportedTechniques">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.FullHousePuzzleGenerator.GenerateJustOneCell">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.FullHousePuzzleGenerator.GenerateJustOneCellPhased(Sudoku.Analytics.Categorization.SingleSubtype,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.FullHousePuzzleGenerator.GenerateUnique(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Generating.TechniqueBased.HiddenSinglePuzzleGenerator">
            <summary>
            Represents a puzzle generator that uses hidden single.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.TechniqueBased.HiddenSinglePuzzleGenerator.AllowsBlockExcluders">
            <summary>
            Indicates whether the generator will create for block excluders.
            This option will only be used if the generator generates for hidden single in lines.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.TechniqueBased.HiddenSinglePuzzleGenerator.SupportedTechniques">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.HiddenSinglePuzzleGenerator.GenerateJustOneCell">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.HiddenSinglePuzzleGenerator.GenerateJustOneCellPhased(Sudoku.Analytics.Categorization.SingleSubtype,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Generating.TechniqueBased.NakedSinglePuzzleGenerator">
            <summary>
            Represents a puzzle generator that can create puzzles using naked singles.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.TechniqueBased.NakedSinglePuzzleGenerator.SupportedTechniques">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.NakedSinglePuzzleGenerator.GenerateJustOneCell">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.NakedSinglePuzzleGenerator.GenerateJustOneCellPhased(Sudoku.Analytics.Categorization.SingleSubtype,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Generating.TechniqueBased.SinglePuzzleGenerator`1">
            <summary>
            Represents a puzzle generator that generates for puzzles using single techniques.
            </summary>
            <typeparam name="TStep">The type of the step supported.</typeparam>
        </member>
        <member name="F:Sudoku.Generating.TechniqueBased.SinglePuzzleGenerator`1.CenterHouses">
            <summary>
            Indicates center houses.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.TechniqueBased.SinglePuzzleGenerator`1.StrictCenterHouses">
            <summary>
            Indicates center houses, strictly.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.TechniqueBased.SinglePuzzleGenerator`1.SingleAnalyzer">
            <summary>
            Indicates the analyzer. This field can only be called inside method <see cref="M:Sudoku.Generating.TechniqueBased.SinglePuzzleGenerator`1.GenerateJustOneCellPhased(Sudoku.Analytics.Categorization.SingleSubtype,System.Threading.CancellationToken)"/>.
            </summary>
            <seealso cref="M:Sudoku.Generating.TechniqueBased.SinglePuzzleGenerator`1.GenerateJustOneCellPhased(Sudoku.Analytics.Categorization.SingleSubtype,System.Threading.CancellationToken)"/>
        </member>
        <member name="P:Sudoku.Generating.TechniqueBased.SinglePuzzleGenerator`1.SupportedTypes">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.SinglePuzzleGenerator`1.GenerateJustOneCellPhased(Sudoku.Analytics.Categorization.SingleSubtype,System.Threading.CancellationToken)">
            <summary>
            Generates a puzzle that is a just-one-cell, but is created from a normal puzzle that contains a unique solution.
            </summary>
            <param name="subtype">Indicates the subtype to be checked.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A <see cref="T:Sudoku.Generating.JustOneCell.PhasedJustOneCellPuzzle"/> instance to describe the result.</returns>
            <seealso cref="T:Sudoku.Generating.JustOneCell.PhasedJustOneCellPuzzle"/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.SinglePuzzleGenerator`1.AppendInterferingDigitsBaseGrid(Sudoku.Concepts.Grid@,Sudoku.Concepts.Grid@,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@)">
            <summary>
            Append interfering digits from the puzzle unfixed. The grid is generated in method
            <see cref="M:Sudoku.Generating.TechniqueBased.SinglePuzzleGenerator`1.GenerateJustOneCellPhased(Sudoku.Analytics.Categorization.SingleSubtype,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="puzzle">An unfixed puzzle to be operated.</param>
            <param name="baseGrid">The solution to be referenced.</param>
            <param name="targetCell">The target cell to avoid.</param>
            <param name="excludedCells">Indicates excluded cells.</param>
            <param name="interferingCells">The cells that are filled with interfering digits.</param>
            <returns>
            A <see cref="T:Sudoku.Generating.GeneratingFailedReason"/> instance desribing the reason why this method failed to operate.
            </returns>
            <seealso cref="M:Sudoku.Generating.TechniqueBased.SinglePuzzleGenerator`1.GenerateJustOneCellPhased(Sudoku.Analytics.Categorization.SingleSubtype,System.Threading.CancellationToken)"/>
            <seealso cref="T:Sudoku.Generating.GeneratingFailedReason"/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.SinglePuzzleGenerator`1.Sudoku#Generating#IGenerator{Sudoku#Generating#JustOneCell#PhasedJustOneCellPuzzle}#Generate(System.IProgress{Sudoku.Generating.GeneratorProgress},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.SinglePuzzleGenerator`1.BlockPositionOf(System.Int32)">
            <summary>
            Checks for the block position of the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>The block position.</returns>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.SinglePuzzleGenerator`1.RandomlySelectHouse(Sudoku.Generating.JustOneCell.ConlusionCellAlignment)">
            <summary>
            Randomly select a house, obeying the specified grid alignment rule.
            </summary>
            <param name="alignment">Indicates the grid alignment value to be used.</param>
            <returns>The house index.</returns>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.SinglePuzzleGenerator`1.RandomlySelectSubtype(System.Int32,System.Func{Sudoku.Analytics.Categorization.SingleSubtype,System.Boolean})">
            <summary>
            Randomly select a <see cref="T:Sudoku.Analytics.Categorization.SingleSubtype"/> instance.
            </summary>
            <param name="house">The house selected.</param>
            <param name="match">The extra match method.</param>
            <returns>The subtype selected.</returns>
        </member>
        <member name="T:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator">
            <summary>
            Represents a generator type that generates puzzles, relating to a kind of technique.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.CellSeed">
            <summary>
            Represents a seed array for cells that can be used in core methods.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.HouseSeed">
            <summary>
            Represents a seed array for houses that can be used in core methods.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.DigitSeed">
            <summary>
            Represents a seed array for digits that can be used in core methods.
            </summary>
        </member>
        <member name="F:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.Solver">
            <summary>
            Represents the solver.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.InterferingPercentage">
            <summary>
            Indicates the percentage of interfering digits that can be inserted into a just-one-cell puzzle,
            in order to interfere the user to find the answer of the puzzle.
            </summary>
            <remarks>
            <para>
            Although the value is of type <see cref="T:System.Double"/>, only 2 digits after decimal point is used,
            i.e. the percision of this value is 0.01.
            </para>
            <para>
            In addition, the value must be greater than 0. The greater the value will be, the more interfering digits will be produced.
            The value is 0 by default.
            </para>
            <para>This property will be used in method <see cref="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.GenerateJustOneCell"/> only.</para>
            <para><b>
            Please note that the greater the value will be, the more unstable the puzzle will be.
            This means, if the value is larger than expectation, the puzzle may not guarantee uniqueness on answer.
            </b></para>
            </remarks>
            <seealso cref="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.GenerateJustOneCell"/>
        </member>
        <member name="P:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.Alignment">
            <summary>
            Indicates the aligning rule controlling the case what position just-one-cell puzzles produce conclusion cells can be at.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.SupportedTypes">
            <summary>
            Indicates the supported sudoku puzzle types.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.SupportedTechniques">
            <summary>
            Indicates the supported techniques.
            </summary>
        </member>
        <member name="P:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.Rng">
            <summary>
            Indicates the random number generator.
            </summary>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.ToString(System.IFormatProvider)">
            <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.GenerateJustOneCell">
            <summary>
            Generates a puzzle that has multiple solutions, with only one cell has only one possibility to be filled
            that can be solved in logic.
            </summary>
            <returns>A type that encapsulates the result detail.</returns>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.GenerateUnique(System.Threading.CancellationToken)">
            <summary>
            Generates a puzzle that has a unique solution, with a must that contains the specified technique appeared in the puzzle.
            </summary>
            <param name="cancellationToken">The cancellation token that can cancel the operation.</param>
            <returns>A type that encapsulates the result detail.</returns>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.AppendInterferingDigitsNoBaseGrid(Sudoku.Concepts.Grid@,System.Int32,Sudoku.Concepts.CellMap@)">
            <summary>
            Append interfering digits from the puzzle unfixed. The grid is generated in method <see cref="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.GenerateJustOneCell"/>.
            </summary>
            <param name="puzzle">An unfixed puzzle to be operated.</param>
            <param name="targetCell">The target cell to avoid.</param>
            <param name="interferingCells">The cells that are filled with interfering digits.</param>
            <returns>
            A <see cref="T:Sudoku.Generating.GeneratingFailedReason"/> instance desribing the reason why this method failed to operate.
            </returns>
            <seealso cref="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.GenerateJustOneCell"/>
            <seealso cref="T:Sudoku.Generating.GeneratingFailedReason"/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.AppendInterferingDigitsCore(Sudoku.Concepts.Grid@,Sudoku.Concepts.Grid@,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@)">
            <summary>
            Append interfering digits from the puzzle unfixed.
            </summary>
            <param name="puzzle">An unfixed puzzle to be operated.</param>
            <param name="solution">Indicates the solution grid to the <paramref name="puzzle"/>.</param>
            <param name="targetCell">The target cell to avoid.</param>
            <param name="interferingCells">The cells that are filled with interfering digits.</param>
            <param name="excludedCells">Indicates the excluded cells.</param>
            <returns>
            A <see cref="T:Sudoku.Generating.GeneratingFailedReason"/> instance desribing the reason why this method failed to operate.
            </returns>
            <seealso cref="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.GenerateJustOneCell"/>
            <seealso cref="T:Sudoku.Generating.GeneratingFailedReason"/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.Sudoku#Generating#IGenerator{Sudoku#Concepts#Grid}#Generate(System.IProgress{Sudoku.Generating.GeneratorProgress},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.Sudoku#Generating#IGenerator{Sudoku#Generating#FullPuzzle}#Generate(System.IProgress{Sudoku.Generating.GeneratorProgress},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.Sudoku#Generating#IGenerator{Sudoku#Generating#JustOneCell#JustOneCellPuzzle}#Generate(System.IProgress{Sudoku.Generating.GeneratorProgress},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.ShuffleSequence``1(``0[])">
            <summary>
            Try to shuffle the sequence for 3 times.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="values">The values to be shuffled.</param>
        </member>
        <member name="M:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.GetGivensCount(System.Int32,System.Double,System.Int32@)">
            <summary>
            Calculates the number of givens in fact.
            </summary>
            <param name="currentGivensCount">The number of givens currently in puzzle.</param>
            <param name="ratio">The ratio. Pass <see cref="P:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator.InterferingPercentage"/> to this parameter.</param>
            <param name="interferingDigitsCount">The final number of interfering digits.</param>
            <returns>The result numnber of given cells.</returns>
        </member>
        <member name="T:Sudoku.Analytics.Categorization.TechniqueGeneratorExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Sudoku.Analytics.Categorization.Technique"/> on generator module.
            </summary>
            <seealso cref="T:Sudoku.Analytics.Categorization.Technique"/>
        </member>
        <member name="F:Sudoku.Analytics.Categorization.TechniqueGeneratorExtensions.GeneratorTypes">
            <summary>
            Indicates the generator types.
            </summary>
        </member>
        <member name="M:Sudoku.Analytics.Categorization.TechniqueGeneratorExtensions.GetSpecificPuzzleGenerator(Sudoku.Analytics.Categorization.Technique)">
            <summary>
            Creates a <see cref="T:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator"/> instance that creates puzzles that uses the specified technique.
            </summary>
            <param name="this">The <see cref="T:Sudoku.Analytics.Categorization.Technique"/> instance.</param>
            <returns>A <see cref="T:Sudoku.Generating.TechniqueBased.TechniqueBasedPuzzleGenerator"/> instance.</returns>
        </member>
    </members>
</doc>
