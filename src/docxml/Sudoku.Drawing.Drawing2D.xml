<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Drawing.Drawing2D</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Drawing.Drawing2D.ColorPalette">
            <summary>
            Represents a color palette instance.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.ColorPalette.Slice(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Linq.Providers.ISliceMethod`2.Slice(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.ColorPalette.System#Linq#Providers#ISliceMethod{Sudoku#Drawing#Drawing2D#ColorPalette,System#Drawing#Color}#Slice(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Drawing.Drawing2D.GridCanvas">
            <summary>
            Represents a canvas that allows drawing sudoku-related items onto it.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.Drawing2D.GridCanvas.RotateAngle">
            <summary>
            Represents a radian value equivalent to 45 degree. This field is used for rotate the chains if overlapped.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.Drawing2D.GridCanvas.SqrtOf2">
            <summary>
            Represents square root of 2. This field is used for rotate the chains.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.Drawing2D.GridCanvas._footerText">
            <summary>
            Indicates the footer text.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.Drawing2D.GridCanvas._settings">
            <summary>
            Indicates the backing settings.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.Drawing2D.GridCanvas._calculator">
            <summary>
            Indicates the backing point calculator to be used.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.Drawing2D.GridCanvas._stringAligner">
            <summary>
            Represents a <see cref="T:System.Drawing.StringFormat"/> instance that locates the text drawn, created by method
            <see cref="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)"/>,
            with centering the text with both horizontal aligning and vertical aligning.
            </summary>
            <remarks><inheritdoc cref="F:Sudoku.Drawing.Drawing2D.GridCanvas._backingBitmap" path="/remarks"/></remarks>
            <seealso cref="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)"/>
        </member>
        <member name="F:Sudoku.Drawing.Drawing2D.GridCanvas._backingBitmap">
            <summary>
            Indicates the backing bitmap to be used.
            </summary>
            <remarks>
            <b><i>This field should be released in <see cref="M:Sudoku.Drawing.Drawing2D.GridCanvas.Dispose"/>.</i></b>
            </remarks>
        </member>
        <member name="F:Sudoku.Drawing.Drawing2D.GridCanvas._g">
            <summary>
            Indicates the backing <see cref="T:System.Drawing.Graphics"/> instance to draw elements.
            </summary>
            <remarks><inheritdoc cref="F:Sudoku.Drawing.Drawing2D.GridCanvas._backingBitmap" path="/remarks"/></remarks>
        </member>
        <member name="F:Sudoku.Drawing.Drawing2D.GridCanvas._isDisposed">
            <summary>
            Indicates whether the object had already been disposed before <see cref="M:Sudoku.Drawing.Drawing2D.GridCanvas.Dispose"/> method was called.
            If this field holds <see langword="false"/> value, <see cref="M:Sudoku.Drawing.Drawing2D.GridCanvas.Dispose"/> method will throw an
            <see cref="T:System.ObjectDisposedException"/> to report the error.
            </summary>
            <seealso cref="M:Sudoku.Drawing.Drawing2D.GridCanvas.Dispose"/>
            <seealso cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.#ctor(System.Int32,System.Int32,Sudoku.Drawing.Drawing2D.GridCanvasSettings,System.String)">
            <summary>
            Initializes a <see cref="T:Sudoku.Drawing.Drawing2D.GridCanvas"/> instance via some values.
            </summary>
            <param name="size">Indicates the picture size to be used.</param>
            <param name="padding">Indicates the padding of the inner grid.</param>
            <param name="settings">Indicates settings that can be used by drawing items.</param>
            <param name="footerText">Indicates the footer text to be used.</param>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.Dispose">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">Throws when the object had already been disposed.</exception>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.SavePictureTo(System.String)">
            <summary>
            Try to save the picture into the local path.
            </summary>
            <param name="filePath">Indicates the file path.</param>
            <exception cref="T:System.ArgumentException">Throws when the file doesn't contain any valid file extension.</exception>
            <exception cref="T:System.NotSupportedException">Throws when the specified file extension is not supported.</exception>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.TryGetPaletteColorByIndex(System.Int32,System.Drawing.Color@)">
            <summary>
            Try to get the result color value.
            </summary>
            <param name="paletteColorIndex">The value of ID.</param>
            <param name="result">The result color got.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the ID is invalid.</exception>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.GetColor(Sudoku.Drawing.ColorIdentifier)">
            <summary>
            Gets the color value.
            </summary>
            <param name="id">The identifier instance.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Throws when the specified value is invalid.</exception>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.MeasureFooterTextExtraHeight(System.String,System.Int32,Sudoku.Drawing.Drawing2D.GridCanvasSettings)">
            <summary>
            Try to get extra height that footer text will use.
            </summary>
            <param name="footerText">Indicates the footer text.</param>
            <param name="size">Indicates the size to be used.</param>
            <param name="settings">Indicates the settings to be used.</param>
            <returns>Indicates the measured extra height.</returns>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.GetFooterTextFont(System.Single,Sudoku.Drawing.Drawing2D.GridCanvasSettings)">
            <summary>
            Get the font via the specified name, size and the scale.
            </summary>
            <param name="size">The size that decides the default font size.</param>
            <param name="settings">Indicates the settings.</param>
            <returns>The font.</returns>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.GetFont(System.String,System.Single,System.Decimal,System.Drawing.FontStyle)">
            <summary>
            Get the font via the specified name, size and the scale.
            </summary>
            <param name="fontName">The font name that decides the font to use and presentation.</param>
            <param name="size">The size that decides the default font size.</param>
            <param name="scale">The scale that decides the result font size.</param>
            <param name="style">The style that decides the font style of the text in the picture.</param>
            <returns>The font.</returns>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="fontName"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.CreateGraphics(System.String,System.Int32,Sudoku.Drawing.Drawing2D.GridCanvasSettings,System.Drawing.Bitmap@)">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics"/> instance via values.
            </summary>
            <param name="footerText">Indicates the footer text.</param>
            <param name="size">Indicates the size.</param>
            <param name="settings">Indicates the settings.</param>
            <param name="bitmap">Indicates the bitmap instance that returns after <see cref="T:System.Drawing.Graphics"/> instance is created.</param>
            <returns>A <see cref="T:System.Drawing.Graphics"/> instance.</returns>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.Clear">
            <summary>
            Clear the canvas, removing all drawn elements.
            </summary>
            <remarks>
            This will invalidate drawing items, and draw background, border lines and footer text.
            </remarks>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.DrawBackground">
            <summary>
            Draw the background.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.DrawBorderLines">
            <summary>
            Draw border lines onto the canvas.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.DrawFooterText">
            <summary>
            Draw footer text onto the canvas.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.DrawGrid(Sudoku.Concepts.Grid@)">
            <summary>
            Draw grid onto the canvas.
            </summary>
            <param name="grid">The grid to be drawn.</param>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.DrawCellViewNodes(System.ReadOnlySpan{Sudoku.Drawing.Nodes.CellViewNode})">
            <summary>
            Draw cell view nodes onto the canvas.
            </summary>
            <param name="nodes">The nodes to be drawn.</param>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.DrawCandidateViewNodes(System.ReadOnlySpan{Sudoku.Drawing.Nodes.CandidateViewNode},System.ReadOnlySpan{Sudoku.Concepts.Conclusion})">
            <summary>
            Draw candidate view nodes onto the canvas, with confliction check on conclusions.
            </summary>
            <param name="nodes">The nodes to be drawn.</param>
            <param name="conclusions">The conclusions to be checked.</param>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.DrawHouseViewNodes(System.ReadOnlySpan{Sudoku.Drawing.Nodes.HouseViewNode})">
            <summary>
            Draw house view nodes onto the canvas.
            </summary>
            <param name="nodes">The nodes to be drawn.</param>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.DrawLinkViewNodes(System.ReadOnlySpan{Sudoku.Drawing.Nodes.ChainLinkViewNode},System.ReadOnlySpan{Sudoku.Concepts.Conclusion})">
            <summary>
            Draw link view nodes onto the canvas, with confliction check on conclusions.
            If any conclusions is lying on the line of the link drawn, the link will be automatically adjusted to a curve.
            </summary>
            <param name="nodes">The nodes to be drawn.</param>
            <param name="conclusions">The conclusion to be checked.</param>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.DrawChuteViewNodes(System.ReadOnlySpan{Sudoku.Drawing.Nodes.ChuteViewNode})">
            <summary>
            Draw chute view nodes onto the canvas.
            </summary>
            <param name="nodes">The nodes to be drawn.</param>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.DrawBabaGroupingViewNodes(System.ReadOnlySpan{Sudoku.Drawing.Nodes.BabaGroupViewNode})">
            <summary>
            Draw baba grouping view nodes onto the canvas.
            </summary>
            <param name="nodes">The nodes to be drawn.</param>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.DrawEliminations(System.ReadOnlySpan{Sudoku.Concepts.Conclusion},System.ReadOnlySpan{Sudoku.Drawing.Nodes.CandidateViewNode})">
            <summary>
            Draw eliminations onto the canvas, with confliction check on nodes.
            If a node covers (uses) one candidate, the elimination will be treated as a cannibalism one, drawing with different color.
            </summary>
            <param name="conclusions">The conclusions to be drawn.</param>
            <param name="nodes">The nodes to be checked.</param>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.GridCanvas.DrawIconViewNodes(System.ReadOnlySpan{Sudoku.Drawing.Nodes.IconViewNode})">
            <summary>
            Draw icon view nodes onto the canvas.
            </summary>
            <param name="nodes">The nodes to be drawn.</param>
        </member>
        <member name="T:Sudoku.Drawing.Drawing2D.GridCanvasSettings">
            <summary>
            Represents with a preference type that stores the configurations on drawing.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.ShowCandidates">
            <summary>
            Indicates whether the form shows candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.ShowLightHouse">
            <summary>
            Indicates whether the grid painter will use new algorithm to draw a house (lighter).
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.BorderBarFullyOverlapsGridLine">
            <summary>
            Indicates whether border bars will fully overlaps the shared grid line while drawing.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.ValueScale">
            <summary>
            Indicates the scale of values.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.CandidateScale">
            <summary>
            Indicates the scale of candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.FooterTextScale">
            <summary>
            Indicates the scale that footer text will be drawn. The value unit is unified with
            <see cref="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.ValueScale"/> and <see cref="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.CandidateScale"/>.
            </summary>
            <seealso cref="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.ValueScale"/>
            <seealso cref="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.CandidateScale"/>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.GridLineWidth">
            <summary>
            Indicates the grid line width of the sudoku grid to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.BlockLineWidth">
            <summary>
            Indicates the block line width of the sudoku grid to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.FigurePadding">
            <summary>
            Indicates the padding of figures.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.GivenFontName">
            <summary>
            Indicates the font of given digits to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.ModifiableFontName">
            <summary>
            Indicates the font of modifiable digits to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.CandidateFontName">
            <summary>
            Indicates the font of candidate digits to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.BabaGroupingFontName">
            <summary>
            Indicates the font of baba grouping characters to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.FooterTextFontName">
            <summary>
            Indicates the font of footer text to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.GivenFontStyle">
            <summary>
            Indicates the font style of the givens.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.ModifiableFontStyle">
            <summary>
            Indicates the font style of the modifiables.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.CandidateFontStyle">
            <summary>
            Indicates the font style of the candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.BabaGroupCharacterFontStyle">
            <summary>
            Indicates the font style of a baba group.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.FooterTextFontStyle">
            <summary>
            Indicates the font style of footer text.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.GivenColor">
            <summary>
            Indicates the given digits to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.ModifiableColor">
            <summary>
            Indicates the modifiable digits to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.CandidateColor">
            <summary>
            Indicates the candidate digits to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.NormalColor">
            <summary>
            Indicates the normal color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.AssignmentColor">
            <summary>
            Indicates the color that draws for an assignment.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.EliminationColor">
            <summary>
            Indicates the elimination color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.CannibalismColor">
            <summary>
            Indicates the cannibalism color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.ExofinColor">
            <summary>
            Indicates the exo-fin color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.EndofinColor">
            <summary>
            Indicates the endo-fin color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.ChainColor">
            <summary>
            Indicates the chain color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.BackgroundColor">
            <summary>
            Indicates the background color of the sudoku grid to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.GridLineColor">
            <summary>
            Indicates the grid line color of the sudoku grid to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.BlockLineColor">
            <summary>
            Indicates the block line color of the sudoku grid to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.BabaGroupingCharacterColor">
            <summary>
            Indicates the color of the baba grouping identifier color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.FooterTextColor">
            <summary>
            Indicates footer text color.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.AuxiliaryColorSet">
            <summary>
            Indicates the auxiliary color set.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.AlmostLockedSetColorSet">
            <summary>
            Indicates the almost locked set color set.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.GridCanvasSettings.ColorPalette">
            <summary>
            Indicates the user-defined color palette.
            </summary>
        </member>
        <member name="T:Sudoku.Drawing.Drawing2D.PointCalculator">
            <summary>
            Provides a serial of methods for a point calculator that interacts with the UI projects.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.Drawing2D.PointCalculator.AnchorsCount">
            <summary>
            Indicates the number of anchors hold per house.
            </summary>
            <remarks>
            The sudoku grid painter will draw the outlines and the inner lines, and correct the point
            of each digits (candidates also included). Each row or column always contains 27 candidates,
            so this value is 27.
            </remarks>
        </member>
        <member name="F:Sudoku.Drawing.Drawing2D.PointCalculator.DefaultPadding">
            <summary>
            Indicates the default padding of the sudoku grid drawn.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.PointCalculator.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a <see cref="T:Sudoku.Drawing.Drawing2D.PointCalculator"/> instance via the specified picture size and padding value.
            </summary>
            <param name="size">The size of the picture.</param>
            <param name="padding">The padding.</param>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.PointCalculator.#ctor(System.Drawing.SizeF,System.Single)">
            <summary>
            Initializes a <see cref="T:Sudoku.Drawing.Drawing2D.PointCalculator"/> instance with the specified picture size instance and padding value.
            </summary>
            <param name="size">The <see cref="T:System.Drawing.SizeF"/> instance.</param>
            <param name="padding">
            Indicates the padding to set to allow the output items moving a little bit left or right,
            in order to correct the position on drawing. The default value is <c>10F</c>, which is defined by <see cref="F:Sudoku.Drawing.Drawing2D.PointCalculator.DefaultPadding"/>
            </param>
            <seealso cref="F:Sudoku.Drawing.Drawing2D.PointCalculator.DefaultPadding"/>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.PointCalculator.Width">
            <summary>
            Indicates the width of the picture to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.PointCalculator.Height">
            <summary>
            Indicates the height of the picture to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.PointCalculator.Padding">
            <summary>
            Indicates the padding of the gap between the picture box outline and the sudoku grid outline.
            </summary>
            <remarks>The default value is <c>10</c>.</remarks>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.PointCalculator.ControlSize">
            <summary>
            Indicates the control size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.PointCalculator.GridSize">
            <summary>
            Indicates the grid size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.PointCalculator.CellSize">
            <summary>
            Indicates the cell size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.PointCalculator.CandidateSize">
            <summary>
            Indicates the candidate size.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.Drawing2D.PointCalculator.GridPoints">
            <summary>
            Indicates the absolutely points in grid cross-lines.
            This property will be assigned later (and not <see langword="null"/>).
            </summary>
            <remarks>Note that the size of this 2D array is always 28 by 28.</remarks>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.PointCalculator.GetCell(System.Drawing.PointF)">
            <summary>
            Get the focus cell offset via a mouse point.
            </summary>
            <param name="point">The mouse point.</param>
            <returns>The cell offset. Returns -1 when the current point is invalid.</returns>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.PointCalculator.GetCandidate(System.Drawing.PointF)">
            <summary>
            Get the focus candidate offset via a mouse point.
            </summary>
            <param name="point">The mouse point.</param>
            <returns>The candidate offset.</returns>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.PointCalculator.GetMouseCenter(Sudoku.Concepts.CandidateMap@)">
            <summary>
            Get the center mouse point of all candidates.
            </summary>
            <param name="map">The map of candidates.</param>
            <returns>The center mouse point.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.PointCalculator.GetMouseRectangle(Sudoku.Concepts.CandidateMap@)">
            <summary>
            Get the rectangle from all candidates.
            </summary>
            <param name="map">The candidates.</param>
            <returns>The rectangle.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.PointCalculator.GetMouseRectangleViaCell(System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) via the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.PointCalculator.GetMouseRectangle(System.Int32,System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) for the specified cell and digit of a candidate.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.PointCalculator.GetMouseRectangleViaHouse(System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) via the specified house.
            </summary>
            <param name="house">The house.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.PointCalculator.GetAnchorsViaHouse(System.Int32)">
            <summary>
            Gets two points that specifies and represents the anchors of this house.
            </summary>
            <param name="house">The house.</param>
            <returns>The anchor points.</returns>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.PointCalculator.GetSharedLinePosition(System.Int32,System.Int32)">
            <summary>
            Gets two points specifies and represents a line as shared border grid lines between two adjacent cells.
            </summary>
            <param name="cell1">The first cell.</param>
            <param name="cell2">The second cell that is adjacent with <paramref name="cell1"/> by row or column.</param>
            <returns>The two points representing with a line.</returns>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.PointCalculator.GetMousePointInCenter(System.Int32)">
            <summary>
            Get the mouse point of the center of a cell via its offset.
            </summary>
            <param name="cell">The cell offset.</param>
            <returns>The mouse point.</returns>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.PointCalculator.GetMousePointInCenter(System.Int32,System.Int32)">
            <summary>
            Get the mouse point of the center of a cell via its offset and the digit.
            </summary>
            <param name="cell">The cell offset.</param>
            <param name="digit">The digit.</param>
            <returns>The mouse point.</returns>
        </member>
        <member name="M:Sudoku.Drawing.Drawing2D.PointCalculator.GetSharedLinePosition(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc cref="M:Sudoku.Drawing.Drawing2D.PointCalculator.GetSharedLinePosition(System.Int32,System.Int32)"/>
        </member>
        <member name="T:System.Drawing.BitmapExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <seealso cref="T:System.Drawing.Bitmap"/>
        </member>
        <member name="M:System.Drawing.BitmapExtensions.ZoomTo(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Zoom a picture.
            </summary>
            <param name="this">The bitmap instance.</param>
            <param name="newWidth">The new width.</param>
            <param name="newHeight">The new height.</param>
            <returns>The new bitmap instance that has been zoomed.</returns>
        </member>
        <member name="T:System.Drawing.ColorExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Drawing.Color"/>.
            </summary>
            <seealso cref="T:System.Drawing.Color"/>
        </member>
        <member name="M:System.Drawing.ColorExtensions.QuarterAlpha(System.Drawing.Color)">
            <summary>
            Gets a target <see cref="T:System.Drawing.Color"/> whose <see cref="P:System.Drawing.Color.A"/> value is a quarter of the original one.
            </summary>
            <param name="this">The original color value.</param>
            <returns>The target result.</returns>
        </member>
        <member name="M:System.Drawing.ColorExtensions.Deconstruct(System.Drawing.Color,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax like <c>(a, b, c)</c> to define your own deconstruction logic.
				</summary>
			</target>
        </member>
        <member name="T:System.Drawing.GraphicsExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <seealso cref="T:System.Drawing.Graphics"/>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawValue``1(System.Drawing.Graphics,``0,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)">
            <summary>
            Draw the string representation of an instance onto the current <see cref="T:System.Drawing.Graphics"/> instance.
            </summary>
            <typeparam name="TFormattable">The type of the value to draw.</typeparam>
            <param name="this">The graphics instance.</param>
            <param name="value">The value to drawing onto.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="point">The point.</param>
            <param name="stringFormat">The string format instance.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawHollowArrow(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.PointF,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills a hollow arrow.
            </summary>
            <param name="g">The graphics instance.</param>
            <param name="brush">The brush.</param>
            <param name="center">The center point.</param>
            <param name="length">The length.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="angle">The angle.</param>
            <exception cref="T:System.ArgumentException">
            Throws when the argument <paramref name="length"/> is below 0 or either <paramref name="width"/> or <paramref name="height"/> is below 0.
            </exception>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawCrossSign(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draw a cross sign (<c>x</c>).
            </summary>
            <param name="this">The graphics.</param>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
            <remarks>
            This method will draw a cross sign and fill with the specified color, so you don't need
            to find any fill methods.
            </remarks>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawCapsule(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draw a capsule.
            </summary>
            <param name="this">The graphics.</param>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.FillCapsule(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fill a capsule.
            </summary>
            <param name="this">The graphics.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawRoundedRectangle(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF,System.Single)">
            <summary>
            Draw a rounded rectangle.
            </summary>
            <param name="this">The graphics.</param>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle to draw.</param>
            <param name="circleRadius">The radius of each vertex.</param>
            <exception cref="T:System.ArgumentException">
            Throws when <paramref name="circleRadius"/> is greater than the value in
            <paramref name="rectangle"/>.
            </exception>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.FillRoundedRectangle(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.RectangleF,System.Single)">
            <summary>
            Fill a rounded rectangle.
            </summary>
            <param name="this">The graphics.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle to fill.</param>
            <param name="circleRadius">The radius of each vertex.</param>
            <exception cref="T:System.ArgumentException">
            Throws when <paramref name="circleRadius"/> is greater than the value in
            <paramref name="rectangle"/>.
            </exception>
        </member>
        <member name="T:System.Drawing.PointExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Drawing.Point"/>.
            </summary>
            <seealso cref="T:System.Drawing.Point"/>
        </member>
        <member name="M:System.Drawing.PointExtensions.Deconstruct(System.Drawing.Point,System.Int32@,System.Int32@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax like <c>(a, b, c)</c> to define your own deconstruction logic.
				</summary>
			</target>
        </member>
        <member name="T:System.Drawing.PointFExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <seealso cref="T:System.Drawing.PointF"/>
        </member>
        <member name="M:System.Drawing.PointFExtensions.Truncate(System.Drawing.PointF)">
            <summary>
            To truncate the point.
            </summary>
            <param name="this">The point to truncate.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.Drawing.PointFExtensions.Deconstruct(System.Drawing.PointF,System.Single@,System.Single@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax like <c>(a, b, c)</c> to define your own deconstruction logic.
				</summary>
			</target>
        </member>
        <member name="T:System.Drawing.RectangleCreator">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <seealso cref="T:System.Drawing.Rectangle"/>
        </member>
        <member name="M:System.Drawing.RectangleCreator.Create(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Create an instance with two points.
            </summary>
            <param name="topLeft">The top-left point.</param>
            <param name="bottomRight">The bottom-right point.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:System.Drawing.RectangleCreator.Create(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Create an instance with two points.
            </summary>
            <param name="topLeft">The top-left point.</param>
            <param name="bottomRight">The bottom-right point.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="T:System.Drawing.RectangleExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <seealso cref="T:System.Drawing.Rectangle"/>
        </member>
        <member name="M:System.Drawing.RectangleExtensions.Zoom(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Zoom in or out the rectangle by the specified offset.
            If the offset is positive, the rectangle will be larger; otherwise, smaller.
            </summary>
            <param name="this">The rectangle.</param>
            <param name="offset">The offset to zoom in or out.</param>
            <returns>The new rectangle.</returns>
        </member>
        <member name="T:System.Drawing.RectangleFExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
            <seealso cref="T:System.Drawing.RectangleF"/>
        </member>
        <member name="M:System.Drawing.RectangleFExtensions.Zoom(System.Drawing.RectangleF,System.Single)">
            <summary>
            Zoom in or out the rectangle by the specified offset.
            If the offset is positive, the rectangle will be larger; otherwise, smaller.
            </summary>
            <param name="this">The rectangle.</param>
            <param name="offset">The offset to zoom in or out.</param>
            <returns>The new rectangle.</returns>
        </member>
        <member name="M:System.Drawing.RectangleFExtensions.Truncate(System.Drawing.RectangleF)">
            <summary>
            Truncate the specified rectangle.
            </summary>
            <param name="this">The rectangle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.Drawing.RectangleFExtensions.Deconstruct(System.Drawing.RectangleF,System.Drawing.PointF@,System.Drawing.SizeF@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax like <c>(a, b, c)</c> to define your own deconstruction logic.
				</summary>
			</target>
        </member>
        <member name="M:System.Drawing.RectangleFExtensions.Deconstruct(System.Drawing.RectangleF,System.Single@,System.Single@,System.Single@,System.Single@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax like <c>(a, b, c)</c> to define your own deconstruction logic.
				</summary>
			</target>
        </member>
        <member name="T:System.Drawing.SizeExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Drawing.Size"/>.
            </summary>
            <seealso cref="T:System.Drawing.Size"/>
        </member>
        <member name="M:System.Drawing.SizeExtensions.Deconstruct(System.Drawing.Size,System.Int32@,System.Int32@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax like <c>(a, b, c)</c> to define your own deconstruction logic.
				</summary>
			</target>
        </member>
        <member name="T:System.Drawing.SizeFExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.SizeF"/>.
            </summary>
            <seealso cref="T:System.Drawing.SizeF"/>
        </member>
        <member name="M:System.Drawing.SizeFExtensions.Truncate(System.Drawing.SizeF)">
            <summary>
            To truncate the size.
            </summary>
            <param name="this">The size.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.Drawing.SizeFExtensions.Deconstruct(System.Drawing.SizeF,System.Single@,System.Single@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax like <c>(a, b, c)</c> to define your own deconstruction logic.
				</summary>
			</target>
        </member>
    </members>
</doc>
