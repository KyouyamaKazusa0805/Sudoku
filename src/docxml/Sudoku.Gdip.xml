<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Gdip</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Drawing.ISudokuPainter">
            <summary>
            Defines a sudoku painter instance.
            </summary>
        </member>
        <member name="P:Sudoku.Drawing.ISudokuPainter.GridImageGenerator">
            <summary>
            The grid image generator.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainter.SaveTo(System.String)">
            <summary>
            Render the image with the current configuration, and save the image to the local path,
            and automatically release the memory while rendering and image creating.
            </summary>
            <param name="path">The local path.</param>
            <exception cref="T:System.ArgumentException">
            Throws when the specified file format specified in the argument <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Throws when the specified file format specified in the argument <paramref name="path"/> is not supported.
            </exception>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainter.TrySaveTo(System.String)">
            <summary>
            Render the image with the current configuration, and save the image to the local path,
            and automatically release the memory while rendering and image creating.
            </summary>
            <param name="path">The local path.</param>
            <returns>
            A <see cref="T:System.Boolean"/> result indicating whether the file is successfully saved or not.
            All supported formats are:
            <list type="bullet">
            <item><c>*.jpg</c> and <c>*.jpeg</c></item>
            <item><c>*.png</c></item>
            <item><c>*.bmp</c></item>
            <item><c>*.gif</c></item>
            <item><c>*.wmf</c></item>
            </list>
            Other formats are not supported. This method will return <see langword="false"/> for not being supported.
            </returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainter.Render">
            <summary>
            Render the image with the current configuration.
            </summary>
            <returns>
            <para>The <see cref="T:System.Drawing.Image"/> created.</para>
            <para>
            <b>
            Please note that the method will return an <see cref="T:System.IDisposable"/> type, you should release it after used.
            The recommend pattern is using <see langword="using"/> statement:
            </b>
            <code><![CDATA[
            using var image = Render();
            // Then you can do something you want to do ...
            ]]></code>
            </para>
            </returns>
            <seealso cref="T:System.Drawing.Image"/>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainter.WithFooterTextIfNotNull(System.String)">
            <summary>
            Sets the footer text that can be rendered below the picture.
            </summary>
            <param name="footerText">The footer text.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainter.Create(System.Int32,System.Int32)">
            <summary>
            The default singleton instance that you can get.
            </summary>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainter.Create(Sudoku.Drawing.ISudokuPainter,Sudoku.Drawing.SudokuPainterPropertySetter)">
            <summary>
            Create an instance using the specified <see cref="T:Sudoku.Drawing.SudokuPainterPropertySetter"/> method,
            and a default base <see cref="T:Sudoku.Drawing.ISudokuPainter"/> instance.
            </summary>
            <param name="base">The base instance.</param>
            <param name="propertySetters">The property setter method.</param>
            <returns>Created <see cref="T:Sudoku.Drawing.ISudokuPainter"/> instance.</returns>
        </member>
        <member name="T:Sudoku.Drawing.SudokuPainter">
            <summary>
            The backing type that implements type <see cref="T:Sudoku.Drawing.ISudokuPainter"/>.
            </summary>
            <param name="defaultSize">The default size.</param>
            <param name="defaultOffset">The default outside offset.</param>
            <seealso cref="T:Sudoku.Drawing.ISudokuPainter"/>
        </member>
        <member name="M:Sudoku.Drawing.SudokuPainter.#ctor(System.Int32,System.Int32)">
            <summary>
            The backing type that implements type <see cref="T:Sudoku.Drawing.ISudokuPainter"/>.
            </summary>
            <param name="defaultSize">The default size.</param>
            <param name="defaultOffset">The default outside offset.</param>
            <seealso cref="T:Sudoku.Drawing.ISudokuPainter"/>
        </member>
        <member name="P:Sudoku.Drawing.SudokuPainter.GridImageGenerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.SudokuPainter.Render">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.SudokuPainter.WithSize(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.SudokuPainter.WithPadding(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.SudokuPainter.WithGrid(Sudoku.Concepts.Grid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.SudokuPainter.WithPreferenceSettings(System.Action{Sudoku.Gdip.DrawingConfigurations})">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.SudokuPainter.WithFooterText(System.String,Sudoku.Drawing.TextRendering.TextAlignmentType)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.SudokuPainter.WithConclusions(System.Collections.Immutable.ImmutableArray{Sudoku.Analytics.Conclusion})">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.SudokuPainter.WithNodes(System.Collections.Generic.IEnumerable{Sudoku.Rendering.ViewNode})">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.SudokuPainter.AddNodes(System.ReadOnlySpan{Sudoku.Rendering.ViewNode})">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.SudokuPainter.RemoveNodes(System.Collections.Generic.IEnumerable{Sudoku.Rendering.ViewNode})">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Drawing.SudokuPainter.RemoveNodesWhen(System.Func{Sudoku.Rendering.ViewNode,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Drawing.ISudokuPainterFactory">
            <summary>
            Defines the factory methods that can append custom configurations for <see cref="T:Sudoku.Drawing.ISudokuPainter"/> instances.
            </summary>
            <seealso cref="T:Sudoku.Drawing.ISudokuPainter"/>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.WithSize(System.Int32)">
            <summary>
            Sets the size of the canvas.
            </summary>
            <param name="size">The new size of the canvas.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.WithPadding(System.Int32)">
            <summary>
            Sets the offset of the canvas.
            </summary>
            <param name="padding">The padding of the canvas.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.WithGrid(Sudoku.Concepts.Grid@)">
            <summary>
            Sets the grid of the canvas.
            </summary>
            <param name="grid">The new grid.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.WithGridCode(System.String)">
            <summary>
            Sets the grid of the canvas, with the string representation.
            </summary>
            <param name="gridCode">The new grid string code.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.WithRenderingCandidates(System.Boolean)">
            <summary>
            Sets whether the candidates in the grid will also be rendered.
            </summary>
            <param name="renderingCandidates">The <see cref="T:System.Boolean"/> value indicating that.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.WithValueFont(System.String)">
            <summary>
            Sets a font name that is used for rendering text of value digits in a sudoku grid.
            </summary>
            <param name="fontName">The font name.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.WithFontScale(System.Decimal)">
            <summary>
            Sets a font scale that is used for rendering text of digits (values and candidates) in a sudoku grid.
            </summary>
            <param name="fontScale">
            <para>Indicates the desired font scale.</para>
            <para>
            The value is surrounded with 1. If you want to make the rendered digits become greater, you can set the value greater;
            otherwise, just set the value less. Generally the value should be less than 1.
            However, you can also assign a value greater than 1.
            </para>
            <para>We recommend you assign the value with the range (0, 1], with the boundary value 1, but not containing 0.</para>
            </param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.WithFontScale(System.Decimal,System.Decimal)">
            <summary>
            <inheritdoc cref="M:Sudoku.Drawing.ISudokuPainterFactory.WithFontScale(System.Decimal)" path="/summary"/>
            </summary>
            <param name="valueFontScale">
            <para>Indicates the desired font scale that is applied to values (given and modifiable values).</para>
            <para><inheritdoc cref="M:Sudoku.Drawing.ISudokuPainterFactory.WithFontScale(System.Decimal)" path="//param[@name='fontScale']/para[2]"/></para>
            <para><inheritdoc cref="M:Sudoku.Drawing.ISudokuPainterFactory.WithFontScale(System.Decimal)" path="//param[@name='fontScale']/para[3]"/></para>
            </param>
            <param name="candidateFontScale">
            <para>Indicates the desired font scale that is applied to candidates.</para>
            <para><inheritdoc cref="M:Sudoku.Drawing.ISudokuPainterFactory.WithFontScale(System.Decimal)" path="//param[@name='fontScale']/para[2]"/></para>
            <para><inheritdoc cref="M:Sudoku.Drawing.ISudokuPainterFactory.WithFontScale(System.Decimal)" path="//param[@name='fontScale']/para[3]"/></para>
            </param>
            <returns>
            <inheritdoc cref="M:Sudoku.Drawing.ISudokuPainterFactory.WithFontScale(System.Decimal)" path="/returns"/>
            </returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.WithCandidateFont(System.String)">
            <summary>
            Sets a font name that is used for rendering text of candidate digits in a sudoku grid.
            </summary>
            <param name="fontName">The font name.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.WithPreferenceSettings(System.Action{Sudoku.Gdip.DrawingConfigurations})">
            <summary>
            Sets the preference to the target value.
            </summary>
            <param name="action">The action to set preference values.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.WithFooterText(System.String)">
            <summary>
            Sets the footer text that can be rendered below the picture.
            </summary>
            <param name="footerText">The footer text.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.WithFooterText(System.String,Sudoku.Drawing.TextRendering.TextAlignmentType)">
            <summary>
            Sets the footer text that can be rendered below the picture, with the specified alignment.
            </summary>
            <param name="footerText">The footer text.</param>
            <param name="alignment">The alignment.</param>
            <returns>The target painter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when the argument <paramref name="alignment"/> is not defined.</exception>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.WithConclusions(Sudoku.Analytics.Conclusion[])">
            <summary>
            Sets the conclusions used for rendering.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.WithConclusions(System.Collections.Immutable.ImmutableArray{Sudoku.Analytics.Conclusion})">
            <summary>
            Sets the conclusions used for rendering.
            </summary>
            <param name="conclusions">The conclusions.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.WithNodes(System.Collections.Generic.IEnumerable{Sudoku.Rendering.ViewNode})">
            <summary>
            Sets the view nodes used for rendering.
            </summary>
            <param name="nodes">The nodes.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.AddNodes(System.ReadOnlySpan{Sudoku.Rendering.ViewNode})">
            <summary>
            Append extra nodes.
            </summary>
            <param name="nodes">Extra nodes.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.RemoveNodes(System.Collections.Generic.IEnumerable{Sudoku.Rendering.ViewNode})">
            <summary>
            Remove nodes.
            </summary>
            <param name="nodes">Nodes.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="M:Sudoku.Drawing.ISudokuPainterFactory.RemoveNodesWhen(System.Func{Sudoku.Rendering.ViewNode,System.Boolean})">
            <summary>
            Remove nodes if the target node satisfies the specified condition.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>The target painter.</returns>
        </member>
        <member name="T:Sudoku.Drawing.SudokuPainterPropertySetter">
            <summary>
            Defines a type that holds a list of methods to create <see cref="T:Sudoku.Drawing.ISudokuPainter"/> using the specified rule.
            </summary>
            <param name="base">The base <see cref="T:Sudoku.Drawing.ISudokuPainter"/> instance.</param>
            <returns><see cref="T:Sudoku.Drawing.ISudokuPainter"/> instance returned.</returns>
        </member>
        <member name="T:Sudoku.Drawing.TextRendering.TextAlignmentType">
            <summary>
            Defines an alignment type that can be used for rendering a string text in a picture.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.TextRendering.TextAlignmentType.Center">
            <summary>
            Indicates the alignment is as center. This value is the default value.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.TextRendering.TextAlignmentType.Left">
            <summary>
            Indicates the alignment is as left.
            </summary>
        </member>
        <member name="F:Sudoku.Drawing.TextRendering.TextAlignmentType.Right">
            <summary>
            Indicates the alignment is as right.
            </summary>
        </member>
        <member name="T:Sudoku.Gdip.DrawingConfigurations">
            <summary>
            Represents with a preference type that stores the configurations on drawing.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.ShowCandidates">
            <summary>
            Indicates whether the form shows candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.ShowLightHouse">
            <summary>
            Indicates whether the grid painter will use new algorithm to render a house (lighter).
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.BorderBarFullyOverlapsGridLine">
            <summary>
            Indicates whether border bars will fully overlaps the shared grid line while rendering.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.ValueScale">
            <summary>
            Indicates the scale of values.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.CandidateScale">
            <summary>
            Indicates the scale of candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.GridLineWidth">
            <summary>
            Indicates the grid line width of the sudoku grid to render.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.BlockLineWidth">
            <summary>
            Indicates the block line width of the sudoku grid to render.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.FigurePadding">
            <summary>
            Indicates the padding of figures.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.GivenFontName">
            <summary>
            Indicates the font of given digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.ModifiableFontName">
            <summary>
            Indicates the font of modifiable digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.CandidateFontName">
            <summary>
            Indicates the font of candidate digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.BabaGroupingFontName">
            <summary>
            Indicates the font of baba grouping characters to render.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.GivenFontStyle">
            <summary>
            Indicates the font style of the givens.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.ModifiableFontStyle">
            <summary>
            Indicates the font style of the modifiables.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.CandidateFontStyle">
            <summary>
            Indicates the font style of the candidates.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.BabaGroupCharacterFontStyle">
            <summary>
            Indicates the font style of a baba group.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.GivenColor">
            <summary>
            Indicates the given digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.ModifiableColor">
            <summary>
            Indicates the modifiable digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.CandidateColor">
            <summary>
            Indicates the candidate digits to render.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.EliminationColor">
            <summary>
            Indicates the elimination color.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.CannibalismColor">
            <summary>
            Indicates the cannibalism color.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.ChainColor">
            <summary>
            Indicates the chain color.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.BackgroundColor">
            <summary>
            Indicates the background color of the sudoku grid to render.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.GridLineColor">
            <summary>
            Indicates the grid line color of the sudoku grid to render.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.BlockLineColor">
            <summary>
            Indicates the block line color of the sudoku grid to render.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.BabaGroupingCharacterColor">
            <summary>
            Indicates the color of the baba grouping identifier color.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.FooterTextColor">
            <summary>
            Indicates footer text color.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.ColorPalette">
            <summary>
            The color palette. This property stores a list of customized colors to be used as user-defined colors.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.DrawingConfigurations.FooterTextFont">
            <summary>
            Indicates the font of footer text.
            </summary>
        </member>
        <member name="T:Sudoku.Gdip.FontData">
            <summary>
            Encapsulates a font data to be serialized.
            </summary>
            <param name="fontName">Indicates the name of the font.</param>
            <param name="fontSize">Indicates the font size.</param>
            <param name="fontStyle">Indicates the font style.</param>
        </member>
        <member name="M:Sudoku.Gdip.FontData.#ctor(System.String,System.Single,System.Drawing.FontStyle)">
            <summary>
            Encapsulates a font data to be serialized.
            </summary>
            <param name="fontName">Indicates the name of the font.</param>
            <param name="fontSize">Indicates the font size.</param>
            <param name="fontStyle">Indicates the font style.</param>
        </member>
        <member name="M:Sudoku.Gdip.FontData.Deconstruct(System.String@,System.Single@,System.Drawing.FontStyle@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
<![CDATA[
public static void Deconstruct(out string name, out int age)
    => (name, age) = (Name, Age);
]]>
						</code>
						The following code will be legal.
						<code>
<![CDATA[
(string name, int age) = student; // Explicitly-typed variables
var (name, age) = student; // Implicitly-typed variables
]]>
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
<![CDATA[
if (student is (name: var name, age: >= 18))
{
    Console.WriteLine(name);
}
]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="M:Sudoku.Gdip.FontData.Equals(Sudoku.Gdip.FontData)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Gdip.FontData.CreateFont">
            <summary>
            Creates a <see cref="T:System.Drawing.Font"/> instance via the current <see cref="T:Sudoku.Gdip.FontData"/> instance.
            </summary>
            <returns>
            The <see cref="T:System.Drawing.Font"/> instance created. Please note that the created result should use <see langword="using"/> statement
            to limit the lifestyle:
            <code><![CDATA[
            using var font = data.CreateFont();
            ]]></code>
            </returns>
        </member>
        <member name="P:Sudoku.Gdip.FontData.FontName">
            <summary>
            The generated property declaration for parameter <c>fontName</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.FontData.FontSize">
            <summary>
            The generated property declaration for parameter <c>fontSize</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.FontData.FontStyle">
            <summary>
            The generated property declaration for parameter <c>fontStyle</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Gdip.FontData.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Gdip.FontData.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Sudoku.Gdip.GridImageGenerator">
            <summary>
            Defines and encapsulates a data structure that provides the operations to draw a sudoku puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.DrawFooterText(System.Drawing.Graphics)">
            <summary>
            Draw footer text.
            </summary>
            <param name="g"><inheritdoc cref="M:Sudoku.Gdip.GridImageGenerator.RenderTo(System.Drawing.Graphics)" path="/param[@name='g']"/></param>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.DrawValue(System.Drawing.Graphics)">
            <summary>
            Draw givens, modifiables and candidates, where the values are specified as a grid.
            </summary>
            <param name="g"><inheritdoc cref="M:Sudoku.Gdip.GridImageGenerator.RenderTo(System.Drawing.Graphics)" path="/param[@name='g']"/></param>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.DrawBackground(System.Drawing.Graphics)">
            <summary>
            Draw the background, where the color is specified in <see cref="P:Sudoku.Gdip.DrawingConfigurations.BackgroundColor"/>.
            </summary>
            <param name="g"><inheritdoc cref="M:Sudoku.Gdip.GridImageGenerator.RenderTo(System.Drawing.Graphics)" path="/param[@name='g']"/></param>
            <seealso cref="P:Sudoku.Gdip.DrawingConfigurations.BackgroundColor"/>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.DrawGridAndBlockLines(System.Drawing.Graphics)">
            <summary>
            Draw grid lines and block lines.
            </summary>
            <param name="g"><inheritdoc cref="M:Sudoku.Gdip.GridImageGenerator.RenderTo(System.Drawing.Graphics)" path="/param[@name='g']"/></param>
        </member>
        <member name="F:Sudoku.Gdip.GridImageGenerator.RotateAngle">
            <summary>
            The rotate angle (45 degrees). This field is used for rotate the chains if some of them are overlapped.
            </summary>
        </member>
        <member name="F:Sudoku.Gdip.GridImageGenerator.StringLocating">
            <summary>
            Indicates the <see cref="T:System.Drawing.StringFormat"/> instance that locates the text drawn by
            <see cref="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)"/>,
            center the text with both horizontal and vertical.
            </summary>
            <seealso cref="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)"/>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.#ctor(System.Single,System.Single)">
            <inheritdoc cref="M:Sudoku.Gdip.GridImageGenerator.#ctor(Sudoku.Gdip.PointCalculator,Sudoku.Gdip.DrawingConfigurations)"/>
            <summary>
            <inheritdoc path="/summary"/>
            </summary>
            <param name="canvasSize">The size of the drawing canvas.</param>
            <param name="padding">The padding.</param>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.#ctor(Sudoku.Gdip.PointCalculator)">
            <inheritdoc cref="M:Sudoku.Gdip.GridImageGenerator.#ctor(Sudoku.Gdip.PointCalculator,Sudoku.Gdip.DrawingConfigurations)"/>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.#ctor(Sudoku.Gdip.PointCalculator,Sudoku.Gdip.DrawingConfigurations)">
            <summary>
            Initializes a <see cref="T:Sudoku.Gdip.GridImageGenerator"/> instance via the specified values.
            </summary>
            <param name="calculator">The point calculator that is used for conversion of drawing pixels.</param>
            <param name="preferences">The user-defined preferences.</param>
        </member>
        <member name="P:Sudoku.Gdip.GridImageGenerator.Width">
            <summary>
            Indicates the drawing width.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.GridImageGenerator.Height">
            <summary>
            Indicates the drawing height.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.GridImageGenerator.FooterText">
            <summary>
            Indicate the footer text. This property is optional, and you can keep this with <see langword="null"/> value
            if you don't want to make any footers on a picture.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.GridImageGenerator.FooterTextAlignment">
            <summary>
            Indicates the footer text alignment.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.GridImageGenerator.Puzzle">
            <summary>
            Indicates the puzzle.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.GridImageGenerator.Conclusions">
            <summary>
            Indicates all conclusions.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.GridImageGenerator.View">
            <summary>
            Indicates the view.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.GridImageGenerator.Calculator">
            <summary>
            Indicates the <see cref="T:Sudoku.Gdip.PointCalculator"/> instance that calculates the pixels to help the inner
            methods to handle and draw the picture used for displaying onto the UI projects.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.GridImageGenerator.Preferences">
            <summary>
            Indicates the <see cref="T:Sudoku.Gdip.DrawingConfigurations"/> instance that stores the default preferences
            that decides the drawing behavior.
            </summary>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.RenderTo(System.Drawing.Graphics)">
            <summary>
            To render the image onto the canvas specified as parameter <paramref name="g"/> of type <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="g">The graphics instance as base canvas, offering APIs allowing you doing drawing operations.</param>
            <seealso cref="T:System.Drawing.Graphics"/>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.RenderTo">
            <summary>
            Render the image, with automatically calculation to get the target <see cref="T:System.Drawing.Image"/> instance, and then return it.
            </summary>
            <returns>The default-generated <see cref="T:System.Drawing.Image"/> instance.</returns>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.GetFooterTextRenderingData">
            <summary>
            Gets the rendering data.
            </summary>
            <returns>Rendering data.</returns>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.GetValueById(System.Int32,System.Drawing.Color@)">
            <summary>
            Try to get the result color value.
            </summary>
            <param name="value">The value of ID.</param>
            <param name="result">The result color got.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the ID is invalid.</exception>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.GetColor(Sudoku.Rendering.ColorIdentifier)">
            <summary>
            Gets the color value.
            </summary>
            <param name="id">The identifier instance.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Throws when the specified value is invalid.</exception>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.GetFont(System.String,System.Single,System.Decimal,System.Drawing.FontStyle)">
            <summary>
            Get the font via the specified name, size and the scale.
            </summary>
            <param name="fontName">The font name that decides the font to use and presentation.</param>
            <param name="size">The size that decides the default font size.</param>
            <param name="scale">The scale that decides the result font size.</param>
            <param name="style">The style that decides the font style of the text in the picture.</param>
            <returns>The font.</returns>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="fontName"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.DrawCells(System.Drawing.Graphics)">
            <summary>
            Draw cells.
            </summary>
            <param name="g"><inheritdoc cref="M:Sudoku.Gdip.GridImageGenerator.RenderTo(System.Drawing.Graphics)" path="/param[@name='g']"/></param>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.DrawCandidates(System.Drawing.Graphics)">
            <summary>
            Draw candidates.
            </summary>
            <param name="g"><inheritdoc cref="M:Sudoku.Gdip.GridImageGenerator.RenderTo(System.Drawing.Graphics)" path="/param[@name='g']"/></param>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.DrawHouses(System.Drawing.Graphics)">
            <summary>
            Draw houses.
            </summary>
            <param name="g"><inheritdoc cref="M:Sudoku.Gdip.GridImageGenerator.RenderTo(System.Drawing.Graphics)" path="/param[@name='g']"/></param>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.DrawLinks(System.Drawing.Graphics)">
            <summary>
            Draw links.
            </summary>
            <param name="g"><inheritdoc cref="M:Sudoku.Gdip.GridImageGenerator.RenderTo(System.Drawing.Graphics)" path="/param[@name='g']"/></param>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.DrawChute(System.Drawing.Graphics)">
            <summary>
            Draw chutes.
            </summary>
            <param name="g"><inheritdoc cref="M:Sudoku.Gdip.GridImageGenerator.RenderTo(System.Drawing.Graphics)" path="/param[@name='g']"/></param>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.DrawBabaGrouping(System.Drawing.Graphics)">
            <summary>
            Draw baba grouping values.
            </summary>
            <param name="g"><inheritdoc cref="M:Sudoku.Gdip.GridImageGenerator.RenderTo(System.Drawing.Graphics)" path="/param[@name='g']"/></param>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.DrawView(System.Drawing.Graphics)">
            <summary>
            Draw custom view if <see cref="P:Sudoku.Gdip.GridImageGenerator.View"/> is not <see langword="null"/>.
            </summary>
            <param name="g"><inheritdoc cref="M:Sudoku.Gdip.GridImageGenerator.RenderTo(System.Drawing.Graphics)" path="/param[@name='g']"/></param>
            <seealso cref="P:Sudoku.Gdip.GridImageGenerator.View"/>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.DrawEliminations(System.Drawing.Graphics)">
            <summary>
            Draw eliminations.
            </summary>
            <param name="g"><inheritdoc cref="M:Sudoku.Gdip.GridImageGenerator.RenderTo(System.Drawing.Graphics)" path="/param[@name='g']"/></param>
        </member>
        <member name="M:Sudoku.Gdip.GridImageGenerator.DrawFigure(System.Drawing.Graphics)">
            <summary>
            Draw figures.
            </summary>
            <param name="g"><inheritdoc cref="M:Sudoku.Gdip.GridImageGenerator.RenderTo(System.Drawing.Graphics)" path="/param[@name='g']"/></param>
        </member>
        <member name="T:Sudoku.Gdip.PointCalculator">
            <summary>
            Provides a serial of methods for a point calculator that interacts with the UI projects.
            </summary>
        </member>
        <member name="F:Sudoku.Gdip.PointCalculator.AnchorsCount">
            <summary>
            Indicates the number of anchors hold per house.
            </summary>
            <remarks>
            The sudoku grid painter will draw the outlines and the inner lines, and correct the point
            of each digits (candidates also included). Each row or column always contains 27 candidates,
            so this value is 27.
            </remarks>
        </member>
        <member name="F:Sudoku.Gdip.PointCalculator.DefaultPadding">
            <summary>
            Indicates the default padding of the sudoku grid drawn.
            </summary>
        </member>
        <member name="M:Sudoku.Gdip.PointCalculator.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a <see cref="T:Sudoku.Gdip.PointCalculator"/> instance via the specified picture size and padding value.
            </summary>
            <param name="size">The size of the picture.</param>
            <param name="padding">The padding.</param>
        </member>
        <member name="M:Sudoku.Gdip.PointCalculator.#ctor(System.Drawing.SizeF,System.Single)">
            <summary>
            Initializes a <see cref="T:Sudoku.Gdip.PointCalculator"/> instance with the specified picture size instance and padding value.
            </summary>
            <param name="size">The <see cref="T:System.Drawing.SizeF"/> instance.</param>
            <param name="padding">
            Indicates the padding to set to allow the output items moving a little bit left or right,
            in order to correct the position on drawing. The default value is <c>10F</c>, which is defined by <see cref="F:Sudoku.Gdip.PointCalculator.DefaultPadding"/>
            </param>
            <seealso cref="F:Sudoku.Gdip.PointCalculator.DefaultPadding"/>
        </member>
        <member name="P:Sudoku.Gdip.PointCalculator.Width">
            <summary>
            Indicates the width of the picture to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.PointCalculator.Height">
            <summary>
            Indicates the height of the picture to draw.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.PointCalculator.Padding">
            <summary>
            Indicates the padding of the gap between the picture box outline and the sudoku grid outline.
            </summary>
            <remarks>The default value is <c>10</c>.</remarks>
        </member>
        <member name="P:Sudoku.Gdip.PointCalculator.ControlSize">
            <summary>
            Indicates the control size.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.PointCalculator.GridSize">
            <summary>
            Indicates the grid size.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.PointCalculator.CellSize">
            <summary>
            Indicates the cell size.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.PointCalculator.CandidateSize">
            <summary>
            Indicates the candidate size.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.PointCalculator.GridPoints">
            <summary>
            Indicates the absolutely points in grid cross-lines.
            This property will be assigned later (and not <see langword="null"/>).
            </summary>
            <remarks>Note that the size of this 2D array is always 28 by 28.</remarks>
        </member>
        <member name="M:Sudoku.Gdip.PointCalculator.GetCell(System.Drawing.PointF)">
            <summary>
            Get the focus cell offset via a mouse point.
            </summary>
            <param name="point">The mouse point.</param>
            <returns>The cell offset. Returns -1 when the current point is invalid.</returns>
        </member>
        <member name="M:Sudoku.Gdip.PointCalculator.GetCandidate(System.Drawing.PointF)">
            <summary>
            Get the focus candidate offset via a mouse point.
            </summary>
            <param name="point">The mouse point.</param>
            <returns>The candidate offset.</returns>
        </member>
        <member name="M:Sudoku.Gdip.PointCalculator.GetMouseCenter(Sudoku.Concepts.CandidateMap@)">
            <summary>
            Get the center mouse point of all candidates.
            </summary>
            <param name="map">The map of candidates.</param>
            <returns>The center mouse point.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
        </member>
        <member name="M:Sudoku.Gdip.PointCalculator.GetMouseCenter(Sudoku.Concepts.LockedTarget@)">
            <summary>
            Gets the center mouse point of the specified locked target.
            </summary>
            <param name="lockedTarget">The locked target.</param>
            <returns>The center mouse point.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
        </member>
        <member name="M:Sudoku.Gdip.PointCalculator.GetMouseRectangle(Sudoku.Concepts.CandidateMap@)">
            <summary>
            Get the rectangle from all candidates.
            </summary>
            <param name="map">The candidates.</param>
            <returns>The rectangle.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
        </member>
        <member name="M:Sudoku.Gdip.PointCalculator.GetMouseRectangleViaCell(System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) via the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Gdip.PointCalculator.GetMouseRectangle(System.Int32,System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) for the specified cell and digit of a candidate.
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Gdip.PointCalculator.GetMouseRectangleViaHouse(System.Int32)">
            <summary>
            Get the rectangle (4 mouse points) via the specified house.
            </summary>
            <param name="house">The house.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Sudoku.Gdip.PointCalculator.GetAnchorsViaHouse(System.Int32)">
            <summary>
            Gets two points that specifies and represents the anchors of this house.
            </summary>
            <param name="house">The house.</param>
            <returns>The anchor points.</returns>
        </member>
        <member name="M:Sudoku.Gdip.PointCalculator.GetSharedLinePosition(System.Int32,System.Int32)">
            <summary>
            Gets two points specifies and represents a line as shared border grid lines between two adjacent cells.
            </summary>
            <param name="cell1">The first cell.</param>
            <param name="cell2">The second cell that is adjacent with <paramref name="cell1"/> by row or column.</param>
            <returns>The two points representing with a line.</returns>
        </member>
        <member name="M:Sudoku.Gdip.PointCalculator.GetMousePointInCenter(System.Int32)">
            <summary>
            Get the mouse point of the center of a cell via its offset.
            </summary>
            <param name="cell">The cell offset.</param>
            <returns>The mouse point.</returns>
        </member>
        <member name="M:Sudoku.Gdip.PointCalculator.GetMousePointInCenter(System.Int32,System.Int32)">
            <summary>
            Get the mouse point of the center of a cell via its offset and the digit.
            </summary>
            <param name="cell">The cell offset.</param>
            <param name="digit">The digit.</param>
            <returns>The mouse point.</returns>
        </member>
        <member name="M:Sudoku.Gdip.PointCalculator.GetSharedLinePosition(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc cref="M:Sudoku.Gdip.PointCalculator.GetSharedLinePosition(System.Int32,System.Int32)"/>
            <summary>
            <inheritdoc path="/summary"/>
            </summary>
            <param name="cell1"><inheritdoc path="/param[@name='cell1']"/></param>
            <param name="cell2"><inheritdoc path="/param[@name='cell2']"/></param>
            <param name="borderBarFullyOverlapsGridLine">
            <inheritdoc cref="P:Sudoku.Gdip.DrawingConfigurations.BorderBarFullyOverlapsGridLine" path="/summary"/>
            </param>
            <returns><inheritdoc path="/returns"/></returns>
        </member>
        <member name="T:Sudoku.Gdip.TextRenderingData">
            <summary>
            The inner text rendering data.
            </summary>
            <param name="font">Indicates the font.</param>
            <param name="extraHeight">Indicates the extra height.</param>
            <param name="stringFormat">Indicates the string format.</param>
        </member>
        <member name="M:Sudoku.Gdip.TextRenderingData.#ctor(System.Drawing.Font,System.Single,System.Drawing.StringFormat)">
            <summary>
            The inner text rendering data.
            </summary>
            <param name="font">Indicates the font.</param>
            <param name="extraHeight">Indicates the extra height.</param>
            <param name="stringFormat">Indicates the string format.</param>
        </member>
        <member name="M:Sudoku.Gdip.TextRenderingData.Deconstruct(System.Drawing.Font@,System.Single@,System.Drawing.StringFormat@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
<![CDATA[
public static void Deconstruct(out string name, out int age)
    => (name, age) = (Name, Age);
]]>
						</code>
						The following code will be legal.
						<code>
<![CDATA[
(string name, int age) = student; // Explicitly-typed variables
var (name, age) = student; // Implicitly-typed variables
]]>
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
<![CDATA[
if (student is (name: var name, age: >= 18))
{
    Console.WriteLine(name);
}
]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="M:Sudoku.Gdip.TextRenderingData.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Gdip.TextRenderingData.Font">
            <summary>
            The generated property declaration for parameter <c>font</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.TextRenderingData.ExtraHeight">
            <summary>
            The generated property declaration for parameter <c>extraHeight</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Gdip.TextRenderingData.StringFormat">
            <summary>
            The generated property declaration for parameter <c>stringFormat</c>.
            </summary>
        </member>
        <member name="T:Sudoku.ModuleInitializer">
            <target name="type">
				<summary>
					<para>
						Provides with the type that contains a module initializer method, called automatically by the CLR
						(Common Language Runtime) to initialize some values.
					</para>
					<para>
						<i>
							The type is called by the compiler and the CLR (Common Language Runtime),
							which means you cannot use any members in this type manually.
						</i>
					</para>
				</summary>
			</target>
        </member>
        <member name="M:Sudoku.ModuleInitializer.Initialize">
            <target name="method">
				<summary>
					Called by the runtime automatically while booting on this solution to initialize the values,
					data members or any other things that can or should be initialized here.
				</summary>
				<remarks>
					The concept <b>module</b> is different with <b>assembly</b>.
					The solution can contain multiple assemblies, while each assembly can contain multiple modules.
					However, due to the design of Visual Studio project file system, each assembly will only contain
					one module by default.
				</remarks>
			</target>
        </member>
        <member name="T:Sudoku.Resources.GdipResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.GdipResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.GdipResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Sudoku.Resources.GdipResources.ErrorInfo_CannotGetMapMoreThan1Candidate">
            <summary>
              Looks up a localized string similar to Cannot get at least 1 candidate in the map..
            </summary>
        </member>
        <member name="P:Sudoku.Resources.GdipResources.ErrorInfo_CannotGetMapMoreThan1Cell">
            <summary>
              Looks up a localized string similar to Cannot get at least 1 cell in the map..
            </summary>
        </member>
        <member name="P:Sudoku.Resources.GdipResources.ErrorInfo_FileFormatNotSupported">
            <summary>
              Looks up a localized string similar to The specified file format is not supported..
            </summary>
        </member>
        <member name="P:Sudoku.Resources.GdipResources.ErrorInfo_NoSuchDisplayingColor">
            <summary>
              Looks up a localized string similar to Such displaying color kind is invalid..
            </summary>
        </member>
        <member name="P:Sudoku.Resources.GdipResources.ErrorInfo_NoSuchIdentifier">
            <summary>
              Looks up a localized string similar to Such identifier instance contains invalid value..
            </summary>
        </member>
        <member name="T:System.Drawing.BitmapExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <seealso cref="T:System.Drawing.Bitmap"/>
        </member>
        <member name="M:System.Drawing.BitmapExtensions.ZoomTo(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Zoom a picture.
            </summary>
            <param name="this">The bitmap instance.</param>
            <param name="newWidth">The new width.</param>
            <param name="newHeight">The new height.</param>
            <returns>The new bitmap instance that has been zoomed.</returns>
        </member>
        <member name="T:System.Drawing.ColorExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Drawing.Color"/>.
            </summary>
            <seealso cref="T:System.Drawing.Color"/>
        </member>
        <member name="M:System.Drawing.ColorExtensions.QuarterAlpha(System.Drawing.Color)">
            <summary>
            Gets a target <see cref="T:System.Drawing.Color"/> whose <see cref="P:System.Drawing.Color.A"/> value is a quarter of the original one.
            </summary>
            <param name="this">The original color value.</param>
            <returns>The target result.</returns>
        </member>
        <member name="M:System.Drawing.ColorExtensions.Deconstruct(System.Drawing.Color,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
<![CDATA[
public static void Deconstruct(out string name, out int age)
    => (name, age) = (Name, Age);
]]>
						</code>
						The following code will be legal.
						<code>
<![CDATA[
(string name, int age) = student; // Explicitly-typed variables
var (name, age) = student; // Implicitly-typed variables
]]>
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
<![CDATA[
if (student is (name: var name, age: >= 18))
{
    Console.WriteLine(name);
}
]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="T:System.Drawing.GraphicsExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <seealso cref="T:System.Drawing.Graphics"/>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawValue``1(System.Drawing.Graphics,``0,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)">
            <summary>
            Draw the string representation of an instance onto the current <see cref="T:System.Drawing.Graphics"/> instance.
            </summary>
            <typeparam name="T">The type of the value to draw.</typeparam>
            <param name="this">The graphics instance.</param>
            <param name="value">The value to drawing onto.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="point">The point.</param>
            <param name="stringFormat">The string format instance.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawHollowArrow(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.PointF,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills a hollow arrow.
            </summary>
            <param name="g">The graphics instance.</param>
            <param name="brush">The brush.</param>
            <param name="center">The center point.</param>
            <param name="length">The length.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="angle">The angle.</param>
            <exception cref="T:System.ArgumentException">
            Throws when the argument <paramref name="length"/> is below 0 or either <paramref name="width"/> or <paramref name="height"/> is below 0.
            </exception>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawCrossSign(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draw a cross sign (<c>x</c>).
            </summary>
            <param name="this">The graphics.</param>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
            <remarks>
            This method will draw a cross sign and fill with the specified color, so you don't need
            to find any fill methods.
            </remarks>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawCapsule(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draw a capsule.
            </summary>
            <param name="this">The graphics.</param>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.FillCapsule(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fill a capsule.
            </summary>
            <param name="this">The graphics.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.DrawRoundedRectangle(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF,System.Single)">
            <summary>
            Draw a rounded rectangle.
            </summary>
            <param name="this">The graphics.</param>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle to draw.</param>
            <param name="circleRadius">The radius of each vertex.</param>
            <exception cref="T:System.ArgumentException">
            Throws when <paramref name="circleRadius"/> is greater than the value in
            <paramref name="rectangle"/>.
            </exception>
        </member>
        <member name="M:System.Drawing.GraphicsExtensions.FillRoundedRectangle(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.RectangleF,System.Single)">
            <summary>
            Fill a rounded rectangle.
            </summary>
            <param name="this">The graphics.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle to fill.</param>
            <param name="circleRadius">The radius of each vertex.</param>
            <exception cref="T:System.ArgumentException">
            Throws when <paramref name="circleRadius"/> is greater than the value in
            <paramref name="rectangle"/>.
            </exception>
        </member>
        <member name="T:System.Drawing.PointExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Drawing.Point"/>.
            </summary>
            <seealso cref="T:System.Drawing.Point"/>
        </member>
        <member name="M:System.Drawing.PointExtensions.Deconstruct(System.Drawing.Point,System.Int32@,System.Int32@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
<![CDATA[
public static void Deconstruct(out string name, out int age)
    => (name, age) = (Name, Age);
]]>
						</code>
						The following code will be legal.
						<code>
<![CDATA[
(string name, int age) = student; // Explicitly-typed variables
var (name, age) = student; // Implicitly-typed variables
]]>
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
<![CDATA[
if (student is (name: var name, age: >= 18))
{
    Console.WriteLine(name);
}
]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="T:System.Drawing.PointFExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <seealso cref="T:System.Drawing.PointF"/>
        </member>
        <member name="M:System.Drawing.PointFExtensions.Truncate(System.Drawing.PointF)">
            <summary>
            To truncate the point.
            </summary>
            <param name="this">The point to truncate.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.Drawing.PointFExtensions.Deconstruct(System.Drawing.PointF,System.Single@,System.Single@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
<![CDATA[
public static void Deconstruct(out string name, out int age)
    => (name, age) = (Name, Age);
]]>
						</code>
						The following code will be legal.
						<code>
<![CDATA[
(string name, int age) = student; // Explicitly-typed variables
var (name, age) = student; // Implicitly-typed variables
]]>
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
<![CDATA[
if (student is (name: var name, age: >= 18))
{
    Console.WriteLine(name);
}
]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="T:System.Drawing.RectangleCreator">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <seealso cref="T:System.Drawing.Rectangle"/>
        </member>
        <member name="M:System.Drawing.RectangleCreator.Create(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Create an instance with two points.
            </summary>
            <param name="topLeft">The top-left point.</param>
            <param name="bottomRight">The bottom-right point.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:System.Drawing.RectangleCreator.Create(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Create an instance with two points.
            </summary>
            <param name="topLeft">The top-left point.</param>
            <param name="bottomRight">The bottom-right point.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="T:System.Drawing.RectangleExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <seealso cref="T:System.Drawing.Rectangle"/>
        </member>
        <member name="M:System.Drawing.RectangleExtensions.Zoom(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Zoom in or out the rectangle by the specified offset.
            If the offset is positive, the rectangle will be larger; otherwise, smaller.
            </summary>
            <param name="this">The rectangle.</param>
            <param name="offset">The offset to zoom in or out.</param>
            <returns>The new rectangle.</returns>
        </member>
        <member name="T:System.Drawing.RectangleFExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
            <seealso cref="T:System.Drawing.RectangleF"/>
        </member>
        <member name="M:System.Drawing.RectangleFExtensions.Zoom(System.Drawing.RectangleF,System.Single)">
            <summary>
            Zoom in or out the rectangle by the specified offset.
            If the offset is positive, the rectangle will be larger; otherwise, smaller.
            </summary>
            <param name="this">The rectangle.</param>
            <param name="offset">The offset to zoom in or out.</param>
            <returns>The new rectangle.</returns>
        </member>
        <member name="M:System.Drawing.RectangleFExtensions.Truncate(System.Drawing.RectangleF)">
            <summary>
            Truncate the specified rectangle.
            </summary>
            <param name="this">The rectangle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.Drawing.RectangleFExtensions.Deconstruct(System.Drawing.RectangleF,System.Drawing.PointF@,System.Drawing.SizeF@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
<![CDATA[
public static void Deconstruct(out string name, out int age)
    => (name, age) = (Name, Age);
]]>
						</code>
						The following code will be legal.
						<code>
<![CDATA[
(string name, int age) = student; // Explicitly-typed variables
var (name, age) = student; // Implicitly-typed variables
]]>
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
<![CDATA[
if (student is (name: var name, age: >= 18))
{
    Console.WriteLine(name);
}
]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="M:System.Drawing.RectangleFExtensions.Deconstruct(System.Drawing.RectangleF,System.Single@,System.Single@,System.Single@,System.Single@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
<![CDATA[
public static void Deconstruct(out string name, out int age)
    => (name, age) = (Name, Age);
]]>
						</code>
						The following code will be legal.
						<code>
<![CDATA[
(string name, int age) = student; // Explicitly-typed variables
var (name, age) = student; // Implicitly-typed variables
]]>
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
<![CDATA[
if (student is (name: var name, age: >= 18))
{
    Console.WriteLine(name);
}
]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="T:System.Drawing.SizeExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Drawing.Size"/>.
            </summary>
            <seealso cref="T:System.Drawing.Size"/>
        </member>
        <member name="M:System.Drawing.SizeExtensions.Deconstruct(System.Drawing.Size,System.Int32@,System.Int32@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
<![CDATA[
public static void Deconstruct(out string name, out int age)
    => (name, age) = (Name, Age);
]]>
						</code>
						The following code will be legal.
						<code>
<![CDATA[
(string name, int age) = student; // Explicitly-typed variables
var (name, age) = student; // Implicitly-typed variables
]]>
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
<![CDATA[
if (student is (name: var name, age: >= 18))
{
    Console.WriteLine(name);
}
]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="T:System.Drawing.SizeFExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Drawing.SizeF"/>.
            </summary>
            <seealso cref="T:System.Drawing.SizeF"/>
        </member>
        <member name="M:System.Drawing.SizeFExtensions.Truncate(System.Drawing.SizeF)">
            <summary>
            To truncate the size.
            </summary>
            <param name="this">The size.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.Drawing.SizeFExtensions.Deconstruct(System.Drawing.SizeF,System.Single@,System.Single@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
<![CDATA[
public static void Deconstruct(out string name, out int age)
    => (name, age) = (Name, Age);
]]>
						</code>
						The following code will be legal.
						<code>
<![CDATA[
(string name, int age) = student; // Explicitly-typed variables
var (name, age) = student; // Implicitly-typed variables
]]>
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
<![CDATA[
if (student is (name: var name, age: >= 18))
{
    Console.WriteLine(name);
}
]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
    </members>
</doc>
