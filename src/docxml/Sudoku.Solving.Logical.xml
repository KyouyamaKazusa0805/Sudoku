<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Solving.Logical</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Buffers.FastProperties">
            <summary>
            Provides and encapsulates the fast properties that is used in solving and analyzing a sudoku puzzle.
            </summary>
            <remarks>
            <para>
            The whole class is a <see langword="static"/> one, which means you can't use <see langword="new"/>
            clause to create a new instance of this type. In contrast, the class is used for providing with
            <see langword="static"/> properties used in a cyclic manually searching
            (i.e. in <see cref="T:Sudoku.Solving.Logical.LogicalSolver"/>).
            </para>
            <para>
            Some step searchers rely on this type. If you want to call them separately, you should ensure the method
            <see cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/> in this type must be called before using these properties.
            </para>
            <para>
            If a step searcher doesn't rely on this class, it'll be <see langword="true"/> for the property named
            <see cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsDirect"/>.
            If you find that the step searcher marks that attribute,
            you can call it everywhere safely; however, if the searcher isn't marked that attribute, you
            can't call it everywhere unless you call the method <see cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/>.
            </para>
            <para>
            Please note, all names of properties in this class can also be found in <see cref="T:Sudoku.Concepts.Grid"/>,
            which means you can also call the property by <see cref="T:Sudoku.Concepts.Grid"/>. Of course, some of them
            doesn't contain the same one in <see cref="T:Sudoku.Concepts.Grid"/>, but you can find a same property whose
            execution logic (handling logic) is totally same.
            For example, <see cref="P:Sudoku.Buffers.FastProperties.EmptyCells"/> is same as <see cref="P:Sudoku.Concepts.Grid.EmptyCells"/>. The difference
            between them is that you shouldn't use <see cref="P:Sudoku.Buffers.FastProperties.EmptyCells"/> until you have called
            <see cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/>, while <see cref="P:Sudoku.Concepts.Grid.EmptyCells"/> can be used
            everywhere, because it isn't an instant property (which means the calculation begins
            when you called them, i.e. lazy ones; in contrast, some properties only store values directly,
            so their values can be got instantly, i.e. instant ones).
            </para>
            </remarks>
            <seealso cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/>
            <seealso cref="T:Sudoku.Solving.Logical.LogicalSolver"/>
            <seealso cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsDirect"/>
            <seealso cref="T:Sudoku.Concepts.Grid"/>
        </member>
        <member name="P:Sudoku.Buffers.FastProperties.EmptyCells">
            <summary>
            <inheritdoc cref="P:Sudoku.Concepts.Grid.EmptyCells"/>
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsDirect"/>.
            </remarks>
            <seealso cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/>
            <seealso cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsDirect"/>
        </member>
        <member name="P:Sudoku.Buffers.FastProperties.BivalueCells">
            <summary>
            <inheritdoc cref="P:Sudoku.Concepts.Grid.BivalueCells"/>
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsDirect"/>.
            </remarks>
            <seealso cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/>
            <seealso cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsDirect"/>
        </member>
        <member name="P:Sudoku.Buffers.FastProperties.CandidatesMap">
            <summary>
            <inheritdoc cref="P:Sudoku.Concepts.Grid.CandidatesMap"/>
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsDirect"/>.
            </remarks>
            <seealso cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/>
            <seealso cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsDirect"/>
        </member>
        <member name="P:Sudoku.Buffers.FastProperties.DigitsMap">
            <summary>
            <inheritdoc cref="P:Sudoku.Concepts.Grid.DigitsMap"/>
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsDirect"/>.
            </remarks>
            <seealso cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/>
            <seealso cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsDirect"/>
        </member>
        <member name="P:Sudoku.Buffers.FastProperties.ValuesMap">
            <summary>
            <inheritdoc cref="P:Sudoku.Concepts.Grid.ValuesMap"/>
            </summary>
            <remarks>
            This map <b>should</b> be used after <see cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/> called, and you<b>'d better</b>
            not use this field on instances which are marked the attribute
            <see cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsDirect"/>.
            </remarks>
            <seealso cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/>
            <seealso cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsDirect"/>
        </member>
        <member name="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)">
            <summary>
            Initialize the maps that used later.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="T:Sudoku.Buffers.StepSearcherPool">
            <summary>
            Indicates a pool that stores a <see cref="T:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection"/> instance.
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection"/>
        </member>
        <member name="F:Sudoku.Buffers.StepSearcherPool.Collection">
            <summary>
            The step searchers to find steps to apply to a certain puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.Buffers.StepSearcherPool.DefaultCollection(System.Boolean)">
            <summary>
            Gets the default collection of step searchers via reflection.
            </summary>
            <param name="separated">
            <para><inheritdoc cref="M:Sudoku.Buffers.StepSearcherPool.GetStepSearchers(System.Type,System.Boolean)" path="/param[@name='separated']"/></para>
            <para>The default value is <see langword="true"/>.</para>
            </param>
        </member>
        <member name="M:Sudoku.Buffers.StepSearcherPool.GetStepSearchers(System.Type,System.Boolean)">
            <summary>
            Try to create an array of <see cref="T:Sudoku.Solving.Logical.IStepSearcher"/>s via the specified step searcher type.
            </summary>
            <param name="type">The type.</param>
            <param name="separated">
            Indicates whether the step searcher will be considered as separated one.
            If <see langword="true"/>, the method will check for <see cref="T:Sudoku.Solving.Logical.Annotations.SeparatedStepSearcherAttribute"/>, getting all instances,
            and returning all created <see cref="T:Sudoku.Solving.Logical.IStepSearcher"/>s via the data of that attribute defined;
            otherwise, only one instance will be returned.
            </param>
            <returns>A collection of <see cref="T:Sudoku.Solving.Logical.IStepSearcher"/>s.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the internal initialization data is invalid.</exception>
            <seealso cref="T:Sudoku.Solving.Logical.IStepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Logical.Annotations.SeparatedStepSearcherAttribute"/>
        </member>
        <member name="T:Sudoku.Collections.Logical.NodeList">
            <summary>
            Defines a list of <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> using doubly linked list as the backing algorithm.
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/>
        </member>
        <member name="M:Sudoku.Collections.Logical.NodeList.#ctor">
            <summary>
            Creates a <see cref="T:Sudoku.Collections.Logical.NodeList"/> instance.
            </summary>
        </member>
        <member name="M:Sudoku.Collections.Logical.NodeList.#ctor(System.Collections.Generic.IEnumerable{Sudoku.Solving.Logical.Patterns.ChainNode})">
            <summary>
            Creates a <see cref="T:Sudoku.Collections.Logical.NodeList"/> instance via the specified <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> instances.
            </summary>
            <param name="potentials">The base <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> values.</param>
        </member>
        <member name="M:Sudoku.Collections.Logical.NodeList.RemoveFirst">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.LinkedList`1.RemoveFirst" path="/summary"/>
            </summary>
            <returns>The value of the first node removed.</returns>
        </member>
        <member name="T:Sudoku.Collections.Logical.NodeSet">
            <summary>
            Defines a <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> collection using <see cref="T:System.Collections.Generic.HashSet`1"/> as backing implementation.
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/>
        </member>
        <member name="M:Sudoku.Collections.Logical.NodeSet.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Collections.Logical.NodeSet"/> instance.
            </summary>
        </member>
        <member name="M:Sudoku.Collections.Logical.NodeSet.#ctor(Sudoku.Collections.Logical.NodeSet)">
            <summary>
            Initializes a <see cref="T:Sudoku.Collections.Logical.NodeSet"/> instance via the specified <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> collection to be added.
            </summary>
            <param name="base">The collection of <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> instances.</param>
        </member>
        <member name="M:Sudoku.Collections.Logical.NodeSet.Contains(Sudoku.Solving.Logical.Patterns.ChainNode)">
            <summary>
            Determines whether a <see cref="T:Sudoku.Collections.Logical.NodeSet"/> object contains the specified element,
            comparing for properties <see cref="P:Sudoku.Solving.Logical.Patterns.ChainNode.Candidate"/> and <see cref="P:Sudoku.Solving.Logical.Patterns.ChainNode.IsOn"/>.
            </summary>
            <param name="base">The element to locate in the <see cref="T:Sudoku.Collections.Logical.NodeSet"/> object.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:Sudoku.Collections.Logical.NodeSet"/> object contains the specified element; otherwise, <see langword="false"/>.
            </returns>
            <seealso cref="P:Sudoku.Solving.Logical.Patterns.ChainNode.Candidate"/>
            <seealso cref="P:Sudoku.Solving.Logical.Patterns.ChainNode.IsOn"/>
        </member>
        <member name="M:Sudoku.Collections.Logical.NodeSet.GetNullable(Sudoku.Solving.Logical.Patterns.ChainNode)">
            <summary>
            <para>
            Try to get the target <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> instance whose internal value
            (i.e. properties <see cref="P:Sudoku.Solving.Logical.Patterns.ChainNode.Candidate"/> and <see cref="P:Sudoku.Solving.Logical.Patterns.ChainNode.IsOn"/>) are same as
            the specified one.
            </para>
            <para>
            Please note that this method will return an instance inside the current collection
            whose value equals to the specified one; however, property <see cref="P:Sudoku.Solving.Logical.Patterns.ChainNode.Parents"/> may not be equal.
            </para>
            </summary>
            <param name="base">The value to be checked.</param>
            <returns>
            <para>
            The found value whose value is equal to <paramref name="base"/>; without checking for property <see cref="P:Sudoku.Solving.Logical.Patterns.ChainNode.Parents"/>.
            </para>
            <para>If none found, <see langword="null"/> will be returned.</para>
            </returns>
            <seealso cref="P:Sudoku.Solving.Logical.Patterns.ChainNode.Candidate"/>
            <seealso cref="P:Sudoku.Solving.Logical.Patterns.ChainNode.IsOn"/>
        </member>
        <member name="M:Sudoku.Collections.Logical.NodeSet.op_BitwiseAnd(Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet)">
            <summary>
            Gets the <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode" /> instances that both <paramref name="left" /> and <paramref name="right" /> contain,
            and modifies the argument <paramref name="left" />, replacing it with <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode" />s mentioned above,
            then returns it.
            </summary>
            <param name="left">The first collection to be participated in merging operation.</param>
            <param name="right">The second collection to be participated in merging operation.</param>
            <returns>Modified collection <paramref name="left" />.</returns>
            <remarks>
            <requires-compound-invocation>
		<para>
			<b>
				<i>
					This operator can only be used as compound one. For example:
				</i>
			</b>
			<code>
<![CDATA[
result &= expression;
result |= expression;
result ^= expression;
]]>
			</code>
		</para>
	</requires-compound-invocation>
            </remarks>
        </member>
        <member name="M:Sudoku.Collections.Logical.NodeSet.op_BitwiseOr(Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet)">
            <summary>
            Gets the <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode" /> instances that comes from both collections <paramref name="left" /> and <paramref name="right" />,
            and modifies the argument <paramref name="left" />, replacing it with <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode" />s mentioned above,
            then returns it.
            </summary>
            <param name="left">The first collection to be participated in merging operation.</param>
            <param name="right">The second collection to be participated in merging operation.</param>
            <returns>Modified collection <paramref name="left" />.</returns>
            <remarks>
            <requires-compound-invocation>
		<para>
			<b>
				<i>
					This operator can only be used as compound one. For example:
				</i>
			</b>
			<code>
<![CDATA[
result &= expression;
result |= expression;
result ^= expression;
]]>
			</code>
		</para>
	</requires-compound-invocation>
            </remarks>
        </member>
        <member name="M:Sudoku.Collections.Logical.NodeSet.op_ExclusiveOr(Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet)">
            <summary>
            Gets the <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode" /> instances that only one collection in <paramref name="left" /> and <paramref name="right" /> contains,
            and modifies the argument <paramref name="left" />, replacing it with <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode" />s mentioned above,
            then returns it.
            </summary>
            <param name="left">The first collection to be participated in merging operation.</param>
            <param name="right">The second collection to be participated in merging operation.</param>
            <returns>Modified collection <paramref name="left" />.</returns>
            <remarks>
            <requires-compound-invocation>
		<para>
			<b>
				<i>
					This operator can only be used as compound one. For example:
				</i>
			</b>
			<code>
<![CDATA[
result &= expression;
result |= expression;
result ^= expression;
]]>
			</code>
		</para>
	</requires-compound-invocation>
            </remarks>
        </member>
        <member name="T:Sudoku.Collections.Logical.EqualityComparer">
            <summary>
            Defines an equality comparer that compares to <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> instances.
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/>
        </member>
        <member name="F:Sudoku.Collections.Logical.EqualityComparer.Instance">
            <summary>
            Indicates the singleton instance.
            </summary>
        </member>
        <member name="M:Sudoku.Collections.Logical.EqualityComparer.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Collections.Logical.EqualityComparer"/> instance.
            </summary>
        </member>
        <member name="M:Sudoku.Collections.Logical.EqualityComparer.Equals(Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Collections.Logical.EqualityComparer.GetHashCode(Sudoku.Solving.Logical.Patterns.ChainNode)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Compatibility.Hodoku.HodokuLibraryCompatiblity">
            <summary>
            Represents some methods that are used for get the details supported and defined
            by another program called <see href="https://sourceforge.net/projects/hodoku/">Hodoku</see>.
            </summary>
        </member>
        <member name="P:Sudoku.Compatibility.Hodoku.HodokuLibraryCompatiblity.ProgramName">
            <inheritdoc cref="P:Sudoku.Compatibility.ICompatibilityProvider.ProgramName"/>
        </member>
        <member name="M:Sudoku.Compatibility.Hodoku.HodokuLibraryCompatiblity.GetAliases(Sudoku.Solving.Logical.Techniques.Technique)">
            <summary>
            Gets all possible aliased names that are defined by Hodoku.
            </summary>
            <param name="this">The technique.</param>
            <returns>
            The array of aliased names, or <see langword="null"/> if it is not defined by Hodoku.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the specified value is not defined by the type <see cref="T:Sudoku.Solving.Logical.Techniques.Technique"/>,
            or the value is <see cref="F:Sudoku.Solving.Logical.Techniques.Technique.None"/>.
            </exception>
            <seealso cref="T:Sudoku.Solving.Logical.Techniques.Technique"/>
        </member>
        <member name="M:Sudoku.Compatibility.Hodoku.HodokuLibraryCompatiblity.GetHodokuPrefix(Sudoku.Solving.Logical.Techniques.Technique)">
            <summary>
            Try to get the prefix of the specified technique. The return value will be a four-digit value
            represented as a <see cref="T:System.String"/> value. For more information please visit
            <see href="https://sourceforge.net/p/hodoku/code/HEAD/tree/HoDoKu/trunk/reglib-1.4.txt">this link</see>.
            </summary>
            <param name="this">The technique.</param>
            <returns>
            <para>
            A <see cref="T:System.String"/> value using a four-digit value to describe a technique used
            in a sudoku grid, which is defined by the project Hodoku.
            </para>
            <para>
            If this technique is not supported by Hodoku, <see langword="null"/> will be returned.
            </para>
            </returns>
            <remarks>
            <para>
            Please note that some technique fields are separated into multiple sub-types, but they all
            belong to a same type of a technique supported by Hodoku. For example,
            <see cref="F:Sudoku.Solving.Logical.Techniques.Technique.SueDeCoq"/> and <see cref="F:Sudoku.Solving.Logical.Techniques.Technique.SueDeCoqIsolated"/> are supported by
            Hodoku as one technique "Sue de Coq", so if you get the prefix from the two fields, the return value
            are same (i.e. the <see cref="T:System.String"/> value <c>"1101"</c>).
            </para>
            <para>
            However, if a sub-type is not supported by Hodoku (e.g. the field
            <see cref="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle2B1"/>), this method will still return <see langword="null"/>
            indicating the "Not supported" state.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the specified value is not defined by the type <see cref="T:Sudoku.Solving.Logical.Techniques.Technique"/>,
            or the value is <see cref="F:Sudoku.Solving.Logical.Techniques.Technique.None"/>.
            </exception>
            <seealso cref="T:Sudoku.Solving.Logical.Techniques.Technique"/>
        </member>
        <member name="M:Sudoku.Compatibility.Hodoku.HodokuLibraryCompatiblity.GetDifficultyRating(Sudoku.Solving.Logical.Techniques.Technique,System.Nullable{Sudoku.Compatibility.Hodoku.HodokuDifficultyLevel}@)">
            <summary>
            Try to get difficulty rating of the specified technique.
            </summary>
            <param name="this">The technique.</param>
            <param name="difficultyLevel">The difficulty level that is defined by Hodoku.</param>
            <returns>
            <para>
            An <see cref="T:System.Int32"/> value defined by the project Hodoku.
            </para>
            <para>
            If this technique is not supported by Hodoku, <see langword="null"/> will be returned.
            </para>
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the specified value is not defined by the type <see cref="T:Sudoku.Solving.Logical.Techniques.Technique"/>,
            or the value is <see cref="F:Sudoku.Solving.Logical.Techniques.Technique.None"/>.
            </exception>
            <seealso cref="T:Sudoku.Solving.Logical.Techniques.Technique"/>
        </member>
        <member name="T:Sudoku.Compatibility.ICompatibilityProvider">
            <summary>
            Provides a way to provide compatibility items (concepts, solving ways, etc.)
            to a program that also analyzes sudoku puzzles.
            </summary>
        </member>
        <member name="P:Sudoku.Compatibility.ICompatibilityProvider.ProgramName">
            <summary>
            Indicates the program name of the current provider to be compatible.
            </summary>
        </member>
        <member name="T:Sudoku.Compatibility.SudokuExplainer.SudokuExplainerLibraryCompatiblity">
            <summary>
            Represents some methods that are used for get the details supported and defined
            by another program called
            <see href="http://diuf.unifr.ch/pai/people/juillera/Sudoku/Sudoku.html">Sudoku Explainer</see> (Broken link).
            </summary>
        </member>
        <member name="P:Sudoku.Compatibility.SudokuExplainer.SudokuExplainerLibraryCompatiblity.ProgramName">
            <inheritdoc cref="P:Sudoku.Compatibility.ICompatibilityProvider.ProgramName"/>
        </member>
        <member name="M:Sudoku.Compatibility.SudokuExplainer.SudokuExplainerLibraryCompatiblity.GetAliases(Sudoku.Solving.Logical.Techniques.Technique)">
            <summary>
            Gets all possible aliased names that are defined by Sudoku Explainer.
            </summary>
            <param name="this">The technique.</param>
            <returns>
            The array of aliased names, or <see langword="null"/> if it is not defined by Sudoku Explainer.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the specified value is not defined by the type <see cref="T:Sudoku.Solving.Logical.Techniques.Technique"/>,
            or the value is <see cref="F:Sudoku.Solving.Logical.Techniques.Technique.None"/>.
            </exception>
            <seealso cref="T:Sudoku.Solving.Logical.Techniques.Technique"/>
        </member>
        <member name="M:Sudoku.Compatibility.SudokuExplainer.SudokuExplainerLibraryCompatiblity.GetDifficultyRatingRange(Sudoku.Solving.Logical.Techniques.Technique)">
            <summary>
            Try to get difficulty rating of the specified technique.
            </summary>
            <param name="this">The technique.</param>
            <returns>
            <para>
            An <see cref="T:System.Int32"/> value defined by the project Sudoku Explainer.
            </para>
            <para>
            If this technique is not supported by Sudoku Explainer, <see langword="null"/> will be returned.
            </para>
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the specified value is not defined by the type <see cref="T:Sudoku.Solving.Logical.Techniques.Technique"/>,
            or the value is <see cref="F:Sudoku.Solving.Logical.Techniques.Technique.None"/>.
            </exception>
            <seealso cref="T:Sudoku.Solving.Logical.Techniques.Technique"/>
        </member>
        <member name="T:Sudoku.Filtering.Expressions.ConclusionHasExpression">
            <summary>
            Defines the backing implementation of <c><see langword="has"/></c> operator.
            </summary>
        </member>
        <member name="M:Sudoku.Filtering.Expressions.ConclusionHasExpression.#ctor(Expressive.Expressions.IExpression,Expressive.Expressions.IExpression,Expressive.Context)">
            <summary>
            Initializes a <see cref="T:Sudoku.Filtering.Expressions.ConclusionHasExpression"/> instance via two expressions, and the inner handling context.
            </summary>
            <param name="left">The left-side expression.</param>
            <param name="right">The right-side expression.</param>
            <param name="context">The inner handling context.</param>
        </member>
        <member name="M:Sudoku.Filtering.Expressions.ConclusionHasExpression.EvaluateImpl(System.Object,Expressive.Expressions.IExpression,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Filtering.Expressions.CountConclusionExpression">
            <summary>
            Defines the backing implementation of <c><see langword="count"/></c> operator.
            </summary>
        </member>
        <member name="M:Sudoku.Filtering.Expressions.CountConclusionExpression.#ctor(Expressive.Expressions.IExpression)">
            <summary>
            Initializes a <see cref="T:Sudoku.Filtering.Expressions.ConclusionHasExpression"/> instance via an expression.
            </summary>
            <param name="expression">The operated expression.</param>
        </member>
        <member name="M:Sudoku.Filtering.Expressions.CountConclusionExpression.Evaluate(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Filtering.Expressions.NameLikeExpression">
            <summary>
            Defines the backing implementation of <c><see langword="like"/></c> operator.
            </summary>
        </member>
        <member name="M:Sudoku.Filtering.Expressions.NameLikeExpression.#ctor(Expressive.Expressions.IExpression,Expressive.Expressions.IExpression,Expressive.Context)">
            <summary>
            Initializes a <see cref="T:Sudoku.Filtering.Expressions.NameLikeExpression"/> instance via two expressions, and the inner handling context.
            </summary>
            <param name="left">The left-side expression.</param>
            <param name="right">The right-side expression.</param>
            <param name="context">The inner handling context.</param>
        </member>
        <member name="M:Sudoku.Filtering.Expressions.NameLikeExpression.EvaluateImpl(System.Object,Expressive.Expressions.IExpression,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Filtering.Expressions.UnaryExpressionBase">
            <summary>
            Base class implementation of <see cref="T:Expressive.Expressions.IExpression"/>.
            </summary>
            <seealso cref="T:Expressive.Expressions.IExpression"/>
        </member>
        <member name="F:Sudoku.Filtering.Expressions.UnaryExpressionBase._expression">
            <summary>
            The inner expression.
            </summary>
        </member>
        <member name="M:Sudoku.Filtering.Expressions.UnaryExpressionBase.#ctor(Expressive.Expressions.IExpression)">
            <summary>
            Initializes a new instance of <see cref="T:Sudoku.Filtering.Expressions.UnaryExpressionBase"/>.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Sudoku.Filtering.Expressions.UnaryExpressionBase.Evaluate(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Filtering.Operators.ConclusionHasOperator">
            <summary>
            Indicates the conclusion matching operator <c>has</c>.
            The expected usage is like <c>conclusion has 'r3c4'</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Filtering.Operators.ConclusionHasOperator.Instance">
            <summary>
            Indicates the singleton instance.
            </summary>
        </member>
        <member name="M:Sudoku.Filtering.Operators.ConclusionHasOperator.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Filtering.Operators.ConclusionHasOperator"/> instance.
            </summary>
        </member>
        <member name="P:Sudoku.Filtering.Operators.ConclusionHasOperator.Tags">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Filtering.Operators.ConclusionHasOperator.BuildExpression(Expressive.Token,Expressive.Expressions.IExpression[],Expressive.Context)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Filtering.Operators.ConclusionHasOperator.GetPrecedence(Expressive.Token)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Filtering.Operators.CountConclusionOperator">
            <summary>
            Indicates the counter operator <c>count</c> to total up the number of conclusions in a single technique step.
            The expected usage is like <c>count conclusion</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Filtering.Operators.CountConclusionOperator.Instance">
            <summary>
            Indicates the singleton instance.
            </summary>
        </member>
        <member name="M:Sudoku.Filtering.Operators.CountConclusionOperator.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Filtering.Operators.CountConclusionOperator"/> instance.
            </summary>
        </member>
        <member name="P:Sudoku.Filtering.Operators.CountConclusionOperator.Tags">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Filtering.Operators.CountConclusionOperator.BuildExpression(Expressive.Token,Expressive.Expressions.IExpression[],Expressive.Context)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Filtering.Operators.CountConclusionOperator.GetPrecedence(Expressive.Token)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Filtering.Operators.NameLikeOperator">
            <summary>
            Indicates the name matching operator <c>like</c>.
            The expected usage is like <c>name like 'Unique\s+Rectangle.*'</c>.
            </summary>
        </member>
        <member name="F:Sudoku.Filtering.Operators.NameLikeOperator.Instance">
            <summary>
            Indicates the singleton instance.
            </summary>
        </member>
        <member name="M:Sudoku.Filtering.Operators.NameLikeOperator.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Filtering.Operators.NameLikeOperator"/> instance.
            </summary>
        </member>
        <member name="P:Sudoku.Filtering.Operators.NameLikeOperator.Tags">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Filtering.Operators.NameLikeOperator.BuildExpression(Expressive.Token,Expressive.Expressions.IExpression[],Expressive.Context)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Filtering.Operators.NameLikeOperator.GetPrecedence(Expressive.Token)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Filtering.TechniqueFiltering">
            <summary>
            Defines a way that is used for filtering the gathered step.
            </summary>
            <remarks>
            Supported expressions:
            <list type="bullet">
            <item><c><see langword="rating"/> (<![CDATA[>]]>,<![CDATA[>=]]>,<![CDATA[<]]>,<![CDATA[<=]]>,<![CDATA[==]]>,<![CDATA[!=]]>) (value)</c></item>
            <item><c><see langword="name"/> (<![CDATA[==]]>,<![CDATA[!=]]>) (technique-name)</c></item>
            <item><c><see langword="name"/> <see langword="like"/> (pattern)</c></item>
            <item><c><see langword="conclusion"/> (<![CDATA[==]]>,<![CDATA[!=]]>) (conclusion)</c></item>
            <item><c><see langword="conclusion"/> <see langword="has"/> (coordinate)</c></item>
            <item><c><see langword="count"/> <see langword="conclusion"/> (<![CDATA[>]]>,<![CDATA[>=]]>,<![CDATA[<]]>,<![CDATA[<=]]>,<![CDATA[==]]>,<![CDATA[!=]]>) (count)</c></item>
            </list>
            </remarks>
        </member>
        <member name="F:Sudoku.Filtering.TechniqueFiltering.RatingKeyword">
            <summary>
            Indicates the rating keyword.
            </summary>
        </member>
        <member name="F:Sudoku.Filtering.TechniqueFiltering.NameKeyword">
            <summary>
            Indicates the name keyword.
            </summary>
        </member>
        <member name="F:Sudoku.Filtering.TechniqueFiltering.ConclusionKeyword">
            <summary>
            Indicates the conclusion keyword.
            </summary>
        </member>
        <member name="M:Sudoku.Filtering.TechniqueFiltering.Filter(System.Collections.Generic.IEnumerable{Sudoku.Solving.Logical.IStep},System.String)">
            <summary>
            Filters some invalid steps.
            </summary>
            <param name="steps">The found steps.</param>
            <param name="conditionString">The condition.</param>
            <exception cref="T:Expressive.Exceptions.ExpressiveException">Throws when the expression being evaluated is invalid.</exception>
        </member>
        <member name="M:Sudoku.Filtering.TechniqueFiltering.Parse(System.String,Sudoku.Solving.Logical.IStep)">
            <summary>
            To parse a condition string, converting the string into a valid <see cref="T:Expressive.Expression"/> instance.
            </summary>
            <param name="conditionString">The condition string.</param>
            <param name="step">The step used.</param>
            <returns>The <see cref="T:Expressive.Expression"/> instance.</returns>
        </member>
        <member name="M:Sudoku.Filtering.TechniqueFiltering.KeywordPattern">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match with 3 alternative expressions, atomically.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [Rr].<br/>
                        ○ Match a character in the set [Aa].<br/>
                        ○ Match a character in the set [Tt].<br/>
                        ○ Match a character in the set [Ii].<br/>
                        ○ Match a character in the set [Nn].<br/>
                        ○ Match a character in the set [Gg].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [Nn].<br/>
                        ○ Match a character in the set [Aa].<br/>
                        ○ Match a character in the set [Mm].<br/>
                        ○ Match a character in the set [Ee].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [Cc].<br/>
                        ○ Match a character in the set [Oo].<br/>
                        ○ Match a character in the set [Nn].<br/>
                        ○ Match a character in the set [Cc].<br/>
                        ○ Match a character in the set [Ll].<br/>
                        ○ Match a character in the set [Uu].<br/>
                        ○ Match a character in the set [Ss].<br/>
                        ○ Match a character in the set [Ii].<br/>
                        ○ Match a character in the set [Oo].<br/>
                        ○ Match a character in the set [Nn].<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Sudoku.Linq.CellEnumerable">
            <summary>
            Provides with extension methods on <see cref="T:Sudoku.Concepts.CellMap"/> type, around LINQ.
            </summary>
            <seealso cref="T:Sudoku.Concepts.CellMap"/>
        </member>
        <member name="M:Sudoku.Linq.CellEnumerable.Select``1(Sudoku.Concepts.CellMap@,System.Func{System.Int32,``0})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TResult">
            The type of the value returned by <paramref name="selector"/>.
            This type must be an <see langword="unmanaged"/> type in order to make optimization
            in the future release of C# versions.
            </typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            A <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> of <typeparamref name="TResult"/> whose elements are the result
            of invoking the transform function on each element of <paramref name="source"/>.
            </returns>
        </member>
        <member name="T:Sudoku.Linq.GridEnumerable">
            <summary>
            Provides with extension methods on <see cref="T:Sudoku.Concepts.Grid"/> type, around LINQ.
            </summary>
            <seealso cref="T:Sudoku.Concepts.Grid"/>
        </member>
        <member name="M:Sudoku.Linq.GridEnumerable.Select``1(Sudoku.Concepts.Grid@,System.Func{System.Int32,``0})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TResult">
            The type of the value returned by <paramref name="selector"/>.
            This type must be an <see langword="unmanaged"/> type in order to make optimization
            in the future release of C# versions.
            </typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            A <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> of <typeparamref name="TResult"/> whose elements are the result
            of invoking the transform function on each element of <paramref name="source"/>.
            </returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.ModuleInitializer">
            <target name="type">
				<summary>
					<para>
						Provides with the type that contains a module initializer method, called automatically by the CLR
						(Common Language Runtime) to initialize some values.
					</para>
					<para>
						<i>
							The type is called by the compiler and the CLR (Common Language Runtime),
							which means you cannot use any members in this type manually.
						</i>
					</para>
				</summary>
			</target>
        </member>
        <member name="M:Sudoku.Solving.Logical.ModuleInitializer.Initialize">
            <target name="method">
				<summary>
					Called by the runtime automatically while booting on this solution to initialize the values,
					data members or any other things that can or should be initialized here.
				</summary>
				<remarks>
					The concept <b>module</b> is different with <b>assembly</b>.
					The solution can contain multiple assemblies, while each assembly can contain multiple modules.
					However, due to the design of Visual Studio project file system, each assembly will only contain
					one module by default.
				</remarks>
			</target>
        </member>
        <member name="T:Sudoku.Solving.Logical.Annotations.AlgorithmTooSlowAttribute">
            <summary>
            Defines an attribute annotation that can be applied to a step searcher type,
            indicating an algorithm chosen for a step searcher is too slow.
            </summary>
            <remarks>
            This attribute can be ignored when a logical solver enables them regardless of execution speed.
            </remarks>
        </member>
        <member name="T:Sudoku.Solving.Logical.Annotations.SearcherConfigurationAttribute`1">
            <summary>
            Defines an attribute that can be applied to the solving assembly,
            to tell the source generator that the searcher option instance will be generated in the specified type.
            </summary>
            <typeparam name="T">The type of the step searcher.</typeparam>
        </member>
        <member name="M:Sudoku.Solving.Logical.Annotations.SearcherConfigurationAttribute`1.#ctor(Sudoku.Runtime.AnalysisServices.SearcherDisplayingLevel)">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Logical.Annotations.SearcherConfigurationAttribute`1"/> instance
            via the specified displaying level.
            </summary>
            <param name="displayingLevel">The displaying level.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Annotations.SearcherConfigurationAttribute`1.Priority">
            <summary>
            Indicates the priority of the step searcher. The priority value must be unique,
            which means that different step searchers must hold different priority values.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Annotations.SearcherConfigurationAttribute`1.DisplayingLevel">
            <summary>
            Indicates the level of the step searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Annotations.SearcherConfigurationAttribute`1.EnabledArea">
            <summary>
            Indicates the area that the step searcher can be used and available.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Annotations.SearcherConfigurationAttribute`1.DisabledReason">
            <summary>
            Indicates why the step searcher is disabled, which means the property <see cref="P:Sudoku.Solving.Logical.Annotations.SearcherConfigurationAttribute`1.EnabledArea"/>
            is <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea.None"/>.
            </summary>
            <seealso cref="F:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea.None"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Annotations.SeparatedStepSearcherAttribute">
            <summary>
            Defines an attribute that applies to an instance having implemented <see cref="T:Sudoku.Solving.Logical.IStepSearcher"/>,
            to create the options that will be used by the module initializer.
            </summary>
            <remarks>
            Please note that the attribute is optional, which means you don't need to use the attribute
            on all step searchers.
            </remarks>
            <seealso cref="T:Sudoku.Solving.Logical.IStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Annotations.SeparatedStepSearcherAttribute.#ctor(System.Int32,System.Object[])">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Logical.Annotations.SeparatedStepSearcherAttribute"/> instance via the specified array
            of element type <see cref="T:System.Object"/>, indicating the property names and their values.
            </summary>
            <param name="priority">Indicates the priority that will be used for the ordering.</param>
            <param name="propertyNamesAndValues">The array of property names and their values.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Annotations.SeparatedStepSearcherAttribute.Priority">
            <summary>
            Indicates the priority value that will be used for the ordering.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Annotations.SeparatedStepSearcherAttribute.PropertyNamesAndValues">
            <summary>
            Indicates the property names and the values.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Annotations.StepSearcherAttribute">
            <summary>
            To mark onto a step searcher, to tell the runtime and the compiler that the type is a step searcher.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Annotations.StepSearcherAttribute.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Logical.Annotations.StepSearcherAttribute"/> instance.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Annotations.StepSearcherAttribute.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Logical.Annotations.StepSearcherAttribute"/> instance via the resource entry.
            </summary>
            <param name="nameResourceEntry">The resource entry.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Annotations.StepSearcherAttribute.NameResourceEntry">
            <summary>
            Indicates the name stored in resource dictionary, specified as its entry (i.e. resource key).
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute">
            <summary>
            Defines an attribute that applies to a step searcher, to define more options on UI configurations.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsOptionsFixed">
            <summary>
            <para>Indicates whether the option is fixed that can't be modified in UI.</para>
            <para><i>The default value is <see langword="false"/>.</i></para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsDirect">
            <summary>
            <para>
            Indicates the technique searcher can or can't be used in some scenarios
            where they aren't in traversing mode to call
            <see cref="M:Sudoku.Solving.Logical.IStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)"/>
            in <see cref="T:Sudoku.Solving.Logical.IStepSearcher"/>s one by one.
            </para>
            <para>
            If <see langword="true"/>, the searcher can't use those <see langword="static"/>
            properties such as <see cref="P:Sudoku.Buffers.FastProperties.CandidatesMap"/> in its method
            <see cref="M:Sudoku.Solving.Logical.IStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)"/>.
            </para>
            <para><i>The default value is <see langword="false"/>.</i></para>
            </summary>
            <remarks>
            <para>
            All disallowed properties are:
            <list type="bullet">
            <item><see cref="P:Sudoku.Buffers.FastProperties.DigitsMap"/></item>
            <item><see cref="P:Sudoku.Buffers.FastProperties.ValuesMap"/></item>
            <item><see cref="P:Sudoku.Buffers.FastProperties.CandidatesMap"/></item>
            <item><see cref="P:Sudoku.Buffers.FastProperties.BivalueCells"/></item>
            <item><see cref="P:Sudoku.Buffers.FastProperties.EmptyCells"/></item>
            </list>
            The disallowed method is:
            <list type="bullet">
            <item><see cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/></item>
            </list>
            </para>
            <para>
            Those properties or methods can optimize the performance to analyze a sudoku grid, but
            sometimes they may cause a potential bug that is hard to find and fix. The attribute
            is created and used for solving the problem.
            </para>
            </remarks>
            <seealso cref="T:Sudoku.Solving.Logical.IStepSearcher"/>
            <seealso cref="T:Sudoku.Buffers.FastProperties"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.PuzzleNotRelying">
            <summary>
            <para>Indicates whether the specified step searcher doesn't rely on the puzzle.</para>
            <para><i>The default value is <see langword="false"/>.</i></para>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Annotations.StepSearcherPropertyAttribute">
            <summary>
            Defines an attribute that can be applied to a property in step searcher interface type,
            indicating the property is represented as a setting property, that can interact
            with the <see cref="T:Sudoku.Solving.Mechanism.IComplexSolver`2"/> type.
            </summary>
            <seealso cref="T:Sudoku.Solving.Mechanism.IComplexSolver`2"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptions">
            <summary>
            Defines a list of options that is used by type <see cref="T:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptionsAttribute"/>,
            indicating the extra options that are configured and used by <see cref="T:Sudoku.Solving.Logical.LogicalSolver"/>
            to control some extra operation that cannot do on basic options being marked <see cref="T:Sudoku.Solving.Logical.Annotations.StepSearcherPropertyAttribute"/>.
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptionsAttribute"/>
            <seealso cref="T:Sudoku.Solving.Logical.LogicalSolver"/>
            <seealso cref="T:Sudoku.Solving.Logical.Annotations.StepSearcherPropertyAttribute"/>
        </member>
        <member name="F:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptions.None">
            <summary>
            Indicates the options is none.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptions.TemporarilyDisabled">
            <summary>
            Indicates the step searcher will be temporarily disabled due to some reason,
            e.g. the step searcher algorithm has bugs waiting to be fixed.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptions.OnlyForStandardSudoku">
            <summary>
            Indicates the step searcher is running only on standard sudoku puzzles.
            If a puzzle is sukaku, the step searcher will be skipped.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptions.SlowAlgorithm">
            <summary>
            Indicates the step searcher chooses for a slow algorithm. If <see cref="P:Sudoku.Solving.Logical.LogicalSolver.IgnoreSlowAlgorithms"/>
            is configured, the step searcher will be ignored.
            </summary>
            <seealso cref="P:Sudoku.Solving.Logical.LogicalSolver.IgnoreSlowAlgorithms"/>
        </member>
        <member name="F:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptions.HighMemoryAllocation">
            <summary>
            Indicates the step searcher chooses for an algorithm that will raise high memory allocation.
            If <see cref="P:Sudoku.Solving.Logical.LogicalSolver.IgnoreHighAllocationAlgorithms"/> is configured, the step searcher will be ignored.
            </summary>
            <seealso cref="P:Sudoku.Solving.Logical.LogicalSolver.IgnoreHighAllocationAlgorithms"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptionsAttribute">
            <summary>
            Defines an attribute that is used for <see cref="T:Sudoku.Solving.Logical.IStepSearcher"/> derived types,
            to tell the runtime that the extra information on controlling running operation on <see cref="T:Sudoku.Solving.Logical.LogicalSolver"/>.
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.IStepSearcher"/>
            <seealso cref="T:Sudoku.Solving.Logical.LogicalSolver"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptionsAttribute.#ctor(Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptions)">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptionsAttribute"/> instance via the specified options.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptionsAttribute.Options">
            <summary>
            Indicates the options.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Annotations.SukakuNotSupportedAttribute">
            <summary>
            Defines an attribute annotation that can be applied to a step searcher type,
            indicating the step searcher instance is not supported in sukaku solving mode.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.CommonLogicalSolvers">
            <summary>
            Provides with some commonly-used <see cref="T:Sudoku.Solving.Logical.LogicalSolver"/> instances.
            </summary>
            <remarks><b>
            You shouldn't modify any property from instances provided by this type because <see cref="T:Sudoku.Solving.Logical.LogicalSolver"/> is a reference type.
            </b></remarks>
            <seealso cref="T:Sudoku.Solving.Logical.LogicalSolver"/>
        </member>
        <member name="F:Sudoku.Solving.Logical.CommonLogicalSolvers.Default">
            <summary>
            Indicates a <see cref="T:Sudoku.Solving.Logical.LogicalSolver"/> instance that is created by default instantiation behavior.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.CommonLogicalSolvers.SstsOnly">
            <summary>
            Indicates a <see cref="T:Sudoku.Solving.Logical.LogicalSolver"/> instance that only provides steps for simple-sudoku techinques:
            <list type="bullet">
            <item>Hidden/Naked Singles</item>
            <item>Locked Candidates</item>
            <item>Hidden/Naked/Locked Subsets &amp; Naked Subsets (+)</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.CommonLogicalSolvers.Suitable">
            <summary>
            Indicates a <see cref="T:Sudoku.Solving.Logical.LogicalSolver"/> instance that has configured some basic options that is suitable
            for human to control sudoku puzzles.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.LogicalSolver">
            <summary>
            Provides a solver that solves a sudoku puzzle using the human-friendly logics.
            </summary>
            <remarks>
            Note: if you want to create an instance, I recommend you use another type called <see cref="T:Sudoku.Solving.Logical.CommonLogicalSolvers"/>
            to get your desired instance. Two commonly-used instances of that type are:
            <list type="table">
            <listheader>
            <term>Instance</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:Sudoku.Solving.Logical.CommonLogicalSolvers.Default"/></term>
            <description>A default solver that uses parameterless constructor to instantiate, without any extra properties assigned.</description>
            </item>
            <item>
            <term><see cref="F:Sudoku.Solving.Logical.CommonLogicalSolvers.Suitable"/></term>
            <description>A powerful instance that has already configured some properties.</description>
            </item>
            </list>
            If you want to change some properties in this type, you can use C# 9 syntax "<see langword="with"/> Expressions in Records"
            to describe the new assigning logic, e.g.
            <code><![CDATA[
            var yourOwnSolver = CommonLogicalSolvers.Suitable with
            {
                IsFullApplying = true,
                IgnoreSlowAlgorithms = false
            };
            ]]></code>
            </remarks>
            <completionlist cref="T:Sudoku.Solving.Logical.CommonLogicalSolvers"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.IsFullApplying">
            <summary>
            Indicates whether the solver will apply all found steps in a step searcher,
            in order to solve a puzzle faster. If the value is <see langword="true"/>,
            the third argument of <see cref="M:Sudoku.Solving.Logical.IStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)"/>
            will be set <see langword="false"/> value, in order to find all possible steps in a step searcher,
            and all steps will be applied at the same time.
            </summary>
            <remarks>
            The default value is <see langword="false"/>.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Logical.IStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.IgnoreSlowAlgorithms">
            <summary>
            Indicates whether the solver will ignore slow step searchers being configured <see cref="F:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptions.SlowAlgorithm"/>.
            </summary>
            <remarks>
            The default value is <see langword="false"/>.
            </remarks>
            <seealso cref="F:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptions.SlowAlgorithm"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.IgnoreHighAllocationAlgorithms">
            <summary>
            Indicates whether the solver will ignore slow step searchers being configured
            <see cref="F:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptions.HighMemoryAllocation"/>.
            </summary>
            <remarks>
            The default value is <see langword="false"/>.
            </remarks>
            <seealso cref="F:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptions.HighMemoryAllocation"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.CustomSearcherCollection">
            <summary>
            <para>
            Indicates the custom searcher collection you defined to solve a puzzle. By default,
            the solver will use <see cref="F:Sudoku.Buffers.StepSearcherPool.Collection"/> to solve a puzzle.
            If you assign a new array of <see cref="T:Sudoku.Solving.Logical.IStepSearcher"/>s into this property
            the step searchers will use this property instead of <see cref="F:Sudoku.Buffers.StepSearcherPool.Collection"/> to solve a puzzle.
            </para>
            <para>
            Please note that the property will keep the <see langword="null"/> value if you don't assign any values into it;
            however, if you want to use the customized collection to solve a puzzle, assign a non-<see langword="null"/>
            array into it.
            </para>
            </summary>
            <seealso cref="F:Sudoku.Buffers.StepSearcherPool.Collection"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.TargetSearcherCollection">
            <summary>
            Indicates the target step searcher collection.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.LogicalSolver.Solve(Sudoku.Concepts.Grid@,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.LogicalSolver.InternalSolve(Sudoku.Concepts.Grid@,Sudoku.Concepts.Grid@,System.Boolean,Sudoku.Solving.Logical.LogicalSolverResult,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            The inner solving operation method.
            </summary>
            <param name="puzzle">
            <inheritdoc cref="M:Sudoku.Solving.Logical.LogicalSolver.Solve(Sudoku.Concepts.Grid@,System.IProgress{System.Double},System.Threading.CancellationToken)" path="/param[@name='puzzle']"/>
            </param>
            <param name="solution">The solution of the puzzle. Some step searchers will use this value.</param>
            <param name="isSukaku">A <see cref="T:System.Boolean"/> value indicating whether the puzzle is a sukaku.</param>
            <param name="resultBase">The base solver result already included the base information.</param>
            <param name="progress">
            <inheritdoc cref="M:Sudoku.Solving.Logical.LogicalSolver.Solve(Sudoku.Concepts.Grid@,System.IProgress{System.Double},System.Threading.CancellationToken)" path="/param[@name='progress']"/>
            </param>
            <param name="cancellationToken">
            <inheritdoc cref="M:Sudoku.Solving.Logical.LogicalSolver.Solve(Sudoku.Concepts.Grid@,System.IProgress{System.Double},System.Threading.CancellationToken)" path="/param[@name='cancellationToken']"/>
            </param>
            <returns>The solver result.</returns>
            <exception cref="T:Sudoku.Runtime.AnalysisServices.WrongStepException">Throws when found wrong steps to apply.</exception>
            <exception cref="T:System.OperationCanceledException">Throws when the operation is canceled.</exception>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.AlmostLockedCandidatesStepSearcher_CheckAlmostLockedQuadruple">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedCandidatesStepSearcher.CheckAlmostLockedQuadruple"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.AlmostLockedSetsXyWingStepSearcher_AllowCollision">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedSetsXyWingStepSearcher.AllowCollision"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.AlmostLockedSetsXzStepSearcher_AllowCollision">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedSetsXzStepSearcher.AllowCollision"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.AlmostLockedSetsXzStepSearcher_AllowLoopedPatterns">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedSetsXzStepSearcher.AllowLoopedPatterns"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.BivalueUniversalGraveStepSearcher_SearchExtendedTypes">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.IBivalueUniversalGraveStepSearcher.SearchExtendedTypes"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.BowmanBingoStepSearcher_MaxLength">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.IBowmanBingoStepSearcher.MaxLength"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.ComplexFishStepSearcher_MaxSize">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.IFishStepSearcher.MaxSize"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.JuniorExocetStepSearcher_CheckAdvanced">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.IExocetStepSearcher.CheckAdvanced"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.RegularWingStepSearcher_MaxSize">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.IRegularWingStepSearcher.MaxSize"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.SeniorExocetStepSearcher_CheckAdvanced">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.IExocetStepSearcher.CheckAdvanced"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.SingleStepSearcher_EnableFullHouse">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.ISingleStepSearcher.EnableFullHouse"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.SingleStepSearcher_EnableLastDigit">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.ISingleStepSearcher.EnableLastDigit"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.SingleStepSearcher_HiddenSinglesInBlockFirst">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.ISingleStepSearcher.HiddenSinglesInBlockFirst"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.SingleStepSearcher_UseIttoryuMode">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.ISingleStepSearcher.UseIttoryuMode"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.TemplateStepSearcher_TemplateDeleteOnly">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.ITemplateStepSearcher.TemplateDeleteOnly"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.UniqueRectangleStepSearcher_AllowIncompleteUniqueRectangles">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.IUniqueRectangleStepSearcher.AllowIncompleteUniqueRectangles"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolver.UniqueRectangleStepSearcher_SearchForExtendedUniqueRectangles">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.IUniqueRectangleStepSearcher.SearchForExtendedUniqueRectangles"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.LogicalSolverResult">
            <summary>
            Provides the solver result after <see cref="T:Sudoku.Solving.Logical.LogicalSolver"/> solving a puzzle.
            </summary>
            <param name="Puzzle"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.LogicalSolverResult.#ctor(Sudoku.Concepts.Grid@)">
            <summary>
            Provides the solver result after <see cref="T:Sudoku.Solving.Logical.LogicalSolver"/> solving a puzzle.
            </summary>
            <param name="Puzzle"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.Puzzle">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.IsSolved">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.MaxDifficulty">
            <summary>
            <para>Indicates the maximum difficulty of the puzzle.</para>
            <para>
            When the puzzle is solved by <see cref="T:Sudoku.Solving.Logical.LogicalSolver"/>,
            the value will be the maximum value among all difficulty
            ratings in solving steps. If the puzzle has not been solved,
            or else the puzzle is solved by other solvers, this value will
            be always <c>20.0M</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.LogicalSolver"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.TotalDifficulty">
            <summary>
            <para>Indicates the total difficulty rating of the puzzle.</para>
            <para>
            When the puzzle is solved by <see cref="T:Sudoku.Solving.Logical.LogicalSolver"/>,
            the value will be the sum of all difficulty ratings of steps. If
            the puzzle has not been solved, the value will be the sum of all
            difficulty ratings of steps recorded in <see cref="P:Sudoku.Solving.Logical.LogicalSolverResult.Steps"/>.
            However, if the puzzle is solved by other solvers, this value will
            be <c>0</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.LogicalSolver"/>
            <seealso cref="P:Sudoku.Solving.Logical.LogicalSolverResult.Steps"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.PearlDifficulty">
            <summary>
            <para>
            Indicates the pearl difficulty rating of the puzzle, calculated
            during only by <see cref="T:Sudoku.Solving.Logical.LogicalSolver"/>.
            </para>
            <para>
            When the puzzle is solved, the value will be the difficulty rating
            of the first solving step. If the puzzle has not solved or
            the puzzle is solved by other solvers, this value will be always <c>0</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.LogicalSolver"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.DiamondDifficulty">
            <summary>
            <para>
            Indicates the pearl difficulty rating of the puzzle, calculated
            during only by <see cref="T:Sudoku.Solving.Logical.LogicalSolver"/>.
            </para>
            <para>
            When the puzzle is solved, the value will be the difficulty rating
            of the first step before the first one whose conclusion is
            <see cref="F:Sudoku.Solving.ConclusionType.Assignment"/>. If the puzzle has not solved
            or solved by other solvers, this value will be <c>20.0M</c>.
            </para>
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.LogicalSolver"/>
            <seealso cref="F:Sudoku.Solving.ConclusionType.Assignment"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.SolvingStepsCount">
            <summary>
            Indicates the number of all solving steps recorded.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.FailedReason">
            <summary>
            Indicates why the solving operation is failed. This property is useless when <see cref="P:Sudoku.Solving.Logical.LogicalSolverResult.IsSolved"/>
            keeps the <see langword="true"/> value.
            </summary>
            <seealso cref="P:Sudoku.Solving.Logical.LogicalSolverResult.IsSolved"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.DifficultyLevel">
            <summary>
            Indicates the difficulty level of the puzzle.
            If the puzzle has not solved or solved by other solvers,
            this value will be <see cref="F:Sudoku.Runtime.AnalysisServices.DifficultyLevel.Unknown"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.Solution">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.ElapsedTime">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.StepGrids">
            <summary>
            Indicates a list, whose element is the intermediate grid for each step.
            </summary>
            <seealso cref="P:Sudoku.Solving.Logical.LogicalSolverResult.Steps"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.Steps">
            <summary>
            Indicates all solving steps that the solver has recorded.
            </summary>
            <seealso cref="P:Sudoku.Solving.Logical.LogicalSolverResult.StepGrids"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.SolvingPath">
            <summary>
            <para>Indicates a list of pairs of information about each step.</para>
            <para>
            If the puzzle cannot be solved due to some reason (invalid puzzle, unhandled exception, etc.),
            the return value of the property will be always the <see langword="default"/> expression of type
            <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>, of <see cref="T:System.ValueTuple`2"/>
            of types <see cref="T:Sudoku.Concepts.Grid"/> and <see cref="T:Sudoku.Solving.Logical.IStep"/>.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.WrongStep">
            <summary>
            <para>
            Indicates the wrong step found. In general cases, if the property <see cref="P:Sudoku.Solving.Logical.LogicalSolverResult.IsSolved"/> keeps
            <see langword="false"/> value, it'll mean the puzzle is invalid to solve, or the solver has found
            one error step to apply, that causes the original puzzle <see cref="P:Sudoku.Solving.Logical.LogicalSolverResult.Puzzle"/> become invalid.
            In this case we can check this property to get the wrong information to debug the error,
            or tell the author himself directly, with the inner value of this property held.
            </para>
            <para>
            However, if the puzzle is successful to be solved, the property won't contain any value,
            so it'll keep the <see langword="null"/> reference. Therefore, please check the nullability
            of this property before using.
            </para>
            <para>
            In general, this table will tell us the nullability of this property:
            <list type="table">
            <listheader>
            <term>Nullability</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Not <see langword="null"/></term>
            <description>The puzzle is failed to solve, and the solver has found an invalid step to apply.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>Other cases.</description>
            </item>
            </list>
            </para>
            </summary>
            <seealso cref="P:Sudoku.Solving.Logical.LogicalSolverResult.IsSolved"/>
            <seealso cref="P:Sudoku.Solving.Logical.LogicalSolverResult.Puzzle"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.Bottleneck">
            <summary>
            Gets the bottleneck during the whole grid solving. Returns <see langword="null"/> if the property
            <see cref="P:Sudoku.Solving.Logical.LogicalSolverResult.Steps"/> is default case (not initialized or empty).
            </summary>
            <seealso cref="P:Sudoku.Solving.Logical.LogicalSolverResult.Steps"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.UnhandledException">
            <inheritdoc/>
            <remarks>
            You can visit the property value
            if the property <see cref="P:Sudoku.Solving.Logical.LogicalSolverResult.FailedReason"/> is <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.ExceptionThrown"/>
            or <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.WrongStep"/>.
            </remarks>
            <seealso cref="P:Sudoku.Solving.Logical.LogicalSolverResult.FailedReason"/>
            <seealso cref="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.ExceptionThrown"/>
            <seealso cref="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.WrongStep"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Sudoku.Solving.Logical.IStep"/> instance at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The step information.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the <see cref="P:Sudoku.Solving.Logical.LogicalSolverResult.Steps"/> is <see langword="null"/> or empty.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Throws when the index is out of range.</exception>
            <seealso cref="P:Sudoku.Solving.Logical.LogicalSolverResult.Steps"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.LogicalSolverResult.Item(Sudoku.Solving.Logical.Techniques.Technique)">
            <summary>
            Gets the first <see cref="T:Sudoku.Solving.Logical.IStep"/> instance that matches the specified technique.
            </summary>
            <param name="code">The technique code to check and fetch.</param>
            <returns>The step information instance as the result.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the list doesn't contain any valid instance to get.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Logical.LogicalSolverResult.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.LogicalSolverResult.ToString(Sudoku.Solving.Logical.SolverResultFormattingOptions)">
            <summary>
            Returns a string that represents the current object, with the specified formatting options.
            </summary>
            <param name="options">The formatting options.</param>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.LogicalSolverResult.GetEnumerator">
            <summary>
            Gets the enumerator of the current instance in order to use <see langword="foreach"/> loop.
            </summary>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.LogicalSolverResult.Select``1(System.Func{Sudoku.Solving.Logical.IStep,``0})">
            <summary>
            Projects the collection, to an immutable result of target type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">
            The selector to project the <see cref="T:Sudoku.Solving.Logical.IStep"/> instance into type <typeparamref name="TResult"/>.
            </param>
            <returns>The projected collection of element type <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.LogicalSolverResult.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.LogicalSolverResult.System#Collections#Generic#IEnumerable{Sudoku#Solving#Logical#IStep}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.LogicalSolverResult.System#Linq#ISelectClauseProvider{Sudoku#Solving#Logical#IStep}#Select``1(System.Func{Sudoku.Solving.Logical.IStep,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.LogicalSolverResult.Evaluator(,System.Decimal)">
            <summary>
            The inner executor to get the difficulty value (total, average).
            </summary>
            <param name="executor">The execute method.</param>
            <param name="d">
            The default value as the return value when <see cref="P:Sudoku.Solving.Logical.LogicalSolverResult.Steps"/> is <see langword="null"/> or empty.
            </param>
            <returns>The result.</returns>
            <seealso cref="P:Sudoku.Solving.Logical.LogicalSolverResult.Steps"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Meta.ExocetEliminatedReason">
            <summary>
            Encapsulates a type that represents the reason why the exocet eliminations can be removed.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Meta.ExocetEliminatedReason.Basic">
            <summary>
            Indicates the elimination is the basic elimination (Target eliminations).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Meta.ExocetEliminatedReason.TargetInference">
            <summary>
            Indicates the target inference eliminations (that is eliminated via mirror cells).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Meta.ExocetEliminatedReason.Mirror">
            <summary>
            Indicates the mirror eliminations.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Meta.ExocetEliminatedReason.BiBiPattern">
            <summary>
            Indicates the bi-bi pattern.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Meta.ExocetEliminatedReason.TargetPair">
            <summary>
            Indicates the target pair eliminations.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Meta.ExocetEliminatedReason.GeneralizedSwordfish">
            <summary>
            Indicates the generalized swordfish eliminations.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Meta.ExocetEliminatedReason.TrueBase">
            <summary>
            Indicates the true base eliminations.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Meta.ExocetEliminatedReason.CompatibilityTest">
            <summary>
            Indicates the compatibility test eliminations.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Meta.ExocetElimination">
            <summary>
            Represents a data structure that describes the eliminations that are created and proved by the exocet technique.
            </summary>
            <param name="Conclusions">Indicates the conclusions.</param>
            <param name="Reason">Indicates the reason why these candidates can be eliminated.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Meta.ExocetElimination.#ctor(Sudoku.Solving.Conclusion[],Sudoku.Solving.Logical.Meta.ExocetEliminatedReason)">
            <summary>
            Represents a data structure that describes the eliminations that are created and proved by the exocet technique.
            </summary>
            <param name="Conclusions">Indicates the conclusions.</param>
            <param name="Reason">Indicates the reason why these candidates can be eliminated.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Meta.ExocetElimination.Conclusions">
            <summary>Indicates the conclusions.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Meta.ExocetElimination.Reason">
            <summary>Indicates the reason why these candidates can be eliminated.</summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Meta.ExocetElimination.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Meta.IPhasedConclusionProvider`2">
            <summary>
            Defines a data structure that describes for a phased conclusion list.
            </summary>
            <typeparam name="TSelf">The type of the implemented type itself.</typeparam>
            <typeparam name="TReasonEnum">
            The type of the enumeration that represents the details and reasons why the conclusions can be used.
            </typeparam>
        </member>
        <member name="P:Sudoku.Solving.Logical.Meta.IPhasedConclusionProvider`2.Conclusions">
            <summary>
            Indicates the conclusions that matches for the current reason.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Meta.IPhasedConclusionProvider`2.Reason">
            <summary>
            Indicates the reason why the conclusions can be available.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Meta.IPhasedConclusionProvider`2.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Meta.IPhasedConclusionProvider`2.GetEnumerator">
            <summary>
            Gets the enumerator of the current instance in order to use <see langword="foreach"/> loop.
            </summary>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Meta.IPhasedConclusionProvider`2.System#IEquatable{TSelf}#Equals(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Meta.ExocetEliminatedReason_EnumSwitchExpressionExtensions">
            <summary>
            Provides with extension methods for switching on the current type.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Meta.ExocetEliminatedReason_EnumSwitchExpressionExtensions.GetName(Sudoku.Solving.Logical.Meta.ExocetEliminatedReason)">
            <summary>
            Gets the name of the current eliminated reason field.
            </summary>
            <param name="this">The field.</param>
            <returns>The name of the field.</returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet">
            <summary>
            Defines a data structure that describes an AHS.
            </summary>
            <remarks>
            An <b>Almost Hidden Set</b> is a sudoku concept, which describes a case that
            only <c>n</c> digits can be filled into <c>n + 1</c> cells in a house.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.#ctor(System.Int16,System.Int16,Sudoku.Concepts.CellMap@,System.Nullable{Sudoku.Concepts.CellMap}[])">
            <summary>
            Initializes an <see cref="T:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet"/> instance
            via the specified digit mask and the map of cells.
            </summary>
            <param name="digitMask">The digit mask.</param>
            <param name="allDigitsMask">All digits appearing in the AHS structure..</param>
            <param name="map">The map.</param>
            <param name="digitsMap">The digits' distribution maps.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.House">
            <summary>
            Indicates the house used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.AllDigitsMask">
            <summary>
            Indicates the mask of all digits appeared in the AHS structure.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.DigitsMask">
            <summary>
            Indicates the mask of digits used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.Map">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.WeakLinks">
            <summary>
            Indicates all weak links in this AHS. The return value is described as an array of quadruples,
            indicating two digits, and cells used in the weak link.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.DigitsMap">
            <summary>
            Indicates a dictionary of elements, indicating the cells of digits' own distribution.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.Equals(Sudoku.Solving.Logical.Patterns.AlmostHiddenSet)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.Gather(Sudoku.Concepts.Grid@)">
            <summary>
            Gathers all possible <see cref="T:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet"/>s in the specified grid.
            </summary>
            <param name="grid">The grid.</param>
            <returns>All possible found <see cref="T:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet"/>.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.op_Equality(Sudoku.Solving.Logical.Patterns.AlmostHiddenSet,Sudoku.Solving.Logical.Patterns.AlmostHiddenSet)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.op_Inequality(Sudoku.Solving.Logical.Patterns.AlmostHiddenSet,Sudoku.Solving.Logical.Patterns.AlmostHiddenSet)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Patterns.AlmostLockedSet">
            <summary>
            Defines a data structure that describes an ALS.
            </summary>
            <remarks>
            An <b>Almost Locked Set</b> is a sudoku concept, which describes a case that
            <c>n</c> cells contains <c>(n + 1)</c> kinds of different digits.
            The special case is a bi-value cell.
            </remarks>
        </member>
        <member name="F:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.StrongRelationsCount">
            <summary>
            Indicates an array of the total number of the strong relations in an ALS of the different size.
            The field is only unused in the property <see cref="P:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.StrongLinks"/>.
            </summary>
            <seealso cref="P:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.StrongLinks"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.#ctor(System.Int16,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@)">
            <summary>
            Initializes an <see cref="T:Sudoku.Solving.Logical.Patterns.AlmostLockedSet"/> instance
            via the specified digit mask and the map of cells.
            </summary>
            <param name="digitMask">The digit mask.</param>
            <param name="map">The map.</param>
            <param name="possibleEliminationMap">
            Indicates the possible cells that can be as the elimination.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.House">
            <summary>
            Indicates the house used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.IsBivalueCell">
            <summary>
            Indicates whether the ALS only uses a bi-value cell.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.DigitsMask">
            <summary>
            Indicates the mask of digits used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.StrongLinks">
            <summary>
            Indicates all strong links in this ALS.
            The result will be represented as a <see cref="T:System.Int16"/> mask of 9 bits indicating which bits used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.Map">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.PossibleEliminationMap">
            <summary>
            Gets the possible cells that can store eliminations for the ALS.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.Deconstruct(System.Int32@,System.Int16@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
<![CDATA[
public static void Deconstruct(out string name, out int age)
{
    name = Name;
    age = Age;
}
]]>
						</code>
						The following code will be legal.
						<code>
<![CDATA[
// Use explicitly typed variables to get a deconstruction.
(string name, int age) = student;

// Or use the type inferring to omit the type of each variable having been deconstructed.
var (name, age) = student;

// Of course, you can also use the invocation to get values.
student.Deconstruct(out string name, out int age);
]]>
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
<![CDATA[
if (student is (name: var name, age: >= 18))
{
    Console.WriteLine(name);
}
]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.Deconstruct(System.Int32@,System.Int16@,Sudoku.Concepts.CellMap@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
<![CDATA[
public static void Deconstruct(out string name, out int age)
{
    name = Name;
    age = Age;
}
]]>
						</code>
						The following code will be legal.
						<code>
<![CDATA[
// Use explicitly typed variables to get a deconstruction.
(string name, int age) = student;

// Or use the type inferring to omit the type of each variable having been deconstructed.
var (name, age) = student;

// Of course, you can also use the invocation to get values.
student.Deconstruct(out string name, out int age);
]]>
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
<![CDATA[
if (student is (name: var name, age: >= 18))
{
    Console.WriteLine(name);
}
]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.ContainsDigit(Sudoku.Concepts.Grid@,System.Int32,Sudoku.Concepts.CellMap@)">
            <summary>
            Indicates whether the specified grid contains the digit.
            </summary>
            <param name="grid">The grid.</param>
            <param name="digit">The digit.</param>
            <param name="result">The result.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.Equals(Sudoku.Solving.Logical.Patterns.AlmostLockedSet)">
            <summary>
            Determine whether the specified <see cref="T:Sudoku.Solving.Logical.Patterns.AlmostLockedSet"/> instance holds the same
            <see cref="P:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.DigitsMask"/> and <see cref="P:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.Map"/> property values as the current instance.
            </summary>
            <param name="other">The instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.GetHashCode">
            <inheritdoc/>
            <remarks>
            If you want to determine the equality of two instance, I recommend you
            <b>should</b> use method <see cref="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.Equals(Sudoku.Solving.Logical.Patterns.AlmostLockedSet)"/> instead of this method.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.Equals(Sudoku.Solving.Logical.Patterns.AlmostLockedSet)"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.Gather(Sudoku.Concepts.Grid@)">
            <summary>
            Gathers all possible <see cref="T:Sudoku.Solving.Logical.Patterns.AlmostLockedSet"/>s in the specified grid.
            </summary>
            <param name="grid">The grid.</param>
            <returns>All possible found <see cref="T:Sudoku.Solving.Logical.Patterns.AlmostLockedSet"/>.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.op_Equality(Sudoku.Solving.Logical.Patterns.AlmostLockedSet,Sudoku.Solving.Logical.Patterns.AlmostLockedSet)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.op_Inequality(Sudoku.Solving.Logical.Patterns.AlmostLockedSet,Sudoku.Solving.Logical.Patterns.AlmostLockedSet)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Patterns.BivalueOddagon">
            <summary>
            Represents for a data set that describes the complete information about a bi-value oddagon technique.
            </summary>
            <param name="Loop">Indicates the cells used in this whole bi-value oddagon loop.</param>
            <param name="DigitsMask">Indicates the digits used, represented as a mask of type <see cref="T:System.Int16"/>.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.BivalueOddagon.#ctor(Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Represents for a data set that describes the complete information about a bi-value oddagon technique.
            </summary>
            <param name="Loop">Indicates the cells used in this whole bi-value oddagon loop.</param>
            <param name="DigitsMask">Indicates the digits used, represented as a mask of type <see cref="T:System.Int16"/>.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.BivalueOddagon.Loop">
            <summary>Indicates the cells used in this whole bi-value oddagon loop.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.BivalueOddagon.DigitsMask">
            <summary>Indicates the digits used, represented as a mask of type <see cref="T:System.Int16"/>.</summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Patterns.ChainNode">
            <summary>
            Defines a node used in chaining.
            </summary>
            <remarks>
            This type corresponds to the concept of Sudoku Explainer's logic
            "<see href="https://sunnieshine.github.io/Sudoku/terms/node">Potential</see>".
            </remarks>
        </member>
        <member name="F:Sudoku.Solving.Logical.Patterns.ChainNode._mask">
            <summary>
            The internal mask.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.ChainNode.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> instance via the specified data.
            </summary>
            <param name="candidate">The candidate.</param>
            <param name="isOn">Indicates whether the node is on.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.ChainNode.#ctor(System.Byte,System.Byte,System.Boolean)">
            <summary>
            <inheritdoc cref="M:Sudoku.Solving.Logical.Patterns.ChainNode.#ctor(System.Int32,System.Boolean)" path="/summary"/>
            </summary>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <param name="isOn"><inheritdoc cref="M:Sudoku.Solving.Logical.Patterns.ChainNode.#ctor(System.Int32,System.Boolean)" path="/param[@name='isOn']"/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.ChainNode.#ctor(Sudoku.Solving.Logical.Patterns.ChainNode,System.Boolean)">
            <summary>
            <inheritdoc cref="M:Sudoku.Solving.Logical.Patterns.ChainNode.#ctor(System.Int32,System.Boolean)" path="/summary"/>
            </summary>
            <param name="base">The base potential instance.</param>
            <param name="isOn"><inheritdoc cref="M:Sudoku.Solving.Logical.Patterns.ChainNode.#ctor(System.Int32,System.Boolean)" path="/param[@name='isOn']"/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.ChainNode.IsOn">
            <summary>
            Indicates whether the node is on.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.ChainNode.Cell">
            <summary>
            Indicates the cell used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.ChainNode.Digit">
            <summary>
            Indicates the digit used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.ChainNode.Candidate">
            <summary>
            Indicates the candidate.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.ChainNode.SingletonParent">
            <summary>
            Defines an accessor that allows user assigning a singleton parent node into the current data structure on instantiation phase.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.ChainNode.ChainPotentials">
            <summary>
            Indicates all <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/>s in a single chain. This property should only be used in normal AICs.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.ChainNode.FullChainPotentials">
            <summary>
            Gets the chain of all <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/>s from the current <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> as the target node.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.ChainNode.NestedChainDetails">
            <summary>
            Indicates the step detail of the nested chain.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.ChainNode.Parents">
            <summary>
            <para>Indicates the parents of the current instance.</para>
            <para>
            The result always returns a list of length 1 if the chain is not dynamic.
            In addition, if a <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> instance has no available parent (i.e. the return collection is empty),
            it must the head of a chain.
            </para>
            <para>
            If you want to append more parent nodes into the current <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> instance,
            just call <see cref="M:System.Collections.Generic.List`1.Add(`0)"/> to add it using this property: <c>p.Parents.Add(parent);</c>.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.ChainNode.CandidateString">
            <summary>
            Indicates the candidate string representation.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.ChainNode.DebuggerDisplayString">
            <summary>
            Indicates the string that is used for display on debugger.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.ChainNode.Deconstruct(System.Int32@,System.Boolean@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
<![CDATA[
public static void Deconstruct(out string name, out int age)
{
    name = Name;
    age = Age;
}
]]>
						</code>
						The following code will be legal.
						<code>
<![CDATA[
// Use explicitly typed variables to get a deconstruction.
(string name, int age) = student;

// Or use the type inferring to omit the type of each variable having been deconstructed.
var (name, age) = student;

// Of course, you can also use the invocation to get values.
student.Deconstruct(out string name, out int age);
]]>
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
<![CDATA[
if (student is (name: var name, age: >= 18))
{
    Console.WriteLine(name);
}
]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.ChainNode.Deconstruct(System.Byte@,System.Byte@,System.Boolean@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
<![CDATA[
public static void Deconstruct(out string name, out int age)
{
    name = Name;
    age = Age;
}
]]>
						</code>
						The following code will be legal.
						<code>
<![CDATA[
// Use explicitly typed variables to get a deconstruction.
(string name, int age) = student;

// Or use the type inferring to omit the type of each variable having been deconstructed.
var (name, age) = student;

// Of course, you can also use the invocation to get values.
student.Deconstruct(out string name, out int age);
]]>
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
<![CDATA[
if (student is (name: var name, age: >= 18))
{
    Console.WriteLine(name);
}
]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.ChainNode.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.ChainNode.Equals(Sudoku.Solving.Logical.Patterns.ChainNode)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.ChainNode.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.ChainNode.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.ChainNode.op_Equality(Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.ChainNode.op_Inequality(Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Patterns.ComplexFishFinKind">
            <summary>
            Indicates a fin modifier that is used for a complex fish structure.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Patterns.ComplexFishFinKind.Normal">
            <summary>
            Indicates the normal fish (i.e. no fins).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Patterns.ComplexFishFinKind.Finned">
            <summary>
            Indicates the finned fish
            (i.e. contains fins, but the fish may be regular when the fins are removed).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Patterns.ComplexFishFinKind.Sashimi">
            <summary>
            Indicates the sashimi fish
            (i.e. contains fins, and the fish may be degenerated to hidden singles when the fins are removed).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Patterns.ComplexFishFinKind.Siamese">
            <summary>
            Indicates the siamese fish (i.e. two fish share same base sets, with different cover sets).
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Patterns.ComplexFishShapeKind">
            <summary>
            Indicates a shape modifier that is used for a complex fish structure.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Patterns.ComplexFishShapeKind.Basic">
            <summary>
            Indicates the basic fish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Patterns.ComplexFishShapeKind.Franken">
            <summary>
            Indicates the franken fish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Patterns.ComplexFishShapeKind.Mutant">
            <summary>
            Indicates the mutant fish.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Patterns.Exocet">
            <summary>
            <para>
            Indicates an exocet pattern. The pattern will be like:
            <code><![CDATA[
            .-------.-------.-------.
            | B B E | E . . | E . . |
            | . . E | Q . . | R . . |
            | . . E | Q . . | R . . |
            :-------+-------+-------:
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            :-------+-------+-------:
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            '-------'-------'-------'
            ]]></code>
            Where:
            <list type="table">
            <item><term>B</term><description>Base Cells.</description></item>
            <item><term>Q</term><description>1st Object Pair (Target cells pair 1).</description></item>
            <item><term>R</term><description>2nd Object Pair (Target cells pair 2).</description></item>
            <item><term>S</term><description>Cross-line Cells.</description></item>
            <item><term>E</term><description>Escape Cells.</description></item>
            </list>
            </para>
            <para>
            In the data structure, all letters will be used as the same one in this exemplar.
            In addition, if senior exocet, one of two target cells will lie in cross-line cells,
            and the lines of two target cells lying on can't contain any base digits.
            </para>
            </summary>
            <param name="Base1">Indicates the first base cell.</param>
            <param name="Base2">Indicates the second base cell.</param>
            <param name="TargetQ1">Indicates the first target cell in the Q part.</param>
            <param name="TargetQ2">Indicates the second target cell in the Q part.</param>
            <param name="TargetR1">Indicates the first target cell in the R part.</param>
            <param name="TargetR2">Indicates the second target cell in the R part.</param>
            <param name="MirrorQ1">Indicates the first mirror cell in the Q part.</param>
            <param name="MirrorQ2">Indicates the second mirror cell in the Q part.</param>
            <param name="MirrorR1">Indicates the first mirror cell in the R part.</param>
            <param name="MirrorR2">Indicates the second mirror cell in the R part.</param>
            <param name="CrossLine">Indicates the cross-line cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.Exocet.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@)">
            <summary>
            <para>
            Indicates an exocet pattern. The pattern will be like:
            <code><![CDATA[
            .-------.-------.-------.
            | B B E | E . . | E . . |
            | . . E | Q . . | R . . |
            | . . E | Q . . | R . . |
            :-------+-------+-------:
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            :-------+-------+-------:
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            | . . S | S . . | S . . |
            '-------'-------'-------'
            ]]></code>
            Where:
            <list type="table">
            <item><term>B</term><description>Base Cells.</description></item>
            <item><term>Q</term><description>1st Object Pair (Target cells pair 1).</description></item>
            <item><term>R</term><description>2nd Object Pair (Target cells pair 2).</description></item>
            <item><term>S</term><description>Cross-line Cells.</description></item>
            <item><term>E</term><description>Escape Cells.</description></item>
            </list>
            </para>
            <para>
            In the data structure, all letters will be used as the same one in this exemplar.
            In addition, if senior exocet, one of two target cells will lie in cross-line cells,
            and the lines of two target cells lying on can't contain any base digits.
            </para>
            </summary>
            <param name="Base1">Indicates the first base cell.</param>
            <param name="Base2">Indicates the second base cell.</param>
            <param name="TargetQ1">Indicates the first target cell in the Q part.</param>
            <param name="TargetQ2">Indicates the second target cell in the Q part.</param>
            <param name="TargetR1">Indicates the first target cell in the R part.</param>
            <param name="TargetR2">Indicates the second target cell in the R part.</param>
            <param name="MirrorQ1">Indicates the first mirror cell in the Q part.</param>
            <param name="MirrorQ2">Indicates the second mirror cell in the Q part.</param>
            <param name="MirrorR1">Indicates the first mirror cell in the R part.</param>
            <param name="MirrorR2">Indicates the second mirror cell in the R part.</param>
            <param name="CrossLine">Indicates the cross-line cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.Base1">
            <summary>Indicates the first base cell.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.Base2">
            <summary>Indicates the second base cell.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.TargetQ1">
            <summary>Indicates the first target cell in the Q part.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.TargetQ2">
            <summary>Indicates the second target cell in the Q part.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.TargetR1">
            <summary>Indicates the first target cell in the R part.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.TargetR2">
            <summary>Indicates the second target cell in the R part.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.CrossLine">
            <summary>Indicates the cross-line cells.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.MirrorQ1">
            <summary>Indicates the first mirror cell in the Q part.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.MirrorQ2">
            <summary>Indicates the second mirror cell in the Q part.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.MirrorR1">
            <summary>Indicates the first mirror cell in the R part.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.MirrorR2">
            <summary>Indicates the second mirror cell in the R part.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.Map">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.MirrorCellsMap">
            <summary>
            Indicates the mirror cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.MapWithMirrors">
            <summary>
            Indicates the full map, with mirror cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.BaseCellsMap">
            <summary>
            Indicates the base cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Exocet.TargetCellsMap">
            <summary>
            Indicates the target cells.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.Exocet.Equals(Sudoku.Solving.Logical.Patterns.Exocet@)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.Exocet.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.Exocet.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Patterns.Firework">
            <summary>
            Indicates a firework pattern. The pattern will be like:
            <code><![CDATA[
            .-------.-------.-------.
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            :-------+-------+-------:
            | . . . | B . . | . C . |
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            :-------+-------+-------:
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | A . . | .(D). |
            '-------'-------'-------'
            ]]></code>
            </summary>
            <param name="Map"><inheritdoc/></param>
            <param name="Pivot">The pivot cell. This property can be <see langword="null"/> if four cells are used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.Firework.#ctor(Sudoku.Concepts.CellMap@,System.Nullable{System.Int32})">
            <summary>
            Indicates a firework pattern. The pattern will be like:
            <code><![CDATA[
            .-------.-------.-------.
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            :-------+-------+-------:
            | . . . | B . . | . C . |
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            :-------+-------+-------:
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | A . . | .(D). |
            '-------'-------'-------'
            ]]></code>
            </summary>
            <param name="Map"><inheritdoc/></param>
            <param name="Pivot">The pivot cell. This property can be <see langword="null"/> if four cells are used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Firework.Map">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Firework.Pivot">
            <summary>The pivot cell. This property can be <see langword="null"/> if four cells are used.</summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Patterns.Guardian">
            <summary>
            Represents for a data set that describes the complete information about a guardian technique.
            </summary>
            <param name="Loop">Indicates the cells used in this whole guardian loop.</param>
            <param name="Guardians">Indicates the extra cells that is used as guardians.</param>
            <param name="Digit">Indicates the digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.Guardian.#ctor(Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Represents for a data set that describes the complete information about a guardian technique.
            </summary>
            <param name="Loop">Indicates the cells used in this whole guardian loop.</param>
            <param name="Guardians">Indicates the extra cells that is used as guardians.</param>
            <param name="Digit">Indicates the digit used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Guardian.Loop">
            <summary>Indicates the cells used in this whole guardian loop.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Guardian.Guardians">
            <summary>Indicates the extra cells that is used as guardians.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.Guardian.Digit">
            <summary>Indicates the digit used.</summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Patterns.MultipleForcingChains">
            <summary>
            Defines a multiple forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Patterns.MultipleForcingChains._internalDictionary">
            <summary>
            Indicates the internal dictionary.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Patterns.MultipleForcingChains._keys">
            <summary>
            Indicates the keys.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Patterns.MultipleForcingChains._values">
            <summary>
            Indicates the values.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.Count">
            <summary>
            Indicates the number of elements stored in this collection.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.CellsOrDigits">
            <summary>
            Indicates the cells or digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.Potentials">
            <summary>
            Indicates the potentials.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The desired index.</param>
            <returns>The pair of data.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws when the index is out of range.</exception>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.Add(System.Byte,Sudoku.Solving.Logical.Patterns.ChainNode)">
            <summary>
            Adds a pair of data into the collection.
            </summary>
            <param name="cellOrDigit">The cell or digit.</param>
            <param name="potential">The potential.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.Equals(Sudoku.Solving.Logical.Patterns.MultipleForcingChains)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.op_Implicit(System.Collections.Generic.Dictionary{System.Byte,Sudoku.Solving.Logical.Patterns.ChainNode})~Sudoku.Solving.Logical.Patterns.MultipleForcingChains">
            <summary>
            Implicit cast from <see cref="T:System.Collections.Generic.Dictionary`2"/> to <see cref="T:Sudoku.Solving.Logical.Patterns.MultipleForcingChains"/>.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="T:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.Enumerator">
            <summary>
            Defines an enumerator that iterates the current collection.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.Enumerator._enumerator">
            <summary>
            The internal enumerator.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.Enumerator.#ctor(Sudoku.Solving.Logical.Patterns.MultipleForcingChains)">
            <summary>
            Initializes an <see cref="T:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.Enumerator"/> instance via the specified <see cref="T:Sudoku.Solving.Logical.Patterns.MultipleForcingChains"/> instance.
            </summary>
            <param name="mfc">The <see cref="T:Sudoku.Solving.Logical.Patterns.MultipleForcingChains"/> instance.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.Enumerator.Current">
            <inheritdoc cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.Enumerator.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.op_Equality(Sudoku.Solving.Logical.Patterns.MultipleForcingChains,Sudoku.Solving.Logical.Patterns.MultipleForcingChains)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.MultipleForcingChains.op_Inequality(Sudoku.Solving.Logical.Patterns.MultipleForcingChains,Sudoku.Solving.Logical.Patterns.MultipleForcingChains)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Patterns.CellOrDigitComparer">
            <summary>
            Defines a comparer that compares with inner key.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Patterns.CellOrDigitComparer.Instance">
            <summary>
            Indicates the singleton instance.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.CellOrDigitComparer.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.CellOrDigitComparer.Compare(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern">
            <summary>
            Defines a pattern that is a Qiu's deadly pattern technique structure in theory. The sketch is like:
            <code><![CDATA[
            .-------.-------.-------.
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | P P . | . . . | . . . |
            :-------+-------+-------:
            | S S B | B B B | B B B |
            | S S B | B B B | B B B |
            | . . . | . . . | . . . |
            :-------+-------+-------:
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            '-------'-------'-------'
            ]]></code>
            Where:
            <list type="table">
            <item><term>P</term><description>Pair Cells.</description></item>
            <item><term>S</term><description>Square Cells.</description></item>
            <item><term>B</term><description>Base-line Cells.</description></item>
            </list>
            </summary>
            <param name="Square">The square cells that is <c>S</c> in that sketch.</param>
            <param name="BaseLine">The base-line cells that is <c>B</c> in that sketch.</param>
            <param name="Pair">The pair cells that is <c>P</c> in that sketch.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern.#ctor(Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@)">
            <summary>
            Defines a pattern that is a Qiu's deadly pattern technique structure in theory. The sketch is like:
            <code><![CDATA[
            .-------.-------.-------.
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | P P . | . . . | . . . |
            :-------+-------+-------:
            | S S B | B B B | B B B |
            | S S B | B B B | B B B |
            | . . . | . . . | . . . |
            :-------+-------+-------:
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            '-------'-------'-------'
            ]]></code>
            Where:
            <list type="table">
            <item><term>P</term><description>Pair Cells.</description></item>
            <item><term>S</term><description>Square Cells.</description></item>
            <item><term>B</term><description>Base-line Cells.</description></item>
            </list>
            </summary>
            <param name="Square">The square cells that is <c>S</c> in that sketch.</param>
            <param name="BaseLine">The base-line cells that is <c>B</c> in that sketch.</param>
            <param name="Pair">The pair cells that is <c>P</c> in that sketch.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern.Square">
            <summary>The square cells that is <c>S</c> in that sketch.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern.BaseLine">
            <summary>The base-line cells that is <c>B</c> in that sketch.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern.Pair">
            <summary>The pair cells that is <c>P</c> in that sketch.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern.Map">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern.Equals(Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Patterns.UniqueLoop">
            <summary>
            Represents for a data set that describes the complete information about a unique loop technique.
            </summary>
            <param name="Loop">Indicates the cells used in this whole unique loop.</param>
            <param name="DigitsMask">Indicates the digits used, represented as a mask of type <see cref="T:System.Int16"/>.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.UniqueLoop.#ctor(Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Represents for a data set that describes the complete information about a unique loop technique.
            </summary>
            <param name="Loop">Indicates the cells used in this whole unique loop.</param>
            <param name="DigitsMask">Indicates the digits used, represented as a mask of type <see cref="T:System.Int16"/>.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.UniqueLoop.Loop">
            <summary>Indicates the cells used in this whole unique loop.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.UniqueLoop.DigitsMask">
            <summary>Indicates the digits used, represented as a mask of type <see cref="T:System.Int16"/>.</summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Patterns.UniquePolygon">
            <summary>
            Defines a pattern that is a unique polygon technique structure in theory. The sketch is like:
            <code><![CDATA[
            .-------.-------.-------.
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            :-------+-------+-------:
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | . . . | P P . |
            :-------+-------+-------:
            | . . . | . . Q | S S . |
            | . . . | . . Q | S(S). |
            | . . . | . . . | . . . |
            '-------'-------'-------'
            ]]></code>
            Where:
            <list type="table">
            <item><term>P</term><description>The first group of cells.</description></item>
            <item><term>Q</term><description>The second group of cells.</description></item>
            <item>
            <term>S</term>
            <description>
            The square cells of size 3 or 4. The cell with the bracket (r8c8 in the picture)
            is optional.
            </description>
            </item>
            </list>
            </summary>
            <param name="Mask">The mask that forms a structure.</param>
            <remarks>
            <para>
            This <see cref="P:Sudoku.Solving.Logical.Patterns.UniquePolygon.Mask"/> is of type <see cref="T:System.Int64"/>,
            where the distribution of each bit is as follows:
            <code><![CDATA[
            0      7     14     21     28     35     42     49     56
            ↓      ↓      ↓      ↓      ↓      ↓      ↓      ↓      ↓
            |-------|-------|-------|-------|-------|-------|-------|-------|
            ↑       ↑       ↑       ↑       ↑       ↑       ↑       ↑       ↑
            0       8      16      24      32      40      48      56      64
            ]]></code>
            where the bit <c>[0..56]</c> is for 8 cells, the last 7 bits determine the pattern is a
            heptagon or a octagon. If the value is 127 (not available), the pattern will be a heptagon.
            </para>
            <para>
            Due to the rendering engine, you have to check this file rather than the tip window.
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.UniquePolygon.#ctor(System.Int64)">
            <summary>
            Defines a pattern that is a unique polygon technique structure in theory. The sketch is like:
            <code><![CDATA[
            .-------.-------.-------.
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            :-------+-------+-------:
            | . . . | . . . | . . . |
            | . . . | . . . | . . . |
            | . . . | . . . | P P . |
            :-------+-------+-------:
            | . . . | . . Q | S S . |
            | . . . | . . Q | S(S). |
            | . . . | . . . | . . . |
            '-------'-------'-------'
            ]]></code>
            Where:
            <list type="table">
            <item><term>P</term><description>The first group of cells.</description></item>
            <item><term>Q</term><description>The second group of cells.</description></item>
            <item>
            <term>S</term>
            <description>
            The square cells of size 3 or 4. The cell with the bracket (r8c8 in the picture)
            is optional.
            </description>
            </item>
            </list>
            </summary>
            <param name="Mask">The mask that forms a structure.</param>
            <remarks>
            <para>
            This <see cref="P:Sudoku.Solving.Logical.Patterns.UniquePolygon.Mask"/> is of type <see cref="T:System.Int64"/>,
            where the distribution of each bit is as follows:
            <code><![CDATA[
            0      7     14     21     28     35     42     49     56
            ↓      ↓      ↓      ↓      ↓      ↓      ↓      ↓      ↓
            |-------|-------|-------|-------|-------|-------|-------|-------|
            ↑       ↑       ↑       ↑       ↑       ↑       ↑       ↑       ↑
            0       8      16      24      32      40      48      56      64
            ]]></code>
            where the bit <c>[0..56]</c> is for 8 cells, the last 7 bits determine the pattern is a
            heptagon or a octagon. If the value is 127 (not available), the pattern will be a heptagon.
            </para>
            <para>
            Due to the rendering engine, you have to check this file rather than the tip window.
            </para>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.UniquePolygon.Mask">
            <summary>The mask that forms a structure.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.UniquePolygon.IsHeptagon">
            <summary>
            Indicates whether the specified pattern is a heptagon.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.UniquePolygon.Pair1Map">
            <summary>
            Indicates the map of pair 1 cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.UniquePolygon.Pair2Map">
            <summary>
            Indicates the map of pair 2 cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.UniquePolygon.CenterCellsMap">
            <summary>
            The map of other three (or four) cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.UniquePolygon.Map">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.UniquePolygon.Pair1">
            <summary>
            Indicates the pair 1.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.UniquePolygon.Pair2">
            <summary>
            Indicates the pair 2.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Patterns.UniquePolygon.CenterCells">
            <summary>
            Indicates the other three (or four) cells.
            </summary>
            <remarks>
            <b>If and only if</b> the fourth value in the returned quadruple is available.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.UniquePolygon.Deconstruct(System.ValueTuple{System.Int32,System.Int32}@,System.ValueTuple{System.Int32,System.Int32}@,System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax to define your own deconstruction logic.
				</summary>
				<remarks>
					<para>
						For example, if you have defined a <see langword="static" /> deconstruction method <c>Deconstruct</c>
						in a <see langword="static class" />, without any return value:
						<code>
<![CDATA[
public static void Deconstruct(out string name, out int age)
{
    name = Name;
    age = Age;
}
]]>
						</code>
						The following code will be legal.
						<code>
<![CDATA[
// Use explicitly typed variables to get a deconstruction.
(string name, int age) = student;

// Or use the type inferring to omit the type of each variable having been deconstructed.
var (name, age) = student;

// Of course, you can also use the invocation to get values.
student.Deconstruct(out string name, out int age);
]]>
						</code>
					</para>
					<para>
						Deconstruction methods also allow you using deconstruction patterns, like this:
						<code>
<![CDATA[
if (student is (name: var name, age: >= 18))
{
    Console.WriteLine(name);
}
]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.UniquePolygon.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Patterns.UniquePolygon.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.SolverResultFormattingOptions">
            <summary>
            Indicates the formatting options of <see cref="T:Sudoku.Solving.Logical.LogicalSolverResult"/> instance.
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.LogicalSolverResult"/>
        </member>
        <member name="F:Sudoku.Solving.Logical.SolverResultFormattingOptions.None">
            <summary>
            Indicates the none of the formatting option.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.SolverResultFormattingOptions.ShowSeparators">
            <summary>
            Indicates the analysis result will append separators.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.SolverResultFormattingOptions.ShowStepLabel">
            <summary>
            Indicates the analysis result will append the step label.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.SolverResultFormattingOptions.ShowSimple">
            <summary>
            Indicates the analysis result will use simple mode to show steps.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.SolverResultFormattingOptions.ShowBottleneck">
            <summary>
            Indicates the analysis result will show the bottleneck.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.SolverResultFormattingOptions.ShowDifficulty">
            <summary>
            Indicates the analysis result will show the difficulty.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.SolverResultFormattingOptions.ShowStepsAfterBottleneck">
            <summary>
            Indicates the analysis result will show all steps after the bottleneck.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.SolverResultFormattingOptions.ShowStepDetail">
            <summary>
            Indicates the analysis result will show the step detail.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.SolverResultFormattingOptions.ShowSteps">
            <summary>
            Indicates the analysis result will show the steps.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.SolverResultFormattingOptions.ShowGridAndSolutionCode">
            <summary>
            Indicates the analysis result will show grid code for the puzzle itself and its solution.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.SolverResultFormattingOptions.ShowElapsedTime">
            <summary>
            Indicates the analysis result will show elapsed time on solving the puzzle.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Sudoku.Solving.Logical.IStep"/>.
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.IStep"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepExtensions.IsAlmostLockedSets``1(``0)">
            <summary>
            Indicates whether the corresponding technique of the current step is an Almost Locked Sets
            (ALS in abbreviation).
            </summary>
            <typeparam name="T">The type of the step.</typeparam>
            <param name="this">The <see cref="T:Sudoku.Solving.Logical.IStep"/> instance.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepExtensions.IsChaining``1(``0)">
            <summary>
            Indicates whether the corresponding technique of the current step is a chain. The chain techniques are:
            <list type="bullet">
            <item>
            Wings
            <list type="bullet">
            <item>
            Regular wings (XY-Wing, XYZ-Wing, WXYZ-Wing, etc.)
            </item>
            <item>
            Irregular wings (W-Wing, M-Wing, Split-Wing, Local-Wing, Hybrid-Wing)
            </item>
            </list>
            </item>
            <item>
            Short chains
            <list type="bullet">
            <item>
            Two strong links (Skyscraper, Two-string kite, Turbot fish)
            </item>
            <item>
            ALS chaining-like techniques
            <list type="bullet">
            <item>ALS-XZ</item>
            <item>ALS-XY-Wing</item>
            <item>ALS-W-Wing</item>
            </list>
            </item>
            <item>Empty rectangle</item>
            </list>
            </item>
            <!--
            <item>
            Long chains
            <list type="bullet">
            <item>Forcing chains</item>
            <item>Dynamic forcing chains</item>
            </list>
            </item>
            -->
            </list>
            </summary>
            <typeparam name="T">The type of the step.</typeparam>
            <param name="this">The <see cref="T:Sudoku.Solving.Logical.IStep"/> instance.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepExtensions.IsDeadlyPattern``1(``0)">
            <summary>
            Indicates whether the corresponding technique of the current step is a deadly pattern.
            The deadly pattern techniques are:
            <list type="bullet">
            <item>
            Bi-value patterns
            <list type="bullet">
            <item>Unique rectangle (i.e. Uniqueness test)</item>
            <item>Unique loop</item>
            <item>Bi-value universal grave</item>
            </list>
            </item>
            <item>
            Multi-value patterns
            <list type="bullet">
            <item>Extended rectangle</item>
            <item>Unique square</item>
            <item>Unique polygon (Borescoper's deadly pattern as its alias)</item>
            <item>Qiu's deadly pattern</item>
            </list>
            </item>
            <!--
            <item>
            Other deadly patterns
            <list type="bullet">
            <item>Reverse bi-value universal grave</item>
            </list>
            </item>
            -->
            </list>
            </summary>
            <typeparam name="T">The type of the step.</typeparam>
            <param name="this">The <see cref="T:Sudoku.Solving.Logical.IStep"/> instance.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepGatherers.IStepGatherableSearcherOptions">
            <summary>
            Defines an instance that stores the options that bound with an <see cref="T:Sudoku.Solving.Logical.StepSearchers.Specialized.IStepGatherableSearcher"/> instance.
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.StepSearchers.Specialized.IStepGatherableSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepGatherers.IStepGatherableSearcherOptions.OnlyShowSameLevelTechniquesInFindAllSteps">
            <summary>
            Indicates whether the solver only displays the techniques with the same displaying level.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepGatherers.StepsGatherer">
            <summary>
            Defines a steps gatherer.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepGatherers.StepsGatherer.OnlyShowSameLevelTechniquesInFindAllSteps">
            <inheritdoc/>
            <remarks>
            The default value is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepGatherers.StepsGatherer.MaxStepsGathered">
            <inheritdoc/>
            <remarks>
            The default value is 1000.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepGatherers.StepsGatherer.Search(Sudoku.Concepts.Grid@,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IChainingStepSearcher"/>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher._otherStepSearchers">
            <summary>
            Indicates the advanced step searchers.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher.DynamicNestingLevel">
            <summary>
            Indicates the level of dynamic recursion. The value can be 1, 2, 3, 4 and 5.
            </summary>
            <remarks>
            All possible values corresponds to their own cases respectively:
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Supported nesting rule</description>
            </listheader>
            <item>
            <term>0</term>
            <description>Non-dynamic forcing chains</description>
            </item>
            <item>
            <term>1</term>
            <description>Dynamic forcing chains (+ Structural techniques, e.g. <see cref="T:Sudoku.Solving.Logical.StepSearchers.ILockedCandidatesStepSearcher"/>)</description>
            </item>
            <item>
            <term>2</term>
            <description>Dynamic forcing chains (+ AIC)</description>
            </item>
            <item>
            <term>3</term>
            <description>Dynamic forcing chains (+ Multiple forcing chains)</description>
            </item>
            <item>
            <term>4</term>
            <description>Dynamic forcing chains (+ Dynamic forcing chains)</description>
            </item>
            <item>
            <term>5</term>
            <description>Dynamic forcing chains (+ Dynamic forcing chains (+))</description>
            </item>
            </list>
            </remarks>
            <seealso cref="T:Sudoku.Solving.Logical.StepSearchers.ILockedCandidatesStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher.OnAdvanced(Sudoku.Collections.Logical.NodeList,Sudoku.Collections.Logical.NodeList,Sudoku.Collections.Logical.NodeSet,Sudoku.Concepts.Grid@,Sudoku.Concepts.Grid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher.GetAdvancedPotentials(Sudoku.Concepts.Grid@,Sudoku.Concepts.Grid@,Sudoku.Collections.Logical.NodeSet)">
            <summary>
            Get all non-trivial implications (involving fished, naked/hidden sets, etc).
            </summary>
            <param name="grid">Indicates the current grid state.</param>
            <param name="original">Indicates the original grid state.</param>
            <param name="offPotentials">
            <inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher.OnAdvanced(Sudoku.Collections.Logical.NodeList,Sudoku.Collections.Logical.NodeList,Sudoku.Collections.Logical.NodeSet,Sudoku.Concepts.Grid@,Sudoku.Concepts.Grid@)" path="/param[@name='toOff']"/>
            </param>
            <returns>Found <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> instances.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher.CreateChainingOnStep(Sudoku.Concepts.Grid@,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,System.Boolean)">
            <summary>
            Try to create a binary forcing chain hint on "on" state.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher.CreateChainingOffStep(Sudoku.Concepts.Grid@,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,System.Boolean)">
            <summary>
            Try to create a binary forcing chain hint on "off" state.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher.CreateCellForcingStep(Sudoku.Concepts.Grid@,System.Byte,Sudoku.Solving.Logical.Patterns.ChainNode,System.Collections.Generic.Dictionary{System.Byte,Sudoku.Collections.Logical.NodeSet})">
            <summary>
            Try to create a cell forcing chain hint.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher.CreateHouseForcingStep(Sudoku.Concepts.Grid@,System.Int32,System.Byte,Sudoku.Solving.Logical.Patterns.ChainNode,System.Collections.Generic.Dictionary{System.Byte,Sudoku.Collections.Logical.NodeSet})">
            <summary>
            Try to create a region (house) forcing chain hint.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.AlmostLockedCandidatesStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedCandidatesStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.AlmostLockedCandidatesStepSearcher.CheckAlmostLockedQuadruple">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.AlmostLockedCandidatesStepSearcher.Sudoku#Solving#Logical#StepSearchers#IAlmostLockedCandidatesStepSearcher#CheckForValues">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.AlmostLockedCandidatesStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.AlmostLockedCandidatesStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@)">
             <summary>
             Process the calculation.
             </summary>
             <param name="context"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.AlmostLockedCandidatesStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)" path="/param[@name='context']"/></param>
             <param name="size">The size.</param>
             <param name="baseSet">The base set.</param>
             <param name="coverSet">The cover set.</param>
             <param name="a">The left grid map.</param>
             <param name="b">The right grid map.</param>
             <param name="c">The intersection.</param>
             <remarks>
             <para>
             The diagrams:
             <code><![CDATA[
             ALP:
             abx aby | ab
             abz     |
            
             ALT:
             abcw abcx | abc abc
             abcy abcz |
             ]]></code>
             </para>
             <para>Algorithm:</para>
             <para>
             If the cell <c>ab</c> (in ALP) or <c>abc</c> (in ALT) is filled with the digit <c>p</c>,
             then the cells <c>abx</c> and <c>aby</c> (in ALP) and <c>abcw</c> and <c>abcx</c> (in ALT) can't
             fill the digit <c>p</c>. Therefore the digit <c>p</c> can only be filled into the left-side block.
             </para>
             <para>
             If the block only contains those cells that can contain the digit <c>p</c>, the ALP or ALT will be formed,
             and the elimination is <c>z</c> (in ALP) and <c>y</c> and <c>z</c> (in ALT).
             </para>
             </remarks>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.AlmostLockedCandidatesStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.AlmostLockedSetsWWingStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedSetsWWingStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.AlmostLockedSetsWWingStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.AlmostLockedSetsWWingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.AlmostLockedSetsXyWingStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedSetsXyWingStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.AlmostLockedSetsXyWingStepSearcher.AllowCollision">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.AlmostLockedSetsXyWingStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.AlmostLockedSetsXyWingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.AlmostLockedSetsXzStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedSetsXzStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.AlmostLockedSetsXzStepSearcher.AllowCollision">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.AlmostLockedSetsXzStepSearcher.AllowLoopedPatterns">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.AlmostLockedSetsXzStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc />
            <remarks>
            <deverloper-notes>
		<para>
			<b>Developer Notes</b>
		</para>
	</deverloper-notes>
            <para>
            This algorithm uses a concept called Restricted Common Candidate (abbr. RCC) to limit the implementation.
            If you don't know that is an RCC,
            <see href="https://sunnieshine.github.io/Sudoku/terms/restricted-common-candidate">this link</see>
            will tell you what is it.
            </para>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.AlmostLockedSetsXzStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.BivalueOddagonStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IBivalueOddagonStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.BivalueOddagonStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.BivalueOddagonStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.BivalueUniversalGraveStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IBivalueUniversalGraveStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.BivalueUniversalGraveStepSearcher.SearchExtendedTypes">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.BivalueUniversalGraveStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.BivalueUniversalGraveStepSearcher.CheckSingleDigit(System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Check whether all candidates in the list has same digit value.
            </summary>
            <param name="list">The list of all true candidates.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.BivalueUniversalGraveStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.BowmanBingoStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IBowmanBingoStepSearcher"/>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.BowmanBingoStepSearcher.SinglesSearcher">
            <summary>
            The singles searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.BowmanBingoStepSearcher._tempConclusions">
            <summary>
            All temporary conclusions.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.BowmanBingoStepSearcher.MaxLength">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.BowmanBingoStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.BowmanBingoStepSearcher.GetLinks">
            <summary>
            Get links.
            </summary>
            <returns>The links.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.BowmanBingoStepSearcher.RecordUndoInfo(Sudoku.Concepts.Grid@,System.Int32,System.Int32)">
            <summary>
            Record all information to be used in undo grid.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell">The cell.</param>
            <param name="digit">The digit.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.BowmanBingoStepSearcher.UndoGrid(Sudoku.Concepts.Grid@,System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32,System.Int16)">
            <summary>
            Undo the grid.
            </summary>
            <param name="grid">The grid.</param>
            <param name="list">The list.</param>
            <param name="cell">The cell.</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.BowmanBingoStepSearcher.IsValidGrid(Sudoku.Concepts.Grid@,System.Int32)">
            <summary>
            To check the specified cell has a same digit filled in a cell
            which is same house with the current one.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell">The cell.</param>
            <returns>The result.</returns>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.BowmanBingoStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.BruteForceStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IBruteForceStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.BruteForceStepSearcher.Solution">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.BruteForceStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.BruteForceStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ChainingStepSearcher">
            <summary>
            Provides with a base type as a step searcher operating on chaining.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ChainingStepSearcher.GetOnToOff(Sudoku.Concepts.Grid@,Sudoku.Solving.Logical.Patterns.ChainNode,System.Boolean)">
            <summary>
            Get the set of all <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/>s that cannot be valid (are "off") if the given potential is "on"
            (i.e. if its value is the correct one for the cell).
            </summary>
            <param name="grid"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='grid']"/></param>
            <param name="p">The potential that is assumed to be "on"</param>
            <param name="isY"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='isY']"/></param>
            <returns>The set of potentials that must be "off".</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ChainingStepSearcher.GetOffToOn(Sudoku.Concepts.Grid@,Sudoku.Solving.Logical.Patterns.ChainNode,System.Nullable{Sudoku.Concepts.Grid}@,Sudoku.Collections.Logical.NodeSet,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get the set of all <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/>s that cannot be valid (are "off") if the given potential is "on"
            (i.e. if its value is the correct one for the cell).
            </summary>
            <param name="grid"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='grid']"/></param>
            <param name="p">The potential that is assumed to be "off"</param>
            <param name="source">
            <inheritdoc
                cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.DoCycles(Sudoku.Concepts.Grid@,Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet,System.Boolean,System.Boolean,Sudoku.Collections.Logical.NodeList,Sudoku.Solving.Logical.Patterns.ChainNode)"
                path="/param[@name='source']"/>
            </param>
            <param name="offPotentials">Indicates the <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> instances that are already set "off".</param>
            <param name="isX"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='isX']"/></param>
            <param name="isY"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='isY']"/></param>
            <param name="allowDynamic"><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowDynamic" path="/summary"/></param>
            <returns>The set of potentials that must be "off".</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ChainingStepSearcher.DoChaining(Sudoku.Concepts.Grid,Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet,System.Boolean,System.Boolean)">
            <summary>
            Given the initial sets of potentials that are assumed to be "on" and "off",
            complete the sets with all other potentials that must be "on" or "off" as a result of the assumption.
            </summary>
            <param name="grid"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='grid']"/></param>
            <param name="toOn">The potentials that are assumed to be "on".</param>
            <param name="toOff">The potentials that are assumed to be "off".</param>
            <param name="allowNishio"><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowNishio" path="/summary"/></param>
            <param name="allowDynamic"><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowDynamic" path="/summary"/></param>
            <returns>If success, <see langword="null"/>.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ChainingStepSearcher.OnAdvanced(Sudoku.Collections.Logical.NodeList,Sudoku.Collections.Logical.NodeList,Sudoku.Collections.Logical.NodeSet,Sudoku.Concepts.Grid@,Sudoku.Concepts.Grid@)">
            <summary>
            Handles on advanced chaining cases.
            </summary>
            <param name="pendingOn">The pending potentials that are assumed to be "on".</param>
            <param name="pendingOff">The pending potentials that are assumed to be "off".</param>
            <param name="toOff">The original potentials that are assumed to be "off".</param>
            <param name="grid"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='grid']"/></param>
            <param name="original">Indicates the original grid.</param>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ChromaticPatternStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IChromaticPatternStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ChromaticPatternStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ChromaticPatternStepSearcher.CheckType1(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@,Sudoku.Concepts.CellMap@,System.Int32[])">
            <summary>
            Checks for the type 1.
            Here I give you 2 examples to test this method:
            <list type="number">
            <item>
            <see href="http://forum.enjoysudoku.com/the-tridagon-rule-t39859.html#p318380">the first one</see>
            </item>
            <item>
            <see href="http://forum.enjoysudoku.com/the-tridagon-rule-t39859.html#p318378">the second one</see>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ChromaticPatternStepSearcher.CheckXz(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@,Sudoku.Concepts.CellMap@,System.Int32[])">
            <summary>
            Checks for XZ rule.
            Here I give you 1 example to test this method:
            <list type="number">
            <item>
            <code>
            0000000010000023400+45013602000+470036000089400004600000012500060403100520560000100:611 711 811 911 712 812 912 915 516 716 816 721 821 921 925 565 568 779 879 979 794 894 994 799 899 999
            </code>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.ChromaticPatternStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ComplexFishStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IComplexFishStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.ComplexFishStepSearcher.MaxSize">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ComplexFishStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ComplexFishStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.ComplexFishStep},Sudoku.Concepts.Grid@,System.Collections.Generic.IList{Sudoku.Solving.Conclusion}[],System.Int32,System.Boolean)">
            <summary>
            Get all possible fish steps.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="pomElims">The possible eliminations to check, specified as a dictionary.</param>
            <param name="digit">The current digit used.</param>
            <param name="onlyFindOne">Indicates whether the method only find one possible step.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ComplexFishStepSearcher.GetPomEliminationsFirstly(Sudoku.Concepts.Grid@)">
            <summary>
            Get POM technique eliminations at first.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The dictionary that contains all eliminations grouped by digit used.</returns>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.ComplexFishStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.DeathBlossomStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IDeathBlossomStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.DeathBlossomStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.DeathBlossomStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.DominoLoopStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IDominoLoopStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.DominoLoopStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.DominoLoopStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.EmptyRectangleIntersectionPairStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IEmptyRectangleIntersectionPairStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.EmptyRectangleIntersectionPairStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.EmptyRectangleIntersectionPairStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.EmptyRectangleStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IEmptyRectangleStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.EmptyRectangleStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.EmptyRectangleStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ExtendedRectangleStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IExtendedRectangleStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ExtendedRectangleStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ExtendedRectangleStepSearcher.CheckType1(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.IStep},Sudoku.Concepts.Grid@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int16,System.Int32,System.Boolean)">
            <summary>
            Check type 1.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="allCellsMap">The map of all cells used.</param>
            <param name="extraCells">The extra cells map.</param>
            <param name="normalDigits">The normal digits mask.</param>
            <param name="extraDigit">The extra digit.</param>
            <param name="onlyFindOne">Indicates whether the searcher only searches for one step.</param>
            <returns>The first found step if worth.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ExtendedRectangleStepSearcher.CheckType2(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.IStep},Sudoku.Concepts.Grid@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int16,System.Int32,System.Boolean)">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="allCellsMap">The map of all cells used.</param>
            <param name="extraCells">The extra cells map.</param>
            <param name="normalDigits">The normal digits mask.</param>
            <param name="extraDigit">The extra digit.</param>
            <param name="onlyFindOne">Indicates whether the searcher only searches for one step.</param>
            <returns>The first found step if worth.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ExtendedRectangleStepSearcher.CheckType3Naked(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.IStep},Sudoku.Concepts.Grid@,Sudoku.Concepts.CellMap@,System.Int16,System.Int16,Sudoku.Concepts.CellMap@,System.Boolean)">
            <summary>
            Check type 3.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="allCellsMap">The map of all cells used.</param>
            <param name="normalDigits">The normal digits mask.</param>
            <param name="extraDigits">The extra digits mask.</param>
            <param name="extraCellsMap">The map of extra cells.</param>
            <param name="onlyFindOne">Indicates whether the searcher only searches for one step.</param>
            <returns>The first found step if worth.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ExtendedRectangleStepSearcher.CheckType14(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.IStep},Sudoku.Concepts.Grid@,Sudoku.Concepts.CellMap@,System.Int16,Sudoku.Concepts.CellMap@,System.Boolean)">
            <summary>
            Check type 4 and a part of type 1 that the method
            <see cref="M:Sudoku.Solving.Logical.StepSearchers.ExtendedRectangleStepSearcher.CheckType1(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.IStep},Sudoku.Concepts.Grid@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int16,System.Int32,System.Boolean)"/>
            cannot be found.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="allCellsMap">The map of all cells used.</param>
            <param name="normalDigits">The normal digits mask.</param>
            <param name="extraCellsMap">The map of extra cells.</param>
            <param name="onlyFindOne">Indicates whether the searcher only searches for one step.</param>
            <returns>The first found step if worth.</returns>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.ExtendedRectangleStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.FireworkStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IFireworkStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.FireworkStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.FireworkStepSearcher.CheckPairType1(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.IStep},Sudoku.Concepts.Grid@,System.Boolean,Sudoku.Solving.Logical.Patterns.Firework@,System.Int32)">
            <summary>
            Checks for firework pair type 1 steps.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.FireworkStepSearcher.CheckTriple(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.IStep},Sudoku.Concepts.Grid@,System.Boolean,Sudoku.Solving.Logical.Patterns.Firework@,System.Int16,System.Int32)">
            <summary>
            Checks for firework triple steps.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.FireworkStepSearcher.CheckQuadruple(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.IStep},Sudoku.Concepts.Grid@,System.Boolean,Sudoku.Solving.Logical.Patterns.Firework@)">
            <summary>
            Checks for firework quadruple steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.FireworkStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.GuardianStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IGuardianStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.GuardianStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.GuardianStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.GurthSymmetricalPlacementStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IGurthSymmetricalPlacementStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.GurthSymmetricalPlacementStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.GurthSymmetricalPlacementStepSearcher.RecordHighlightCells(Sudoku.Concepts.Grid@,System.Collections.Generic.List{Sudoku.Presentation.Nodes.CellViewNode},System.Nullable{System.Int32}[])">
            <summary>
            Records all possible highlight cells.
            </summary>
            <param name="grid">The grid as reference.</param>
            <param name="cellOffsets">The target collection.</param>
            <param name="mapping">The mapping relation.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.GurthSymmetricalPlacementStepSearcher.CheckDiagonal(Sudoku.Concepts.Grid@)">
            <summary>
            Checks for diagonal symmetry steps.
            </summary>
            <param name="grid">The grid.</param>
            <returns>A correct step if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.GurthSymmetricalPlacementStepSearcher.CheckAntiDiagonal(Sudoku.Concepts.Grid@)">
            <summary>
            Checks for anti-diagonal symmetry steps.
            </summary>
            <param name="grid">The grid.</param>
            <returns>A correct step if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.GurthSymmetricalPlacementStepSearcher.CheckCentral(Sudoku.Concepts.Grid@)">
            <summary>
            Checks for central symmetry steps.
            </summary>
            <param name="grid">The grid.</param>
            <returns>A correct step if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.GurthSymmetricalPlacementStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedCandidatesStepSearcher">
            <summary>
            Provides with an <b>Almost Locked Candidates</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Almost Locked Pair</item>
            <item>Almost Locked Triple</item>
            <item>Almost Locked Quadruple (Maybe unnecessary)</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedCandidatesStepSearcher.CheckAlmostLockedQuadruple">
            <summary>
            Indicates whether the user checks the almost locked quadruple.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedCandidatesStepSearcher.CheckForValues">
            <summary>
            Indicates whether the searcher checks for values (givens and modifiables)
            to form an almost locked candidates. If the value is <see langword="true"/>,
            some possible Sue de Coqs steps will be replaced with Almost Locked Candidates ones.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedSetsStepSearcher">
            <summary>
            Defines a step searcher that searches for almost locked sets steps.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedSetsStepSearcher.Gather(Sudoku.Concepts.Grid@)">
            <inheritdoc cref="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.Gather(Sudoku.Concepts.Grid@)"/>
            <remarks>
            Different with the original method <see cref="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.Gather(Sudoku.Concepts.Grid@)"/>,
            this method will only uses the buffer to determine the info, which is unsafe
            when calling the method without having initialized those maps in the buffer type,
            <see cref="T:Sudoku.Buffers.FastProperties"/>.
            </remarks>
            <seealso cref="T:Sudoku.Solving.Logical.Patterns.AlmostLockedSet"/>
            <seealso cref="M:Sudoku.Solving.Logical.Patterns.AlmostLockedSet.Gather(Sudoku.Concepts.Grid@)"/>
            <seealso cref="T:Sudoku.Buffers.FastProperties"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedSetsWWingStepSearcher">
            <summary>
            Provides with an <b>Almost Locked Sets W-Wing</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Almost Locked Sets W-Wing</item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedSetsXyWingStepSearcher">
            <summary>
            Provides with an <b>Almost Locked Sets XY-Wing</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Almost Locked Sets XY-Wing</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedSetsXyWingStepSearcher.AllowCollision">
            <summary>
            Indicates whether two ALSes make an collision, which means they share the some same cells. 
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedSetsXzStepSearcher">
            <summary>
            Provides with an <b>Almost Locked Sets XZ Rule</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Extended Subset Principle</item>
            <item>Singly-linked Almost Locked Sets XZ Rule</item>
            <item>Doubly-linked Almost Locked Sets XZ Rule</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedSetsXzStepSearcher.AllowCollision">
            <summary>
            Indicates whether two ALSes make an collision, which means they share the some same cells. 
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.IAlmostLockedSetsXzStepSearcher.AllowLoopedPatterns">
            <summary>
            Indicates whether the searcher will enhance the searching to find all possible eliminations
            for looped-ALS eliminations.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IBivalueOddagonStepSearcher">
            <summary>
            <para>
            Provides with a <b>Bi-value Oddagon</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Bi-value Oddagon Type 2</item>
            <item>Bi-value Oddagon Type 3</item>
            </list>
            </para>
            <para>
            In practicing, type 1 and 4 do not exist. A bi-value oddagon type 1 is a remote pair
            and a type 4 cannot be formed as a stable technique structure.
            </para>
            <para>A remote pair is a XY-Chain that only uses two digits.</para>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IBivalueUniversalGraveStepSearcher">
            <summary>
            Provides with a <b>Bi-value Universal Grave</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>
            Basic types:
            <list type="bullet">
            <item>Bi-value Universal Grave Type 1</item>
            <item>Bi-value Universal Grave Type 2</item>
            <item>Bi-value Universal Grave Type 3</item>
            <item>Bi-value Universal Grave Type 4</item>
            </list>
            </item>
            <item>
            Extended types:
            <list type="bullet">
            <item>Bi-value Universal Grave + n</item>
            <item>Bi-value Universal Grave XZ</item>
            </list>
            </item>
            <item>Bi-value Universal Grave False Candidate Type</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.IBivalueUniversalGraveStepSearcher.SearchExtendedTypes">
            <summary>
            Indicates whether the searcher should call the extended BUG checker
            to search for all true candidates no matter how difficult searching.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IBivalueUniversalGraveStepSearcher.FindTrueCandidates(Sudoku.Concepts.Grid@,System.Collections.Generic.IReadOnlyList{System.Int32}@,System.Int32)">
            <summary>
            Finds all possible true candidates in this current grid.
            </summary>
            <param name="grid">The grid to find all possible true candidates.</param>
            <param name="trueCandidates">All possible true candidates returned.</param>
            <param name="maximumCellsToCheck">Indicates the maximum number of possible cells to check.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating whether the grid contains any possible true candidates.
            If so, the argument <paramref name="trueCandidates"/> won't be <see langword="null"/>.
            </returns>
            <remarks>
            A <b>true candidate</b> is a candidate that makes the puzzle containing no valid solution
            if it is eliminated from the current puzzle. It is a strict concept, which means sometimes the puzzle
            doesn't contain any satisfied candidate to make the puzzle containing no solution if being eliminated.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Throws when the puzzle contains multiple solutions or even no solution.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IBivalueUniversalGraveStepSearcher.FormsPattern(Sudoku.Concepts.Grid@)">
            <summary>
            Checks whether the specified grid forms a BUG deadly pattern.
            This method does not use the cached buffers in type <see cref="T:Sudoku.Buffers.FastProperties"/>.
            </summary>
            <param name="grid">The grid.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
            <seealso cref="T:Sudoku.Buffers.FastProperties"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IBowmanBingoStepSearcher">
            <summary>
            Provides with a <b>Bowman's Bingo</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Bowman's Bingo</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.IBowmanBingoStepSearcher.MaxLength">
            <summary>
            Indicates the maximum length of the bowman bingo you want to search for.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IBruteForceStepSearcher">
            <summary>
            Provides with a <b>Brute Force</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Brute Force</item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IChainingStepSearcher">
            <summary>
            Provides with a <b>Chain</b> step searcher using same algorithm with <b>Chaining</b> used by a program called Sudoku Explainer.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Alternating Inference Chains (Cycles)</item>
            <item>
            Forcing Chains:
            <list type="bullet">
            <item>
            Multiple Forcing Chains:
            <list type="bullet">
            <item>Cell Forcing Chains</item>
            <item>Region (House) Forcing Chains</item>
            </list>
            </item>
            <item>
            Dynamic Forcing Chains:
            <list type="bullet">
            <item>Dynamic Cell Forcing Chains</item>
            <item>Dynamic Region (House) Forcing Chains</item>
            <item>Dynamic Contradiction Forcing Chains</item>
            <item>Dynamic Double Forcing Chains</item>
            </list>
            </item>
            </list>
            </item>
            </list>
            </summary>
            <remarks>
            The type is special: it uses source code from another project called Sudoku Explainer.
            However unfortunately, I cannot find any sites available of the project.
            One of the original website is <see href="https://diuf.unifr.ch/pai/people/juillera/Sudoku/Sudoku.html">this link</see> (A broken link).
            </remarks>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IChromaticPatternStepSearcher">
            <summary>
            Provides with a <b>Chromatic Pattern</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>
            Basic types:
            <list type="bullet">
            <item>Chromatic Pattern type 1</item>
            <!--
            <item>Chromatic Pattern type 2</item>
            <item>Chromatic Pattern type 3</item>
            <item>Chromatic Pattern type 4</item>
            -->
            </list>
            </item>
            <item>
            Extended types:
            <list type="bullet">
            <item>Chromatic Pattern XZ</item>
            </list>
            </item>
            </list>
            </summary>
            <remarks>
            For more information about a "chromatic pattern",
            please visit <see href="http://forum.enjoysudoku.com/chromatic-patterns-t39885.html">this link</see>.
            </remarks>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.IChromaticPatternStepSearcher.PatternOffsets">
            <summary>
            The possible pattern offsets.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IChromaticPatternStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This constructor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IComplexFishStepSearcher">
            <summary>
            Provides with a <b>Complex Fish</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>
            Franken Fishes
            <list type="bullet">
            <item>Finned Franken Fish</item>
            <item>Sashimi Franken Fish</item>
            </list>
            </item>
            <item>
            Mutant Fishes
            <list type="bullet">
            <item>Finned Mutant Fish</item>
            <item>Sashimi Mutant Fish</item>
            </list>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IDeadlyPatternStepSearcher">
            <summary>
            Defines a step searcher that searches for deadly pattern steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IDeathBlossomStepSearcher">
            <summary>
            Provides with a <b>Death Blossom</b> step searcher.
            <!--
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Death Blossom Cell Type</item>
            <item>Death Blossom Region Type (House Type)</item>
            </list>
            -->
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IDeathBlossomStepSearcher.GatherGroupedByCell(Sudoku.Concepts.Grid@)">
            <summary>
            <para>Gathers almost locked sets and groups them by cell related.</para>
            <para>
            For example, <c>r1c12(123)</c> is an almost locked set, and cells <c>{ r1c3, r23c123 }</c>
            can be related to that ALS.
            </para>
            </summary>
            <param name="grid">The grid used.</param>
            <returns>The dictionary of grouped result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IDominoLoopStepSearcher">
            <summary>
            Provides with a <b>Domino Loop</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Domino Loop</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.IDominoLoopStepSearcher.SkLoopTable">
            <summary>
            The position table of all SK-loops.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IDominoLoopStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This constructor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IEmptyRectangleIntersectionPairStepSearcher">
            <summary>
            Provides with an <b>Empty Rectangle Intersection Pair</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Empty Rectangle Intersection Pair</item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IEmptyRectangleStepSearcher">
            <summary>
            Provides with an <b>Empty Rectangle</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Empty Rectangle</item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IEmptyRectangleStepSearcher.IsEmptyRectangle(Sudoku.Concepts.CellMap@,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Determine whether the specified cells in the specified block form an empty rectangle.
            </summary>
            <param name="cells">The cells to be checked.</param>
            <param name="block">The block where the cells may form an empty rectangle structure.</param>
            <param name="row">The row that the empty rectangle used.</param>
            <param name="column">The column that the empty rectangle used.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating that. If <see langword="true"/>,
            both arguments <paramref name="row"/> and <paramref name="column"/> can be used;
            otherwise, both arguments should be discards.
            </returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IExocetStepSearcher">
            <summary>
            Defines a step searcher that searches for exocet steps.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.IExocetStepSearcher.Patterns">
            <summary>
            Indicates all patterns.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.IExocetStepSearcher.CheckAdvanced">
            <summary>
            Indicates whether the searcher will find advanced eliminations.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IExocetStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This constructor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IExtendedRectangleStepSearcher">
            <summary>
            Provides with an <b>Extended Rectangle</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Extended Rectangle Type 1</item>
            <item>Extended Rectangle Type 2</item>
            <item>Extended Rectangle Type 3</item>
            <item>Extended Rectangle Type 4</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.IExtendedRectangleStepSearcher.PatternInfos">
            <summary>
            Indicates all possible extended rectangle pattern combinations.
            </summary>
            <remarks>
            <para>The list contains two types of <b>Extended Rectangle</b>s:</para>
            <para>
            Fit type (2 blocks spanned):
            <code><![CDATA[
            ab | ab
            bc | bc
            ac | ac
            ]]></code>
            </para>
            <para>
            Fat type (3 blocks spanned):
            <code><![CDATA[
            ab | ac | bc
            ab | ac | bc
            ]]></code>
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IExtendedRectangleStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This constructor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.BitSubsetsGenerator">
            <summary>
            Encapsulates a bit combination generator.
            </summary>
            <remarks>
            You can use this struct like this:
            <code><![CDATA[
            foreach (short mask in new BitSubsetsGenerator(9, 3))
            {
                // Do something to use the mask.
            }
            ]]></code>
            </remarks>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.BitSubsetsGenerator._enumerator">
            <summary>
            The inner enumerator.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.BitSubsetsGenerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance with the specified number of bits
            and <see langword="true"/> bits.
            </summary>
            <param name="bitCount">The number of bits.</param>
            <param name="oneCount">The number of <see langword="true"/> bits.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.BitSubsetsGenerator.GetEnumerator">
            <summary>
            Gets the enumerator of the current instance in order to use <see langword="foreach"/> loop.
            </summary>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.Enumerator">
            <summary>
            Indicates the enumerator of the current instance.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.Enumerator._mask">
            <summary>
            The mask.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.Enumerator._isLast">
            <summary>
            Indicates whether that the value is the last one.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.Enumerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance with the specified number of bits
            and <see langword="true"/> bits.
            </summary>
            <param name="bitCount">The number of bits.</param>
            <param name="oneCount">The number of <see langword="true"/> bits.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IFireworkStepSearcher">
            <summary>
            Provides with a <b>Firework</b> step searcher. The step searcher will include the following techniques:
            <list type="bullet">
            <item>
            Firework Pair:
            <list type="bullet">
            <item>Firework Pair Type 1 (Single Firework + 2 Bi-value cells)</item>
            <!--
            <item>Firework Pair Type 2 (Double Fireworks)</item>
            <item>Firework Pair Type 3 (Single Fireworks + Empty Rectangle)</item>
            -->
            </list>
            </item>
            <item>Firework Triple</item>
            <item>Firework Quadruple</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.IFireworkStepSearcher.Patterns">
            <summary>
            Indicates the patterns used.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IFireworkStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This constructor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IFireworkStepSearcher.GetFireworkDigits(System.Int32,System.Int32,System.Int32,Sudoku.Concepts.Grid@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@)">
            <summary>
            <para>Checks for all digits which the cells containing form a firework pattern.</para>
            <para>
            This method returns the digits that satisfied the condition. If none found,
            this method will return 0.
            </para>
            </summary>
            <param name="c1">The cell 1 used in this pattern.</param>
            <param name="c2">The cell 2 used in this pattern.</param>
            <param name="pivot">The pivot cell.</param>
            <param name="grid">The grid.</param>
            <param name="house1CellsExcluded">
            The excluded cells that is out of the firework structure in the <paramref name="c1"/>'s house.
            </param>
            <param name="house2CellsExcluded">
            The excluded cells that is out of the firework structure in the <paramref name="c2"/>'s house.
            </param>
            <returns>All digits that satisfied the firework rule. If none found, 0.</returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IFishStepSearcher">
            <summary>
            Defines a step searcher that searches for fish steps.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.IFishStepSearcher.MaxSize">
            <summary>
            Indicates the maximum size the searcher can search for.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IFishStepSearcher.IsSashimi(System.Int32[],Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check whether the fish is sashimi.
            </summary>
            <param name="baseSets">The base sets.</param>
            <param name="fins">All fins.</param>
            <param name="digit">The digit.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating that. All cases are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The fish is a sashimi finned fish.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>The fish is a normal finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The fish doesn't contain any fin.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IGuardianStepSearcher">
            <summary>
            Provides with a <b>Guardian</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Guardian</item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IGurthSymmetricalPlacementStepSearcher">
            <summary>
            Provides with a <b>Gurth's Symmetrical Placement</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Gurth's Symmetrical Placement (Basic Type)</item>
            <!--<item>Gurth's Symmetrical Placement (Shuffling Type)</item>-->
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IIntersectionStepSearcher">
            <summary>
            Defines a step searcher that searches for intersection steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IIrregularWingStepSearcher">
            <summary>
            Represents for a step searcher that searches for irregular wing steps.
            </summary>
            <remarks>
            In fact, <c>Hybrid-Wing</c>s, <c>Local-Wing</c>s, <c>Split-Wing</c>s and <c>M-Wing</c>s can
            be found in another searcher. In addition, these wings are not elementary and necessary techniques
            so we doesn't need to list them.
            </remarks>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IJuniorExocetStepSearcher">
            <summary>
            Provides with a <b>Junior Exocet</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Junior Exocet</item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ILastResortStepSearcher">
            <summary>
            Defines a step searcher that searches for last resort steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ILockedCandidatesStepSearcher">
            <summary>
            Provides with a <b>Locked Candidates</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Pointing</item>
            <item>Claiming</item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IMultiBranchWWingStepSearcher">
            <summary>
            Provides with a <b>Multiple-Branch W-Wing</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Multiple-Branch W-Wing (Multiple-Branch George Woods' Wing)</item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IMultisectorLockedSetsStepSearcher">
            <summary>
            Provides with a <b>Multi-sector Locked Sets</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Multi-sector Locked Sets</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.IMultisectorLockedSetsStepSearcher.Patterns">
            <summary>
            Indicates the list initialized with the static constructor.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IMultisectorLockedSetsStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This constructor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.INegativeRankStepSearcher">
            <summary>
            Defines a step searcher that searches for negative rank steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.INonnegativeRankStepSearcher">
            <summary>
            Defines a step searcher that searches for non-negative rank steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.INormalFishStepSearcher">
            <summary>
            Provides with a <b>Normal Fish</b> step searcher. The step searcher will include the following techniques:
            <list type="bullet">
            <item>
            Normal fishes:
            <list type="bullet">
            <item>X-Wing</item>
            <item>Swordfish</item>
            <item>Jellyfish</item>
            </list>
            </item>
            <item>
            Finned fishes:
            <list type="bullet">
            <item>
            Finned normal fishes:
            <list type="bullet">
            <item>Finned X-Wing</item>
            <item>Finned Swordfish</item>
            <item>Finned Jellyfish</item>
            </list>
            </item>
            <item>
            Finned sashimi fishes:
            <list type="bullet">
            <item>Sashimi X-Wing</item>
            <item>Sashimi Swordfish</item>
            <item>Sashimi Jellyfish</item>
            </list>
            </item>
            </list>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IPatternOverlayStepSearcher">
            <summary>
            Provides with a <b>Pattern Overlay</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Pattern Overlay</item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IPatternOverlayStepSearcher.GetInvalidPos(Sudoku.Concepts.Grid@)">
            <summary>
            Get all invalid positions.
            </summary>
            <param name="grid">The grid.</param>
            <returns>The 9 maps for invalid positions of each digit.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IPatternOverlayStepSearcher.GetTemplates">
            <summary>
            Get all possible templates. The total number of all possible pattern overlay templates is 46656.
            </summary>
            <returns>The templates.</returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IQiuDeadlyPatternStepSearcher">
            <summary>
            Provides with a <b>Qiu's Deadly Pattern</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Qiu's Deadly Pattern Type 1</item>
            <item>Qiu's Deadly Pattern Type 2</item>
            <item>Qiu's Deadly Pattern Type 3</item>
            <item>Qiu's Deadly Pattern Type 4</item>
            <item>Qiu's Deadly Pattern Locked Type</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.IQiuDeadlyPatternStepSearcher.Patterns">
            <summary>
            All different patterns.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IQiuDeadlyPatternStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This constructor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IRankTheoryStepSearcher">
            <summary>
            Defines a step searcher that searches for rank theory steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IRegularWingStepSearcher">
            <summary>
            Provides with a <b>Regular Wing</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>XY-Wing</item>
            <item>XYZ-Wing</item>
            <item>WXYZ-Wing</item>
            <item>VWXYZ-Wing</item>
            <item>UVWXYZ-Wing</item>
            <item>TUVWXYZ-Wing</item>
            <item>STUVWXYZ-Wing</item>
            <item>RSTUVWXYZ-Wing</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.IRegularWingStepSearcher.MaxSize">
            <summary>
            Indicates the maximum size the searcher will search for. The maximum possible value is 9.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when <c>value</c> is greater than 9.</exception>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IReverseBivalueUniversalGraveStepSearcher">
            <summary>
            Provides with a <b>Reverse Bi-value Universal Grave</b> step searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IReverseUniqueRectangleStepSearcher">
            <summary>
            Provides with a <b>Reverse Unique Rectangle</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Reverse Unique Rectangle Type 1</item>
            <item>Reverse Unique Rectangle Type 2</item>
            <!--
            <item>Reverse Unique Rectangle Type 3</item>
            <item>Reverse Unique Rectangle Type 4</item>
            -->
            </list>
            </summary>
            <!--
            Test examples (May or may not be used):
            
            1) Split Reverse UR pairs
            ......9...812...6.6.2.3.7.8...4...8....5.6....9...7...3.5.8.1.4.4...123...9......
            -->
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IRwDeadlyPatternStepSearcher">
            <summary>
            Provides with a <b>RW's Deadly Pattern</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>RW's Deadly Pattern</item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ISeniorExocetStepSearcher">
            <summary>
            Provides with a <b>Senior Exocet</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Senior Exocet</item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ISingleDigitPatternStepSearcher">
            <summary>
            Defines a step searcher that searches for single-digit-pattern steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ISingleStepSearcher">
            <summary>
            Provides with a <b>Single</b> step searcher. The step searcher will include the following techniques:
            <list type="bullet">
            <item>Full House (If the property <see cref="P:Sudoku.Solving.Logical.StepSearchers.ISingleStepSearcher.EnableFullHouse"/> is <see langword="true"/>)</item>
            <item>Last Digit (If the property <see cref="P:Sudoku.Solving.Logical.StepSearchers.ISingleStepSearcher.EnableLastDigit"/> is <see langword="true"/>)</item>
            <item>Hidden Single</item>
            <item>Naked Single</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.ISingleStepSearcher.EnableFullHouse">
            <summary>
            Indicates whether the solver enables the technique full house.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.ISingleStepSearcher.EnableLastDigit">
            <summary>
            Indicates whether the solver enables the technique last digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.ISingleStepSearcher.HiddenSinglesInBlockFirst">
            <summary>
            Indicates whether the solver checks for hidden single in block firstly.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.ISingleStepSearcher.UseIttoryuMode">
            <summary>
            Indicates whether the solver uses ittoryu mode to solve a puzzle.
            </summary>
            <remarks>
            For more information about what is an ittoryu puzzle, please visit
            <see href="https://sunnieshine.github.io/Sudoku/terms/ittouryu-puzzle">this link</see>.
            </remarks>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ISubsetStepSearcher">
            <summary>
            Provides with a <b>Subset</b> step searcher. The step searcher will include the following techniques:
            <list type="bullet">
            <item>
            Locked Subsets:
            <list type="bullet">
            <item>Locked Pair</item>
            <item>Locked Triple</item>
            </list>
            </item>
            <item>
            Semi-Locked Subsets:
            <list type="bullet">
            <item>Naked Pair (+)</item>
            <item>Naked Triple (+)</item>
            <item>Naked Quadruple (+)</item>
            </list>
            </item>
            <item>
            Normal Naked Subsets:
            <list type="bullet">
            <item>Naked Pair</item>
            <item>Naked Triple</item>
            <item>Naked Quadruple</item>
            </list>
            </item>
            <item>
            Hidden Subsets:
            <list type="bullet">
            <item>Hidden Pair</item>
            <item>Hidden Triple</item>
            <item>Hidden Quadruple</item>
            </list>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.ISubsetStepSearcher.MaxSize">
            <summary>
            Indicates the maximum size of the searcher can search for.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ISueDeCoq3DimensionStepSearcher">
            <summary>
            Provides with a <b>3-dimensional Sue de Coq</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>3-dimensional Sue de Coq</item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ISueDeCoqStepSearcher">
            <summary>
            Provides with a <b>Sue de Coq</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Sue de Coq</item>
            <item>Sue de Coq with Isolated Digit</item>
            <item>Cannibalistic Sue de Coq</item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ISymmetryStepSearcher">
            <summary>
            Defines a step searcher that searches for symmetrical steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ITemplateStepSearcher">
            <summary>
            Provides with a <b>Template</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Template Set</item>
            <item>Template Delete</item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.ITemplateStepSearcher.TemplateDeleteOnly">
            <summary>
            Indicates whether the technique searcher only checks template deletes.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ITwoStrongLinksStepSearcher">
            <summary>
            Provides with a <b>Two-strong Links</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Skyscraper</item>
            <item>Two-string Kite</item>
            <item>Turbot Fish</item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IUniqueLoopStepSearcher">
            <summary>
            Provides with a <b>Unique Loop</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Unique Loop Type 1</item>
            <item>Unique Loop Type 2</item>
            <item>Unique Loop Type 3</item>
            <item>Unique Loop Type 4</item>
            </list>
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IUniqueLoopStepSearcher.IsValidLoop(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Checks whether the specified loop of cells is a valid loop.
            </summary>
            <param name="loopCells">The loop cells.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IUniqueMatrixStepSearcher">
            <summary>
            Provides with a <b>Unique Matrix</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Unique Matrix Type 1</item>
            <item>Unique Matrix Type 2</item>
            <item>Unique Matrix Type 3</item>
            <item>Unique Matrix Type 4</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.IUniqueMatrixStepSearcher.Patterns">
            <summary>
            Indicates the patterns.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IUniqueMatrixStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This constructor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IUniquenessClueCoverStepSearcher">
            <summary>
            Provides with a <b>Uniqueness Clue Cover</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Uniqueness Clue Cover Type 2</item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IUniquePolygonStepSearcher">
            <summary>
            Provides with a <b>Unique Polygon</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>Unique Polygon Type 1</item>
            <item>Unique Polygon Type 2</item>
            <item>Unique Polygon Type 3</item>
            <item>Unique Polygon Type 4</item>
            </list>
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.IUniquePolygonStepSearcher.Patterns">
            <summary>
            Indicates all possible patterns to iterate.
            </summary>
            <remarks>
            Please note that all possible heptagons and octagons are in here.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IUniquePolygonStepSearcher.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This constructor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IUniqueRectangleStepSearcher">
            <summary>
            Provides with a <b>Unique Rectangle</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>
            Basic types:
            <list type="bullet">
            <item>Unique Rectangle Type 1, 2, 3, 4, 5, 6</item>
            <item>Avoidable Rectangle Type 1, 2, 3, 5</item>
            <item>Hidden Unique Rectangle</item>
            <item>Hidden Avoidable Rectangle</item>
            </list>
            </item>
            <item>
            Structured types:
            <list type="bullet">
            <item>Unique Rectangle + Conjugate Pair (also called "Unique Rectangle + Strong Link")</item>
            <item>Avoidable Rectangle + Hidden Single</item>
            <item>Unique Rectangle + Unknown Covering</item>
            <item>Unique Rectangle + Sue de Coq</item>
            <item>
            Unique Rectangle + Guardian (This program call it "Unique Rectangle External Types"):
            <list type="bullet">
            <item>Unique Rectangle External Type 1</item>
            <item>Unique Rectangle External Type 2</item>
            <item>Unique Rectangle External Type 3</item>
            <item>Unique Rectangle External Type 4</item>
            <item>Unique Rectangle External Type with XY-Wing</item>
            <item>Unique Rectangle External Type with ALS-XZ</item>
            <!--<item>Unique Rectangle External Type with Skyscraper</item>-->
            </list>
            </item>
            <item>Avoidable Rectangle + Guardian (Sub-types are same like above)</item>
            </list>
            </item>
            <item>
            Miscellaneous types:
            <list type="bullet">
            <item>Unique Rectangle 2D</item>
            <item>Unique Rectangle 3X</item>
            </list>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.IUniqueRectangleStepSearcher.AllowIncompleteUniqueRectangles">
            <summary>
            Indicates whether the UR can be incomplete. In other words,
            some of UR candidates can be removed before the pattern forms.
            </summary>
            <remarks>
            For example, the complete pattern is:
            <code><![CDATA[
            ab  |  ab
            ab  |  ab
            ]]></code>
            This is a complete pattern, and we may remove an <c>ab</c> in a certain corner.
            The incomplete pattern may not contain all four <c>ab</c>s in the structure.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.IUniqueRectangleStepSearcher.SearchForExtendedUniqueRectangles">
            <summary>
            Indicates whether the searcher can search for extended URs.
            </summary>
            <remarks>
            The basic types are type 1 to type 6, all other types are extended ones.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IUniqueRectangleStepSearcher.CheckPreconditions(Sudoku.Concepts.Grid@,System.Int32[],System.Boolean)">
            <summary>
            Check preconditions.
            </summary>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is searching for ARs.</param>
            <returns>Indicates whether the UR is passed to check.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IUniqueRectangleStepSearcher.CheckPreconditionsOnIncomplete(Sudoku.Concepts.Grid@,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Checks whether the specified UR cells satisfies the precondition of an incomplete UR.
            </summary>
            <param name="grid">The grid.</param>
            <param name="urCells">The UR cells.</param>
            <param name="d1">The first digit used.</param>
            <param name="d2">The second digit used.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IUniqueRectangleStepSearcher.IsConjugatePair(System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            To determine whether the specified house forms a conjugate pair
            of the specified digit, and the cells where they contain the digit
            is same as the given map contains.
            </summary>
            <param name="digit">The digit.</param>
            <param name="map">The map.</param>
            <param name="houseIndex">The house index.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IUniqueRectangleStepSearcher.GetDiagonalCell(System.Int32[],System.Int32)">
            <summary>
            Get a cell that can't see each other.
            </summary>
            <param name="urCells">The UR cells.</param>
            <param name="cell">The current cell.</param>
            <returns>The diagonal cell.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the specified argument <paramref name="cell"/> is invalid.
            </exception>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IUniqueRectangleStepSearcher.IsSameHouseCell(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get whether two cells are in a same house.
            </summary>
            <param name="cell1">The cell 1 to check.</param>
            <param name="cell2">The cell 2 to check.</param>
            <param name="houses">
            The result houses that both two cells lie in. If the cell can't be found, this argument will be 0.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/> value indicating whether the another cell is same house as the current one.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.IUniqueRectangleStepSearcher.GetHighlightCells(System.Int32[])">
            <summary>
            Get all highlight cells.
            </summary>
            <param name="urCells">The all UR cells used.</param>
            <returns>The list of highlight cells.</returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IUniversalStepSearcher">
            <summary>
            Defines a step searcher that searches for universal steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IWingStepSearcher">
            <summary>
            Defines a step searcher that searches for wing steps.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.IWWingStepSearcher">
            <summary>
            Provides with a <b>W-Wing</b> step searcher.
            The step searcher will include the following techniques:
            <list type="bullet">
            <item>W-Wing (George Woods' Wing)</item>
            </list>
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.JuniorExocetStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IJuniorExocetStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.JuniorExocetStepSearcher.CheckAdvanced">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.JuniorExocetStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.JuniorExocetStepSearcher.CheckTargetCells(System.Int32,System.Int32,System.Int16,Sudoku.Concepts.Grid@,System.Int16@)">
            <summary>
            Checks for the validity of the target cells, guaranteeing the target cells is valid in the full exocet map.
            </summary>
            <param name="targetCell1">The first target cell to be checked.</param>
            <param name="targetCell2">The second target cell to be checked.</param>
            <param name="baseCellsDigitsMask">The mask that holds the digits appearing in the base cells.</param>
            <param name="grid">The grid to be checked.</param>
            <param name="resultOtherDigitsMask">
            The other digits found in the exocet pattern, which means the digits that is not the valid digits
            as the base digits.
            </param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.JuniorExocetStepSearcher.CheckCrossLineCells(Sudoku.Solving.Logical.Patterns.Exocet@,System.Int16)">
            <summary>
            Checks for the validity of the cross-line cells, guaranteeing the target cells is valid
            in the full exocet map.
            </summary>
            <param name="currentJe">The current JE pattern.</param>
            <param name="digitsNeedChecking">The digits need checking.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.JuniorExocetStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.LockedCandidatesStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.ILockedCandidatesStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.LockedCandidatesStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc />
            <remarks>
            <deverloper-notes>
		<para>
			<b>Developer Notes</b>
		</para>
	</deverloper-notes>
            <para>The main idea of this searching operation:</para>
            <para>
            <code><![CDATA[
            .-------.-------.-------.
            | C C C | A A A | A A A |
            | B B B | . . . | . . . |
            | B B B | . . . | . . . |
            '-------'-------'-------'
            ]]></code>
            For example, if the cells C form a locked candidates, there'll be two cases:
            <list type="number">
            <item><b>Pointing (Type 1)</b>: Cells A contains the digit, but cells B doesn't.</item>
            <item><b>Claiming (Type 2)</b>: Cells B contains the digit, but cells A doesn't.</item>
            </list>
            </para>
            <para>
            <para>Therefore, the algorithm is:</para>
            Use bitwise-or <c>operator |</c> to gather all candidate masks from cells A, cells B and cells C,
            and suppose the notation <c>a</c> is the mask result for cells A, <c>b</c> is the mask result for cells B,
            and <c>c</c> is the mask result for cells C. If the equation <c><![CDATA[(c & (a ^ b)) != 0]]></c>
            is correct, the locked candidates exists, and the result of the expression
            <c><![CDATA[c & (a ^ b)]]></c> is a mask that holds the digits of the locked candidates.
            </para>
            <para>
            Why this expression? <c>a ^ b</c> means the digit can only appear in either cells A or cells B.
            If both or neither, the digit won't contain the locked candidates structure.
            Because of the optimization of the performance, we use the predefined table to iterate on
            all possible location where may form a locked candidate.
            </para>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.LockedCandidatesStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.MultiBranchWWingStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IMultiBranchWWingStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.MultiBranchWWingStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.MultiBranchWWingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IChainingStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowNishio">
            <summary>
            Indicates whether the step searcher allows nishio forcing chains, which is equivalent to a dynamic forcing chains
            that only uses a single digit. It is a brute-force view of a fish.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowMultiple">
            <summary>
            Indicates whether the step searcher allows multiple forcing chains:
            <list type="bullet">
            <item>
            For non-dynamic forcing chains:
            <list type="bullet">
            <item>Cell forcing chains</item>
            <item>Region (House) forcing chains</item>
            </list>
            </item>
            <item>
            For dynamic forcing chains:
            <list type="bullet">
            <item>Dynamic cell forcing chains</item>
            <item>Dynamic region (house) forcing chains</item>
            </list>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowDynamic">
            <summary>
            Indicates whether the step searcher allows dynamic forcing chains:
            <list type="bullet">
            <item>Dynamic contradiction forcing chains</item>
            <item>Dynamic double forcing chains</item>
            </list>
            </summary>
            <remarks>
            If step searcher enables for dynamic forcing chains, forcing chains will contain branches,
            or even branches over branches (recursively). It will be very useful on complex inferences.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@)">
            <summary>
            Search for hints on the given grid.
            </summary>
            <param name="grid">The grid on which to search for hints.</param>
            <returns>The hints found.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.DoBinaryChaining(Sudoku.Concepts.Grid@,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,System.Collections.Generic.List{Sudoku.Solving.Logical.Steps.ChainingStep},Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet,System.Boolean,System.Boolean)">
            <summary>
            <para>From the potential <c>p</c>, compute the consequences from both states.</para>
            <para>
            More precisely, <c>p</c> is first assumed to be correct ("on"), and then to be incorrect ("off");
            and the following sets are created:
            <list type="bullet">
            <item><c><paramref name="onToOn"/></c> the set of potentials that must be "on" when <c>p</c> is "on".</item>
            <item><c><paramref name="onToOff"/></c> the set of potentials that must be "off" when <c>p</c> is "on".</item>
            <item><c>offToOn</c> the set of potentials that must be "on" when <c>p</c> is "off".</item>
            <item><c>offToOff</c> the set of potentials that must be "off" when <c>p</c> is "off".</item>
            </list>
            Then the following rules are applied:
            <list type="bullet">
            <item>
            If a potential belongs to both <c><paramref name="onToOn"/></c> and <c><paramref name="onToOff"/></c>,
            the potential <c>p</c> cannot be "on" because it would imply a potential
            to be both "on" and "off", which is an absurd.
            </item>
            <item>
            If a potential belongs to both <c>offToOn</c> and <c>offToOff</c>,
            the potential <c>p</c> cannot be "off" because it would imply a potential
            to be both "on" and "off", which is an absurd.
            </item>
            <item>
            If a potential belongs to both <c><paramref name="onToOn"/></c> and <c>offToOn</c>,
            this potential must be "on", because it is implied to be "on" by the two possible
            states of <c>p</c>.
            </item>
            <item>
            If a potential belongs to both <c><paramref name="onToOff"/></c> and <c>offToOff</c>,
            this potential must be "off", because it is implied to be "off" by the two possible
            states of <c>p</c>.
            </item>
            </list>
            Note that if a potential belongs to all the four sets, the sudoku has no solution. This is not checked.
            </para>
            </summary>
            <param name="grid"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='grid']"/></param>
            <param name="pOn"></param>
            <param name="pOff"></param>
            <param name="result">
            <inheritdoc
                cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.DoUnaryChaining(Sudoku.Concepts.Grid@,Sudoku.Solving.Logical.Patterns.ChainNode,System.Collections.Generic.List{Sudoku.Solving.Logical.Steps.ChainingStep},System.Boolean,System.Boolean)"
                path="/param[@name='result']"/>
            </param>
            <param name="onToOn">An empty set, filled with potentials that get on if the given potential is on.</param>
            <param name="onToOff">An empty set, filled with potentials that get off if the given potential is on.</param>
            <param name="doReduction"></param>
            <param name="doContradiction"></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.DoHouseChaining(Sudoku.Concepts.Grid@,System.Collections.Generic.List{Sudoku.Solving.Logical.Steps.ChainingStep},System.Byte,System.Byte,Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet)">
            <summary>
            Search for region (house) forcing chains.
            </summary>
            <param name="grid"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='grid']"/></param>
            <param name="result">
            <inheritdoc
                cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.DoUnaryChaining(Sudoku.Concepts.Grid@,Sudoku.Solving.Logical.Patterns.ChainNode,System.Collections.Generic.List{Sudoku.Solving.Logical.Steps.ChainingStep},System.Boolean,System.Boolean)"
                path="/param[@name='result']"/>
            </param>
            <param name="cell"></param>
            <param name="digit"></param>
            <param name="onToOn">
            <inheritdoc
                cref="M:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.DoBinaryChaining(Sudoku.Concepts.Grid@,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,System.Collections.Generic.List{Sudoku.Solving.Logical.Steps.ChainingStep},Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet,System.Boolean,System.Boolean)"
                path="/param[@name='onToOn']"/>
            </param>
            <param name="onToOff">
            <inheritdoc
                cref="M:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.DoBinaryChaining(Sudoku.Concepts.Grid@,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,System.Collections.Generic.List{Sudoku.Solving.Logical.Steps.ChainingStep},Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet,System.Boolean,System.Boolean)"
                path="/param[@name='onToOff']"/>
            </param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.CreateChainingOnStep(Sudoku.Concepts.Grid@,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,System.Boolean)">
            <summary>
            Try to create a binary forcing chain hint on "on" state.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.CreateChainingOffStep(Sudoku.Concepts.Grid@,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,System.Boolean)">
            <summary>
            Try to create a binary forcing chain hint on "off" state.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.CreateCellForcingStep(Sudoku.Concepts.Grid@,System.Byte,Sudoku.Solving.Logical.Patterns.ChainNode,System.Collections.Generic.Dictionary{System.Byte,Sudoku.Collections.Logical.NodeSet})">
            <summary>
            Try to create a cell forcing chain hint.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.CreateHouseForcingStep(Sudoku.Concepts.Grid@,System.Int32,System.Byte,Sudoku.Solving.Logical.Patterns.ChainNode,System.Collections.Generic.Dictionary{System.Byte,Sudoku.Collections.Logical.NodeSet})">
            <summary>
            Try to create a region (house) forcing chain hint.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.MultisectorLockedSetsStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IMultisectorLockedSetsStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.MultisectorLockedSetsStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.MultisectorLockedSetsStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IChainingStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.IsParent(Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode)">
            <summary>
            Checks whether hte specified <paramref name="child"/> is the real child node of <paramref name="parent"/>.
            </summary>
            <param name="child">The child node to be checked.</param>
            <param name="parent">The parent node to be checked.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)">
            <summary>
            Try to search for all AICs and continuous nice loops.
            </summary>
            <param name="grid">The grid.</param>
            <param name="isX">Indicates whether the chain allows X element (strong links in a house for a single digit).</param>
            <param name="isY">Indicates whether the chain allows Y element (strong links in a cell).</param>
            <returns>All possible found <see cref="T:Sudoku.Solving.Logical.Steps.ChainingStep"/>s.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.DoUnaryChaining(Sudoku.Concepts.Grid@,Sudoku.Solving.Logical.Patterns.ChainNode,System.Collections.Generic.List{Sudoku.Solving.Logical.Steps.ChainingStep},System.Boolean,System.Boolean)">
            <summary>
            Look for, and add single forcing chains, and bidirectional cycles.
            </summary>
            <param name="grid"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='grid']"/></param>
            <param name="pOn">The start potential.</param>
            <param name="result">The result steps found.</param>
            <param name="isX"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='isX']"/></param>
            <param name="isY"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='isY']"/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.DoCycles(Sudoku.Concepts.Grid@,Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet,System.Boolean,System.Boolean,Sudoku.Collections.Logical.NodeList,Sudoku.Solving.Logical.Patterns.ChainNode)">
            <summary>
            Construct cycles and return them, by recording them into argument <paramref name="cycles"/>.
            </summary>
            <param name="grid"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='grid']"/></param>
            <param name="toOn">The potentials that are assumed to be "on".</param>
            <param name="toOff">The potentials that are assumed to be "off".</param>
            <param name="isX"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='isX']"/></param>
            <param name="isY"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='isY']"/></param>
            <param name="cycles">
            <para>All found cycles, represented as their final <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> node.</para>
            <para>By using <see cref="P:Sudoku.Solving.Logical.Patterns.ChainNode.ChainPotentials"/>, we can get the whole chain.</para>
            </param>
            <param name="source">The source node.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.DoForcingChains(Sudoku.Concepts.Grid@,Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet,System.Boolean,Sudoku.Collections.Logical.NodeList,Sudoku.Solving.Logical.Patterns.ChainNode)">
            <summary>
            Construct forcing chains (in Sudoku Explainer, AICs will be treated as forcing chains).
            In other words, this method does find for AICs.
            </summary>
            <param name="grid"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='grid']"/></param>
            <param name="toOn">
            <inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.DoCycles(Sudoku.Concepts.Grid@,Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet,System.Boolean,System.Boolean,Sudoku.Collections.Logical.NodeList,Sudoku.Solving.Logical.Patterns.ChainNode)" path="/param[@name='toOn']"/>
            </param>
            <param name="toOff">
            <inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.DoCycles(Sudoku.Concepts.Grid@,Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet,System.Boolean,System.Boolean,Sudoku.Collections.Logical.NodeList,Sudoku.Solving.Logical.Patterns.ChainNode)" path="/param[@name='toOff']"/>
            </param>
            <param name="isY"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='isY']"/></param>
            <param name="chains">
            <para>All found chains, represented as their final <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> node.</para>
            <para>
            <inheritdoc
                cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.DoCycles(Sudoku.Concepts.Grid@,Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet,System.Boolean,System.Boolean,Sudoku.Collections.Logical.NodeList,Sudoku.Solving.Logical.Patterns.ChainNode)"
                path="//param[@name='cycles']/para[2]"/>
            </para>
            </param>
            <param name="source">
            <inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.DoCycles(Sudoku.Concepts.Grid@,Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet,System.Boolean,System.Boolean,Sudoku.Collections.Logical.NodeList,Sudoku.Solving.Logical.Patterns.ChainNode)" path="/param[@name='source']"/>
            </param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.CreateCycleStep(Sudoku.Concepts.Grid@,Sudoku.Solving.Logical.Patterns.ChainNode,System.Boolean,System.Boolean)">
            <summary>
            Try to create a cycle hint. If any conclusion (elimination, assignment) found and is available,
            the method will return a <see cref="T:Sudoku.Solving.Logical.Steps.BidirectionalCycleStep"/> instance with a non-<see langword="null"/> value.
            </summary>
            <param name="grid">
            <inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.GetAll(Sudoku.Concepts.Grid@,System.Boolean,System.Boolean)" path="/param[@name='grid']"/>
            </param>
            <param name="dstOn">Indicates the destination node that is at the state "on".</param>
            <param name="isX">
            <inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.DoCycles(Sudoku.Concepts.Grid@,Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet,System.Boolean,System.Boolean,Sudoku.Collections.Logical.NodeList,Sudoku.Solving.Logical.Patterns.ChainNode)" path="/param[@name='isX']"/>
            </param>
            <param name="isY">
            <inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.DoCycles(Sudoku.Concepts.Grid@,Sudoku.Collections.Logical.NodeSet,Sudoku.Collections.Logical.NodeSet,System.Boolean,System.Boolean,Sudoku.Collections.Logical.NodeList,Sudoku.Solving.Logical.Patterns.ChainNode)" path="/param[@name='isY']"/>
            </param>
            <returns>
            A valid <see cref="T:Sudoku.Solving.Logical.Steps.BidirectionalCycleStep"/> instance, or <see langword="null"/> if no available eliminations found.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.CreateAicStep(Sudoku.Concepts.Grid@,Sudoku.Solving.Logical.Patterns.ChainNode,System.Boolean,System.Boolean)">
            <summary>
            Try to create an AIC hint.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.NonMultipleChainingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.NormalFishStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.INormalFishStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.NormalFishStepSearcher.Sudoku#Solving#Logical#StepSearchers#IFishStepSearcher#MaxSize">
            <inheritdoc/>
            <remarks>
            I hide this member on purpose because 4 is the maximum size of subsets found in practice.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.NormalFishStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.NormalFishStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.IStep},Sudoku.Concepts.Grid@,System.Int32,System.Int32**,System.Int32**,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get all possible normal fishes.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="size">The size.</param>
            <param name="r">The possible row table to iterate.</param>
            <param name="c">The possible column table to iterate.</param>
            <param name="withFin">Indicates whether the searcher will check for the existence of fins.</param>
            <param name="searchRow">
            Indicates whether the searcher searches for fishes in the direction of rows.
            </param>
            <param name="onlyFindOne">Indicates whether the method only searches for one step.</param>
            <returns>The first found step.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.NormalFishStepSearcher.GetDirectView(System.Int32,System.Int32[],System.Int32[],Sudoku.Concepts.CellMap@,System.Boolean)">
            <summary>
            Get the direct fish view with the specified grid and the base sets.
            </summary>
            <param name="digit">The digit.</param>
            <param name="baseSets">The base sets.</param>
            <param name="coverSets">The cover sets.</param>
            <param name="fins">The cells of the fin in the current fish.</param>
            <param name="searchRow">Indicates whether the current searcher searches row.</param>
            <returns>The view.</returns>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.NormalFishStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.PatternOverlayStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IPatternOverlayStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.PatternOverlayStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.PatternOverlayStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.QiuDeadlyPatternStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IQiuDeadlyPatternStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.QiuDeadlyPatternStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.QiuDeadlyPatternStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.RegularWingStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IRegularWingStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.RegularWingStepSearcher.MaxSize">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.RegularWingStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.RegularWingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.ReverseBivalueUniversalGraveStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IReverseUniqueRectangleStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ReverseBivalueUniversalGraveStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ReverseBivalueUniversalGraveStepSearcher.CheckType1(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.IStep},System.Boolean,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32,System.Int16)">
            <summary>
            Checks for type 1.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.ReverseBivalueUniversalGraveStepSearcher.CheckType2(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.IStep},System.Boolean,Sudoku.Concepts.Grid@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Checks for type 2. In this type we also check the generalized case that looks like a UR type 5.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.ReverseBivalueUniversalGraveStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.RwDeadlyPatternStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IRwDeadlyPatternStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.RwDeadlyPatternStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc />
            <remarks>
            <deverloper-notes>
		<para>
			<b>Developer Notes</b>
		</para>
	</deverloper-notes>
            <para>
            This implementation is based on the theory mentioned from RW:
            </para>
            <para>
            If a group of all instances of N different digits in a chute is spread
            over max N+1 mini- rows/columns, then the group will contain at least one unavoidable set.
            </para>
            <para>
            This technique too complex to be proved, but I find this link to describe about this technique:
            <see href="http://forum.enjoysudoku.com/yet-another-crazy-uniqueness-technique-t5589.html" />
            </para>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.RwDeadlyPatternStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.SeniorExocetStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.ISeniorExocetStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.SeniorExocetStepSearcher.CheckAdvanced">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.SeniorExocetStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.SeniorExocetStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.SingleStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.ISingleStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.SingleStepSearcher.EnableFullHouse">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.SingleStepSearcher.EnableLastDigit">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.SingleStepSearcher.HiddenSinglesInBlockFirst">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.SingleStepSearcher.UseIttoryuMode">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.SingleStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.SingleStepSearcher.GetAll_IttoryuMode(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <summary>
            Checks for single steps using ittoryu mode.
            </summary>
            <param name="context"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.SingleStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)" path="/param[@name='context']"/></param>
            <returns><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.SingleStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)" path="/returns"/></returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.SingleStepSearcher.GetAll_NonIttoryuMode(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <summary>
            Checks for single steps using non-ittoryu mode.
            </summary>
            <param name="context"><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.SingleStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)" path="/param[@name='context']"/></param>
            <returns><inheritdoc cref="M:Sudoku.Solving.Logical.StepSearchers.SingleStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)" path="/returns"/></returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.SingleStepSearcher.CheckForHiddenSingleAndLastDigit(Sudoku.Concepts.Grid@,System.Int32,System.Int32)">
            <summary>
            Checks for existence of hidden single and last digit conclusion in the specified house.
            </summary>
            <param name="grid">The grid.</param>
            <param name="digit">The digit used.</param>
            <param name="house">The house used.</param>
            <returns>Not <see langword="null" /> if conclusion can be found.</returns>
            <remarks>
            <para><deverloper-notes>
		<para>
			<b>Developer Notes</b>
		</para>
	</deverloper-notes></para>
            <para>
            The main idea of hidden single is to search for a digit can only appear once in a house,
            so we should check all possibilities in a house to found whether the house exists a digit
            that only appears once indeed.
            </para>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.SingleStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.Specialized.IAlmostHiddenSetsStepSearcher">
            <summary>
            Provides with an <b>Almost Hidden Sets</b> step searcher.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.Specialized.IAlmostHiddenSetsStepSearcher.Gather(Sudoku.Concepts.Grid@)">
            <inheritdoc cref="M:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.Gather(Sudoku.Concepts.Grid@)"/>
            <remarks>
            Different with the original method <see cref="M:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.Gather(Sudoku.Concepts.Grid@)"/>,
            this method will only uses the buffer to determine the info, which is unsafe
            when calling the method without having initialized those maps in the buffer type,
            <see cref="T:Sudoku.Buffers.FastProperties"/>.
            </remarks>
            <seealso cref="T:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet"/>
            <seealso cref="M:Sudoku.Solving.Logical.Patterns.AlmostHiddenSet.Gather(Sudoku.Concepts.Grid@)"/>
            <seealso cref="T:Sudoku.Buffers.FastProperties"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.Specialized.ICellLinkingLoopStepSearcher">
            <summary>
            Defines a steps searcher that searches for cell-linking loop steps.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.Specialized.ICellLinkingLoopStepSearcher.GatherGuardianLoops(System.Int32)">
            <summary>
            Try to gather all possible loops which should satisfy the specified condition.
            </summary>
            <param name="digit">The digit used.</param>
            <returns>
            Returns a list of array of candidates used in the loop, as the data of possible found loops.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.Specialized.ICellLinkingLoopStepSearcher.GatherUniqueLoops(System.Int16)">
            <summary>
            Try to gather all possible loops being used in technique unique loops,
            which should satisfy the specified condition.
            </summary>
            <param name="digitsMask">The digits used.</param>
            <returns>
            Returns a list of array of candidates used in the loop, as the data of possible found loops.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.Specialized.ICellLinkingLoopStepSearcher.GatherBivalueOddagons(System.Int16)">
            <summary>
            Try to gather all possible loops being used in technique bi-value oddagons,
            which should satisfy the specified condition.
            </summary>
            <param name="digitsMask">The digits used.</param>
            <returns>
            Returns a list of array of candidates used in the loop, as the data of possible found loops.
            </returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.Specialized.ICellLinkingLoopStepSearcher.UniqueLoopSatisfyingPredicate(Sudoku.Concepts.CellMap@)">
            <summary>
            Defines a templating method that can determine whether a loop is a valid unique loop.
            </summary>
            <param name="loop">The loop to be checked.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.Specialized.ICellLinkingLoopStepSearcher.GuardianOrBivalueOddagonSatisfyingPredicate(Sudoku.Concepts.CellMap@)">
            <summary>
            Defines a templating method that can determine whether a loop is a valid bi-value oddagon.
            </summary>
            <param name="loop">The loop to be checked.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.Specialized.ICellLinkingLoopStepSearcher.DepthFirstSearching_Guardian(System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int32,,System.Collections.Generic.List{Sudoku.Solving.Logical.Patterns.Guardian})">
            <summary>
            Checks for guardian loops using recursion.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.Specialized.ICellLinkingLoopStepSearcher.DepthFirstSearching_UniqueLoop(System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int16,Sudoku.Concepts.CellMap@,,System.Collections.Generic.List{Sudoku.Solving.Logical.Patterns.UniqueLoop})">
            <summary>
            Checks for unique loops using recursion.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.Specialized.ICellLinkingLoopStepSearcher.DepthFirstSearching_BivalueOddagon(System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int16,Sudoku.Concepts.CellMap@,,System.Collections.Generic.List{Sudoku.Solving.Logical.Patterns.BivalueOddagon})">
            <summary>
            Checks for bi-value oddagon loops using recursion.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.Specialized.IStepGatherableSearcher">
            <summary>
            Defines a special step searcher that can gather all possible steps of various techniques, in a step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.Specialized.IStepGatherableSearcher.MaxStepsGathered">
            <summary>
            Indicates the maximum steps can be gathered.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.Specialized.IStepGatherableSearcher.Search(Sudoku.Concepts.Grid@,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Search for all possible steps in a grid.
            </summary>
            <param name="puzzle">The puzzle grid.</param>
            <param name="progress">The progress instance that is used for reporting the status.</param>
            <param name="cancellationToken">The cancellation token used for canceling an operation.</param>
            <returns>The result.</returns>
            <exception cref="T:System.OperationCanceledException">Throws when the operation is canceled.</exception>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.Specialized.IStepSearcherRequiresSolution">
            <summary>
            Indicates a step searcher that requires a solution grid for the technique searching usages.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.Specialized.IStepSearcherRequiresSolution.Solution">
            <summary>
            Indicates the reference of the solution sudoku grid.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection">
            <summary>
            Defines a collection that only stores for <see cref="T:Sudoku.Solving.Logical.IStepSearcher"/> instances.
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.IStepSearcher"/>
            <completionlist cref="T:Sudoku.Solving.Logical.WellKnownStepSearcherCollections"/>
        </member>
        <member name="F:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection._stepSearchers">
            <summary>
            The internal array of <see cref="T:Sudoku.Solving.Logical.IStepSearcher"/>s.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection.#ctor(Sudoku.Solving.Logical.IStepSearcher[])">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection"/> instance via the specified collection of <see cref="T:Sudoku.Solving.Logical.IStepSearcher"/>s.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection.Count">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection.Slice(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection.OfType``1">
            <summary>
            Filters the collection, removing <see cref="T:Sudoku.Solving.Logical.IStepSearcher"/> instances that is not target type.
            </summary>
            <typeparam name="T">The type of the target step searcher.</typeparam>
            <returns>A list of <see cref="T:Sudoku.Solving.Logical.IStepSearcher"/>s that are of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection.op_Implicit(Sudoku.Solving.Logical.IStepSearcher[])~Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection">
            <summary>
            Implicit cast from <see cref="T:Sudoku.Solving.Logical.IStepSearcher"/>[] to <see cref="T:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection"/>.
            </summary>
            <param name="stepSearchers">The step searchers.</param>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.SubsetStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.ISubsetStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.SubsetStepSearcher.Sudoku#Solving#Logical#StepSearchers#ISubsetStepSearcher#MaxSize">
            <inheritdoc/>
            <remarks>
            I hide this member on purpose because 4 is the maximum size of subsets found in practice.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.SubsetStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.SubsetStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.SueDeCoq3DimensionStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.ISueDeCoq3DimensionStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.SueDeCoq3DimensionStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.SueDeCoq3DimensionStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.SueDeCoqStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.ISueDeCoqStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.SueDeCoqStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.SueDeCoqStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.TemplateStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.ITemplateStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.TemplateStepSearcher.TemplateDeleteOnly">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.TemplateStepSearcher.Solution">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.TemplateStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.TemplateStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.TwoStrongLinksStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.ITwoStrongLinksStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.TwoStrongLinksStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.TwoStrongLinksStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.UniqueLoopStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IUniqueLoopStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueLoopStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueLoopStepSearcher.CheckType1(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueLoopStep},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Boolean)">
            <summary>
            Check type 1.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="onlyFindOne">Indicates whether the searcher only searching for one step is okay.</param>
            <returns>The step is worth.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueLoopStepSearcher.CheckType2(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueLoopStep},Sudoku.Concepts.Grid@,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int16,System.Boolean)">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="comparer">The comparer mask (equals to <c><![CDATA[1 << d1 | 1 << d2]]></c>).</param>
            <param name="onlyFindOne">Indicates whether the searcher only searching for one step is okay.</param>
            <returns>The step is worth.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueLoopStepSearcher.CheckType3(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueLoopStep},Sudoku.Concepts.Grid@,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int16,System.Boolean)">
            <summary>
            Check type 3.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="comparer">The comparer mask (equals to <c><![CDATA[1 << d1 | 1 << d2]]></c>).</param>
            <param name="onlyFindOne">Indicates whether the searcher only searching for one step is okay.</param>
            <returns>The step is worth.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueLoopStepSearcher.CheckType4(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueLoopStep},Sudoku.Concepts.Grid@,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int16,System.Boolean)">
            <summary>
            Check type 4.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="d1">The digit 1.</param>
            <param name="d2">The digit 2.</param>
            <param name="loop">The loop.</param>
            <param name="extraCellsMap">The extra cells map.</param>
            <param name="comparer">The comparer mask (equals to <c><![CDATA[1 << d1 | 1 << d2]]></c>).</param>
            <param name="onlyFindOne">Indicates whether the searcher only searching for one step is okay.</param>
            <returns>The step is worth.</returns>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.UniqueLoopStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.UniqueMatrixStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IUniqueMatrixStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueMatrixStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.UniqueMatrixStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.UniquenessClueCoverStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IUniquenessClueCoverStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniquenessClueCoverStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc />
            <remarks>
            <deverloper-notes>
		<para>
			<b>Developer Notes</b>
		</para>
	</deverloper-notes>
            <para>
            The technique is very complex that I cannot enumerate all possible cases.
            Here I only give you some cases that satisfy the pattern:
            <list type="bullet">
            <item><see href="http://sudopedia.enjoysudoku.com/Uniqueness_Clue_Cover.html" /></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniquenessClueCoverStepSearcher.CheckType2(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.IStep},Sudoku.Concepts.Grid@,System.Boolean)">
            <summary>
            Checks for the type 2. The sketch is like:
            <code><![CDATA[
            +----------+---------+----------+
            |  .  .  . | .  .  . | *1  .  . |
            | =1  .  . | .  .  . | =2  .  . |
            | *2  .  . | .  .  . |  .  .  . |
            +----------+---------+----------+
            ]]></code>
            In the sketch, the notation <c>*n</c> means the value cell is filled with that digit <c>n</c>,
            and the notation <c>=n</c> means the digit <c>n</c> is the correct value.
            <para>
            The test examples:
            <list type="bullet">
            <item>
            <c>000000000000000002000001000001030040005607300030020008002060500650008904900400007</c>
            </item>
            <item>
            <c>000000000000000001000002000002300400005600017080009003040+20700805310070072095006+4:815 816 825 826 835 977 978 981</c>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.UniquenessClueCoverStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.UniquePolygonStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IUniquePolygonStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniquePolygonStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.UniquePolygonStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IUniqueRectangleStepSearcher"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.AllowIncompleteUniqueRectangles">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.SearchForExtendedUniqueRectangles">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.GetAll(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Boolean)">
            <summary>
            Get all possible hints from the grid.
            </summary>
            <param name="gathered"><inheritdoc cref="P:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.Accumulator" path="/summary"/></param>
            <param name="grid"><inheritdoc cref="F:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.Grid" path="/summary"/></param>
            <param name="arMode">Indicates whether the current mode is searching for ARs.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.IsIncomplete(System.Collections.Generic.IEnumerable{Sudoku.Presentation.Nodes.CandidateViewNode})">
            <summary>
            Check whether the highlight UR candidates is incomplete.
            </summary>
            <param name="list">The list to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
            <remarks>
            This method uses a trick to check a UR structure: to count up the number of "Normal colored"
            candidates used in the current UR structure. If and only if the full structure uses 8 candidates
            colored with normal one, the structure will be complete.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckType1(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check type 1.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
              ↓ cornerCell
            (abc) ab
             ab   ab
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckType2(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check type 2.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
              ↓ corner1, corner2
            (abc) (abc)
             ab    ab
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckType3(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check type 3.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ corner1, corner2
            (ab ) (ab )
             abx   aby
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckType4(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check type 4.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ corner1, corner2
            (ab ) ab
             abx  aby
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckType5(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check type 5.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ cornerCell
            (ab ) abc
             abc  abc
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckType6(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check type 6.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ corner1
            (ab )  aby
             abx  (ab)
                   ↑corner2
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckHidden(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check hidden UR.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ cornerCell
            (ab ) abx
             aby  abz
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.Check2D(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check UR + 2D.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
              ↓ corner1
            (ab )  abx
             aby  (ab )  xy  *
                    ↑ corner2
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.Check2B1SL(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check UR + 2B/1SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
              ↓ corner1, corner2
            (ab )  (ab )
             |
             | a
             |
             abx    aby
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.Check2D1SL(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check UR + 2D/1SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
              ↓ corner1
            (ab )   aby
             |
             | a
             |
             abx   (ab )
                     ↑ corner2
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.Check3X(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check UR + 3X.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ cornerCell
            (ab )  abx
             aby   abz   xy  *
            ]]></code>
            Note: <c>z</c> is <c>x</c> or <c>y</c>.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.Check3X2SL(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check UR + 3X/2SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ cornerCell
            (ab )    abx
                      |
                      | b
                  a   |
             aby-----abz
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.Check3N2SL(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check UR + 3N/2SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="cornerCell">The corner cell.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
             ↓ cornerCell
            (ab )-----abx
                   a   |
                       | b
                       |
             aby      abz
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.Check3U2SL(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
             <summary>
             Check UR + 3U/2SL.
             </summary>
             <param name="accumulator">The technique accumulator.</param>
             <param name="grid">The grid.</param>
             <param name="urCells">All UR cells.</param>
             <param name="arMode">Indicates whether the current mode is AR mode.</param>
             <param name="comparer">The mask comparer.</param>
             <param name="d1">The digit 1 used in UR.</param>
             <param name="d2">The digit 2 used in UR.</param>
             <param name="cornerCell">The corner cell.</param>
             <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
             <param name="index">The index.</param>
             <remarks>
             The structure:
             <code><![CDATA[
              ↓ cornerCell
             (ab )-----abx
                    a
            
                    b
              aby -----abz
             ]]></code>
             </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.Check3E2SL(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
             <summary>
             Check UR + 3E/2SL.
             </summary>
             <param name="accumulator">The technique accumulator.</param>
             <param name="grid">The grid.</param>
             <param name="urCells">All UR cells.</param>
             <param name="arMode">Indicates whether the current mode is AR mode.</param>
             <param name="comparer">The mask comparer.</param>
             <param name="d1">The digit 1 used in UR.</param>
             <param name="d2">The digit 2 used in UR.</param>
             <param name="cornerCell">The corner cell.</param>
             <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
             <param name="index">The index.</param>
             <remarks>
             The structure:
             <code><![CDATA[
               ↓ cornerCell
             (ab )-----abx
                    a
            
                    a
              aby -----abz
             ]]></code>
             </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.Check4X3SL(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check UR + 4X/3SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
              ↓ corner1, corner2
            (abx)-----(aby)
                   a    |
                        | b
                   a    |
             abz ----- abw
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.Check4C3SL(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check UR + 4C/3SL.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            <para>The structures:</para>
            <para>
            Subtype 1:
            <code><![CDATA[
              ↓ corner1, corner2
            (abx)-----(aby)
                   a    |
                        | a
                   b    |
             abz ----- abw
            ]]></code>
            </para>
            <para>
            Subtype 2:
            <code><![CDATA[
              ↓ corner1, corner2
            (abx)-----(aby)
              |    a    |
              | b       | a
              |         |
             abz       abw
            ]]></code>
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckRegularWing(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32,System.Int32)">
            <summary>
            Check UR-XY-Wing, UR-XYZ-Wing, UR-WXYZ-Wing and AR-XY-Wing, AR-XYZ-Wing and AR-WXYZ-Wing.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="size">The size of the wing to search.</param>
            <param name="index">The index.</param>
            <remarks>
            <para>The structures:</para>
            <para>
            Subtype 1:
            <code><![CDATA[
              ↓ corner1
            (ab )  abxy  yz  xz
            (ab )  abxy  *
              ↑ corner2
            ]]></code>
            Note that the pair of cells <c>abxy</c> should be in the same house.
            </para>
            <para>
            Subtype 2:
            <code><![CDATA[
              ↓ corner1
            (ab )  abx   xz
             aby  (ab )  *   yz
                    ↑ corner2
            ]]></code>
            </para>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckSueDeCoq(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Boolean,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check UR + SdC.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="arMode">Indicates whether the current mode is AR mode.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">The map of other cells during the current UR searching.</param>
            <param name="index">The index.</param>
            <remarks>
            The structure:
            <code><![CDATA[
                      |   xyz
             ab+ ab+  | abxyz abxyz
                      |   xyz
            ----------+------------
            (ab)(ab)  |
             ↑ corner1, corner2
            ]]></code>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckBabaGroupingUnique(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Int16,System.Int32,System.Int32,System.Int32)">
             <summary>
             Check UR + Unknown covering.
             </summary>
             <param name="accumulator">The technique accumulator.</param>
             <param name="grid">The grid.</param>
             <param name="urCells">All UR cells.</param>
             <param name="comparer">The comparer.</param>
             <param name="d1">The digit 1.</param>
             <param name="d2">The digit 2.</param>
             <param name="index">The index.</param>
             <remarks>
             <para>The structures:</para>
             <para>
             Subtype 1:
             <code><![CDATA[
                  ↓urCellInSameBlock
             ab  abc      abc  ←anotherCell
            
                 abcx-----abcy ←resultCell
                       c
                  ↑targetCell
             ]]></code>
             Where the digit <c>a</c> and <c>b</c> in the bottom-left cell <c>abcx</c> can be removed.
             </para>
             <para>
             Subtype 2:
             <code><![CDATA[
             abcx   | ab  abc
              |     |
              | c   |
              |     |
             abcy   |     abc
             ]]></code>
             </para>
             </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckExternalType1Or2(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>Check UR/AR + Guardian (i.e. UR External Type 2) and UR External Type 1.</para>
            <para>
            A UR external type 1 is a special case for type 2, which means only one guardian cell will be used.
            </para>
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="index">The index.</param>
            <param name="arMode"></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckExternalType3(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Int16,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Check UR/AR + Guardian, with external subset (i.e. UR External Type 3).
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="index">The index.</param>
            <param name="arMode"></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckExternalType4(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Int16,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Check UR/AR + Guardian, with external conjugate pair (i.e. UR External Type 4).
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="comparer">The mask comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="index">The index.</param>
            <param name="arMode"></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckExternalTurbotFish(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Int16,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Check UR/AR + Guardian, with external turbot fish.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="comparer">The comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="index">The mask index.</param>
            <param name="arMode"></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckExternalXyWing(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Int16,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Check UR/AR + Guardian, with external XY-Wing.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="comparer">The comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="index">The mask index.</param>
            <param name="arMode"></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckExternalAlmostLockedSetsXz(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],Sudoku.Solving.Logical.Patterns.AlmostLockedSet[],System.Int16,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Check UR/AR + Guardian, with external ALS-XZ rule.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="alses">The ALS structures.</param>
            <param name="comparer">The comparer.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="index">The mask index.</param>
            <param name="arMode"></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.CheckHiddenSingleAvoidable(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.Steps.UniqueRectangleStep},Sudoku.Concepts.Grid@,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Check AR + Hidden single.
            </summary>
            <param name="accumulator">The technique accumulator.</param>
            <param name="grid">The grid.</param>
            <param name="urCells">All UR cells.</param>
            <param name="d1">The digit 1 used in UR.</param>
            <param name="d2">The digit 2 used in UR.</param>
            <param name="corner1">The corner cell 1.</param>
            <param name="corner2">The corner cell 2.</param>
            <param name="otherCellsMap">
            The map of other cells during the current UR searching.
            </param>
            <param name="index">The index.</param>
            <remarks>
            <para>The structure:</para>
            <para>
            <code><![CDATA[
            ↓corner1
            a   | aby  -  -
            abx | a    -  b
                | -    -  -
                  ↑corner2(cell 'a')
            ]]></code>
            There's only one cell can be filled with the digit 'b' besides the cell 'aby'.
            </para>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.UniqueRectangleStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.StepSearchers.WWingStepSearcher">
            <inheritdoc cref="T:Sudoku.Solving.Logical.StepSearchers.IWWingStepSearcher"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.StepSearchers.WWingStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.StepSearchers.WWingStepSearcher.Options">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.IStepSearcher">
            <summary>
            Defines a step searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStepSearcher.IsSeparated">
            <summary>
            Determines whether the current step searcher is separated one, which mean it can be created
            as many possible instances in a same step searchers pool.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStepSearcher.IsDirect">
            <summary>
            Determines whether the current step searcher is a direct one.
            </summary>
            <remarks>
            If you don't know what is a direct step searcher, please visit the property
            <see cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsDirect"/> to learn more information.
            </remarks>
            <seealso cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsDirect"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStepSearcher.IsOptionsFixed">
            <summary>
            Determines whether we can adjust the ordering of the current step searcher
            as a customized configuration option before solving a puzzle.
            </summary>
            <remarks>
            If you don't know what is a direct step searcher, please visit the property
            <see cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsOptionsFixed"/> to learn more information.
            </remarks>
            <seealso cref="P:Sudoku.Solving.Logical.Annotations.StepSearcherMetadataAttribute.IsOptionsFixed"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStepSearcher.IsTemporarilyDisabled">
            <summary>
            Determines whether the current step searcher is temporarily disabled.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStepSearcher.IsNotSupportedForSukaku">
            <summary>
            Determines whether the current step searcher is not supported for sukaku solving mode.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStepSearcher.IsConfiguredSlow">
            <summary>
            Determines whether the current step searcher is disabled
            by option <see cref="F:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptions.SlowAlgorithm"/> being configured.
            </summary>
            <seealso cref="F:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptions.SlowAlgorithm"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStepSearcher.IsConfiguredHighAllocation">
            <summary>
            Determines whether the current step searcher is disabled
            by option <see cref="F:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptions.HighMemoryAllocation"/> being configured.
            </summary>
            <seealso cref="F:Sudoku.Solving.Logical.Annotations.StepSearcherRunningOptions.HighMemoryAllocation"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStepSearcher.TypeName">
            <summary>
            Indicates the name of the type.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStepSearcher.TypeResourceName">
            <summary>
            Indicates the resource name of the current step searcher.
            If resource cannot find the specified resource, its type name will be returned.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStepSearcher.Options">
            <summary>
            Indicates the step searching options.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.IStepSearcher.GetAll(Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext@)">
            <summary>
            Accumulate all possible steps into property <see cref="P:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.Accumulator"/>
            of argument <paramref name="context"/> if property <see cref="P:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.OnlyFindOne"/>
            is <see langword="false"/>, or return the first found step if <see cref="P:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.OnlyFindOne"/>
            is <see langword="true"/>.
            </summary>
            <param name="context">
            The analysis context. This argument provides with the data that is used for analysis.
            </param>
            <returns>
            Returns the first found step. The nullability of the return value are as belows:
            <list type="bullet">
            <item>
            <see langword="null"/>:
            <list type="bullet">
            <item><c><see cref="P:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.OnlyFindOne"/> == <see langword="false"/></c>.</item>
            <item><c><see cref="P:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.OnlyFindOne"/> == <see langword="true"/></c>, but nothing found.</item>
            </list>
            </item>
            <item>
            Not <see langword="null"/>:
            <list type="bullet">
            <item>
            <c><see cref="P:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.OnlyFindOne"/> == <see langword="true"/></c>,
            and found <b>at least one step</b>. In this case the return value is the first found step.
            </item>
            </list>
            </item>
            </list>
            </returns>
            <seealso cref="T:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.AlmostLockedCandidatesStep">
            <summary>
            Provides with a step that is an <b>Almost Locked Candidates</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">Indicates the mask that contains the digits used.</param>
            <param name="BaseCells">Indicates the base cells.</param>
            <param name="TargetCells">Indicates the target cells.</param>
            <param name="HasValueCell">Indicates whether the step contains value cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.AlmostLockedCandidatesStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int16,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Boolean)">
            <summary>
            Provides with a step that is an <b>Almost Locked Candidates</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">Indicates the mask that contains the digits used.</param>
            <param name="BaseCells">Indicates the base cells.</param>
            <param name="TargetCells">Indicates the target cells.</param>
            <param name="HasValueCell">Indicates whether the step contains value cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedCandidatesStep.DigitsMask">
            <summary>Indicates the mask that contains the digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedCandidatesStep.BaseCells">
            <summary>Indicates the base cells.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedCandidatesStep.TargetCells">
            <summary>Indicates the target cells.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedCandidatesStep.HasValueCell">
            <summary>Indicates whether the step contains value cells.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedCandidatesStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedCandidatesStep.Size">
            <summary>
            Indicates the number of digits used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedCandidatesStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedCandidatesStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedCandidatesStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedCandidatesStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedCandidatesStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedCandidatesStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.AlmostLockedSetsStep">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.AlmostLockedSetsStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View})">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.AlmostLockedSetsWWingStep">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets W-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Als1">Indicates the first ALS used in this pattern.</param>
            <param name="Als2">Indicates the second ALS used in this pattern.</param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
            <param name="WDigitsMask">Indicates the mask that holds the W digit.</param>
            <param name="X">Indicates the X digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.AlmostLockedSetsWWingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Patterns.AlmostLockedSet,Sudoku.Solving.Logical.Patterns.AlmostLockedSet,Sudoku.Concepts.Conjugate,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets W-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Als1">Indicates the first ALS used in this pattern.</param>
            <param name="Als2">Indicates the second ALS used in this pattern.</param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
            <param name="WDigitsMask">Indicates the mask that holds the W digit.</param>
            <param name="X">Indicates the X digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsWWingStep.Als1">
            <summary>Indicates the first ALS used in this pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsWWingStep.Als2">
            <summary>Indicates the second ALS used in this pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsWWingStep.ConjugatePair">
            <summary>Indicates the conjugate pair used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsWWingStep.WDigitsMask">
            <summary>Indicates the mask that holds the W digit.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsWWingStep.X">
            <summary>Indicates the X digit.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsWWingStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsWWingStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsWWingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsWWingStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsWWingStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsWWingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsWWingStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXyWingStep">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets XY-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Als1">Indicates the first ALS used in this pattern.</param>
            <param name="Als2">Indicates the second ALS used in this pattern.</param>
            <param name="Bridge">Indicates the ALS that is as a bridge.</param>
            <param name="XDigitsMask">Indicates the mask that holds the digits for the X value.</param>
            <param name="YDigitsMask">Indicates the mask that holds the digits for the Y value.</param>
            <param name="ZDigitsMask">Indicates the mask that holds the digits for the Z value.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXyWingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Patterns.AlmostLockedSet,Sudoku.Solving.Logical.Patterns.AlmostLockedSet,Sudoku.Solving.Logical.Patterns.AlmostLockedSet,System.Int16,System.Int16,System.Int16)">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets XY-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Als1">Indicates the first ALS used in this pattern.</param>
            <param name="Als2">Indicates the second ALS used in this pattern.</param>
            <param name="Bridge">Indicates the ALS that is as a bridge.</param>
            <param name="XDigitsMask">Indicates the mask that holds the digits for the X value.</param>
            <param name="YDigitsMask">Indicates the mask that holds the digits for the Y value.</param>
            <param name="ZDigitsMask">Indicates the mask that holds the digits for the Z value.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXyWingStep.Als1">
            <summary>Indicates the first ALS used in this pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXyWingStep.Als2">
            <summary>Indicates the second ALS used in this pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXyWingStep.Bridge">
            <summary>Indicates the ALS that is as a bridge.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXyWingStep.XDigitsMask">
            <summary>Indicates the mask that holds the digits for the X value.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXyWingStep.YDigitsMask">
            <summary>Indicates the mask that holds the digits for the Y value.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXyWingStep.ZDigitsMask">
            <summary>Indicates the mask that holds the digits for the Z value.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXyWingStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXyWingStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXyWingStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXyWingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXyWingStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXyWingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXyWingStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXzStep">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets XZ</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Als1">Indicates the first ALS used in this pattern.</param>
            <param name="Als2">Indicates the second ALS used in this pattern.</param>
            <param name="XDigitsMask">Indicates the X digit used in this ALS-XZ pattern.</param>
            <param name="ZDigitsMask">Indicates the Z digit used in this ALS-XZ pattern.</param>
            <param name="IsDoublyLinked">Indicates whether the ALS-XZ is doubly-linked.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXzStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Patterns.AlmostLockedSet,Sudoku.Solving.Logical.Patterns.AlmostLockedSet,System.Int16,System.Int16,System.Nullable{System.Boolean})">
            <summary>
            Provides with a step that is an <b>Almost Locked Sets XZ</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Als1">Indicates the first ALS used in this pattern.</param>
            <param name="Als2">Indicates the second ALS used in this pattern.</param>
            <param name="XDigitsMask">Indicates the X digit used in this ALS-XZ pattern.</param>
            <param name="ZDigitsMask">Indicates the Z digit used in this ALS-XZ pattern.</param>
            <param name="IsDoublyLinked">Indicates whether the ALS-XZ is doubly-linked.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXzStep.Als1">
            <summary>Indicates the first ALS used in this pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXzStep.Als2">
            <summary>Indicates the second ALS used in this pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXzStep.XDigitsMask">
            <summary>Indicates the X digit used in this ALS-XZ pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXzStep.ZDigitsMask">
            <summary>Indicates the Z digit used in this ALS-XZ pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXzStep.IsDoublyLinked">
            <summary>Indicates whether the ALS-XZ is doubly-linked.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXzStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXzStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXzStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXzStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXzStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXzStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AlmostLockedSetsXzStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.AvoidableRectangleWithHiddenSingleStep">
            <summary>
            Provides with a step that is an <b>Avoidable Rectangle with Hidden Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="BaseCell"></param>
            <param name="TargetCell"></param>
            <param name="House"></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.AvoidableRectangleWithHiddenSingleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is an <b>Avoidable Rectangle with Hidden Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="BaseCell"></param>
            <param name="TargetCell"></param>
            <param name="House"></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AvoidableRectangleWithHiddenSingleStep.BaseCell">
            <summary></summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AvoidableRectangleWithHiddenSingleStep.TargetCell">
            <summary></summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AvoidableRectangleWithHiddenSingleStep.House">
            <summary></summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AvoidableRectangleWithHiddenSingleStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AvoidableRectangleWithHiddenSingleStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AvoidableRectangleWithHiddenSingleStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AvoidableRectangleWithHiddenSingleStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.AvoidableRectangleWithHiddenSingleStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BidirectionalCycleStep">
            <summary>
            Provides with a step that is a <b>Bidirectional Cycle</b> technique that is compatible with program <b>Sudoku Explainer</b>.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="DestinationOn">Indicates the destination node that is "on" status.</param>
            <param name="IsX"><inheritdoc/></param>
            <param name="IsY"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BidirectionalCycleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},Sudoku.Solving.Logical.Patterns.ChainNode,System.Boolean,System.Boolean)">
            <summary>
            Provides with a step that is a <b>Bidirectional Cycle</b> technique that is compatible with program <b>Sudoku Explainer</b>.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="DestinationOn">Indicates the destination node that is "on" status.</param>
            <param name="IsX"><inheritdoc/></param>
            <param name="IsY"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BidirectionalCycleStep.DestinationOn">
            <summary>Indicates the destination node that is "on" status.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BidirectionalCycleStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BidirectionalCycleStep.GetGreenPotentials(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BidirectionalCycleStep.GetRedPotentials(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BidirectionalCycleStep.GetLinks(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BinaryForcingChainsStep">
            <summary>
            Provides with a step that is a <b>Binary Forcing Chains</b> technique that is compatible with program <b>Sudoku Explainer</b>.
            The technique contains two kinds of forcing chains:
            <list type="bullet">
            <item>Dynamic Contradiction Forcing Chains</item>
            <item>Dynamic Double Forcing Chains</item>
            </list>
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="SourcePotential">Indicates the source potential of the chain.</param>
            <param name="FromOnPotential">Indicates the "on" branch.</param>
            <param name="FromOffPotential">Indicates the "off" branch.</param>
            <param name="IsAbsurd">Indicates whether the forcing chains kind is contradiction.</param>
            <param name="IsNishio"><inheritdoc/></param>
            <param name="DynamicNestingLevel"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BinaryForcingChainsStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,Sudoku.Solving.Logical.Patterns.ChainNode,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Provides with a step that is a <b>Binary Forcing Chains</b> technique that is compatible with program <b>Sudoku Explainer</b>.
            The technique contains two kinds of forcing chains:
            <list type="bullet">
            <item>Dynamic Contradiction Forcing Chains</item>
            <item>Dynamic Double Forcing Chains</item>
            </list>
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="SourcePotential">Indicates the source potential of the chain.</param>
            <param name="FromOnPotential">Indicates the "on" branch.</param>
            <param name="FromOffPotential">Indicates the "off" branch.</param>
            <param name="IsAbsurd">Indicates whether the forcing chains kind is contradiction.</param>
            <param name="IsNishio"><inheritdoc/></param>
            <param name="DynamicNestingLevel"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BinaryForcingChainsStep.SourcePotential">
            <summary>Indicates the source potential of the chain.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BinaryForcingChainsStep.FromOnPotential">
            <summary>Indicates the "on" branch.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BinaryForcingChainsStep.FromOffPotential">
            <summary>Indicates the "off" branch.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BinaryForcingChainsStep.IsAbsurd">
            <summary>Indicates whether the forcing chains kind is contradiction.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BinaryForcingChainsStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BinaryForcingChainsStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BinaryForcingChainsStep.GetGreenPotentials(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BinaryForcingChainsStep.GetRedPotentials(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BinaryForcingChainsStep.GetLinks(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BinaryForcingChainsStep.GetColorCandidates(System.Int32,System.Boolean)">
            <summary>
            Gets all colored candidates with the specified state.
            </summary>
            <param name="viewIndex">The view index.</param>
            <param name="state">The state of the candidate you want to color.</param>
            <returns>All colored candidates with a same state.</returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BivalueOddagonStep">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop">Indicates the loop used.</param>
            <param name="Digit1">Indicates the first digit.</param>
            <param name="Digit2">Indicates the second digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BivalueOddagonStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop">Indicates the loop used.</param>
            <param name="Digit1">Indicates the first digit.</param>
            <param name="Digit2">Indicates the second digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonStep.Loop">
            <summary>Indicates the loop used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonStep.Digit1">
            <summary>Indicates the first digit.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonStep.Digit2">
            <summary>Indicates the second digit.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BivalueOddagonStep.Equals(Sudoku.Solving.Logical.Steps.BivalueOddagonStep,Sudoku.Solving.Logical.Steps.BivalueOddagonStep)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BivalueOddagonType1Step">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="ExtraCell">Indicates the extra cell.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BivalueOddagonType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="ExtraCell">Indicates the extra cell.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType1Step.ExtraCell">
            <summary>Indicates the extra cell.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType1Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType1Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType1Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType1Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BivalueOddagonType2Step">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BivalueOddagonType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType2Step.ExtraDigit">
            <summary>Indicates the extra digit.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType2Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType2Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType2Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType2Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType2Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BivalueOddagonType3Step">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains all extra digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BivalueOddagonType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Bi-value Oddagon Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains all extra digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType3Step.ExtraCells">
            <summary>Indicates the extra cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType3Step.ExtraDigitsMask">
            <summary>Indicates the mask that contains all extra digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType3Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType3Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType3Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType3Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueOddagonType3Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveFalseCandidateTypeStep">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave False Candidate Type</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="FalseCandidate">
            Indicates the false candidate that will cause a BUG deadly pattern if it is true.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveFalseCandidateTypeStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32)">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave False Candidate Type</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="FalseCandidate">
            Indicates the false candidate that will cause a BUG deadly pattern if it is true.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveFalseCandidateTypeStep.FalseCandidate">
            <summary>
            Indicates the false candidate that will cause a BUG deadly pattern if it is true.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveFalseCandidateTypeStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveFalseCandidateTypeStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveFalseCandidateTypeStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveFalseCandidateTypeStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveMultipleStep">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave + n</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Candidates">Indicates the true candidates.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveMultipleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave + n</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Candidates">Indicates the true candidates.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveMultipleStep.Candidates">
            <summary>Indicates the true candidates.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveMultipleStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveMultipleStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveMultipleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveMultipleStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveMultipleStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveMultipleStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveStep">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View})">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType1Step">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View})">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType1Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType1Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType1Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType2Step">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="Cells">Indicates the cells used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,Sudoku.Concepts.CellMap@)">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="Cells">Indicates the cells used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType2Step.Digit">
            <summary>Indicates the digit used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType2Step.Cells">
            <summary>Indicates the cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType2Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType2Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType2Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType2Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType3Step">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TrueCandidates">Indicates the true candidates.</param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="IsNaked">Indicates whether the specified subset is naked subset.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Collections.Generic.IReadOnlyList{System.Int32},System.Int16,Sudoku.Concepts.CellMap@,System.Boolean)">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TrueCandidates">Indicates the true candidates.</param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="IsNaked">Indicates whether the specified subset is naked subset.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType3Step.TrueCandidates">
            <summary>Indicates the true candidates.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType3Step.DigitsMask">
            <summary>Indicates the digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType3Step.Cells">
            <summary>Indicates the cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType3Step.IsNaked">
            <summary>Indicates whether the specified subset is naked subset.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType3Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType3Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType3Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType3Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType3Step.Size">
            <summary>
            Indicates the size of the subset.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType4Step">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType4Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int16,Sudoku.Concepts.CellMap@,Sudoku.Concepts.Conjugate@)">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType4Step.DigitsMask">
            <summary>Indicates the digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType4Step.Cells">
            <summary>Indicates the cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType4Step.ConjugatePair">
            <summary>Indicates the conjugate pair used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType4Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType4Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType4Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveType4Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveXzStep">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave XZ</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="ExtraCell">Indicates the XZ cell.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveXzStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int16,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Provides with a step that is a <b>Bi-value Universal Grave XZ</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="ExtraCell">Indicates the XZ cell.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveXzStep.DigitsMask">
            <summary>Indicates the digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveXzStep.Cells">
            <summary>Indicates the cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveXzStep.ExtraCell">
            <summary>Indicates the XZ cell.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveXzStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveXzStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveXzStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BivalueUniversalGraveXzStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BowmanBingoStep">
            <summary>
            Provides with a step that is a <b>Bowman's Bingo</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="ContradictionLinks">Indicates the list of contradiction links.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BowmanBingoStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion})">
            <summary>
            Provides with a step that is a <b>Bowman's Bingo</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="ContradictionLinks">Indicates the list of contradiction links.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BowmanBingoStep.ContradictionLinks">
            <summary>Indicates the list of contradiction links.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BowmanBingoStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BowmanBingoStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BowmanBingoStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BowmanBingoStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BowmanBingoStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BowmanBingoStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BowmanBingoStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BowmanBingoStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.BruteForceStep">
            <summary>
            Provides with a step that is a <b>Brute Force</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.BruteForceStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View})">
            <summary>
            Provides with a step that is a <b>Brute Force</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BruteForceStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BruteForceStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BruteForceStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BruteForceStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BruteForceStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.BruteForceStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.CellForcingChainsStep">
            <summary>
            Provides with a step that is an <b>Cell Forcing Chains</b> technique that is compatible with program <b>Sudoku Explainer</b>.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="SourceCell">Indicates the source cell that all branches start.</param>
            <param name="Chains">Indicates all possible branches in this technique.</param>
            <param name="IsDynamic"><inheritdoc/></param>
            <param name="DynamicNestingLevel"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.CellForcingChainsStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Byte,Sudoku.Solving.Logical.Patterns.MultipleForcingChains,System.Boolean,System.Int32)">
            <summary>
            Provides with a step that is an <b>Cell Forcing Chains</b> technique that is compatible with program <b>Sudoku Explainer</b>.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="SourceCell">Indicates the source cell that all branches start.</param>
            <param name="Chains">Indicates all possible branches in this technique.</param>
            <param name="IsDynamic"><inheritdoc/></param>
            <param name="DynamicNestingLevel"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.CellForcingChainsStep.SourceCell">
            <summary>Indicates the source cell that all branches start.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.CellForcingChainsStep.Chains">
            <summary>Indicates all possible branches in this technique.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.CellForcingChainsStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.CellForcingChainsStep.GetGreenPotentials(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.CellForcingChainsStep.GetRedPotentials(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.CellForcingChainsStep.GetLinks(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.CellForcingChainsStep.GetPotentialAt(System.Int32)">
            <summary>
            Gets the potential at the specified index.
            </summary>
            <param name="viewIndex">The view index.</param>
            <returns>The view index.</returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ChainingStep">
            <summary>
            Provides with a step that is a <b>Chain</b> technique that is compatible with program <b>Sudoku Explainer</b>.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="IsX">Indicates whether the chain is X-Chain.</param>
            <param name="IsY">Indicates whether the chain is Y-Chain.</param>
            <param name="IsMultiple">
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowMultiple" path="/summary"/></para>
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowMultiple" path="/remarks"/></para>
            </param>
            <param name="IsDynamic">
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowDynamic" path="/summary"/></para>
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowDynamic" path="/remarks"/></para>
            </param>
            <param name="IsNishio">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowNishio" path="/summary"/>
            </param>
            <param name="DynamicNestingLevel">
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher.DynamicNestingLevel" path="/summary"/></para>
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher.DynamicNestingLevel" path="/remarks"/></para>
            </param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Provides with a step that is a <b>Chain</b> technique that is compatible with program <b>Sudoku Explainer</b>.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="IsX">Indicates whether the chain is X-Chain.</param>
            <param name="IsY">Indicates whether the chain is Y-Chain.</param>
            <param name="IsMultiple">
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowMultiple" path="/summary"/></para>
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowMultiple" path="/remarks"/></para>
            </param>
            <param name="IsDynamic">
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowDynamic" path="/summary"/></para>
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowDynamic" path="/remarks"/></para>
            </param>
            <param name="IsNishio">
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowNishio" path="/summary"/>
            </param>
            <param name="DynamicNestingLevel">
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher.DynamicNestingLevel" path="/summary"/></para>
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher.DynamicNestingLevel" path="/remarks"/></para>
            </param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.IsX">
            <summary>Indicates whether the chain is X-Chain.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.IsY">
            <summary>Indicates whether the chain is Y-Chain.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.IsMultiple">
            <summary>
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowMultiple" path="/summary"/></para>
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowMultiple" path="/remarks"/></para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.IsDynamic">
            <summary>
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowDynamic" path="/summary"/></para>
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowDynamic" path="/remarks"/></para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.IsNishio">
            <summary>
            <inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.MultipleChainingStepSearcher.AllowNishio" path="/summary"/>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.DynamicNestingLevel">
            <summary>
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher.DynamicNestingLevel" path="/summary"/></para>
            <para><inheritdoc cref="P:Sudoku.Solving.Logical.StepSearchers.AdvancedMultipleChainingStepSearcher.DynamicNestingLevel" path="/remarks"/></para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.Complexity">
            <summary>
            Indicates the complexity of the chain.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.SortKey">
            <summary>
            Indicates an <see cref="T:System.Int32"/> value indicating the ordering priority of the chain. Greater is heavier.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.ChainsTargets">
            <summary>
            Indicates all possible targets that is used for checking the whole branches of the chain.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.FlatViewsCount">
            <summary>
            Returns how many views the current step will be used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.Result">
            <summary>
            Indicates the result node.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.LengthDifficulty">
            <summary>
            Indicates the difficulty rating of the current step, which binds with length factor.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.ViewsCount">
            <summary>
            Indicates the total number of views the step will be displayed.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.FlatComplexity">
            <summary>
            Indicates the complexity of the chain. The complexity value generally indicates the total length of all branches in a chain.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.NestedComplexity">
            <summary>
            Indicates the nested complexity of the chain. This property is useful on checking nesting chains.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChainingStep.NestedViewsCount">
            <summary>
            Returns the number of nested views.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.GetRuleParents(Sudoku.Concepts.Grid@,Sudoku.Concepts.Grid@)">
            <summary>
            Gets parent rules. This method can only be used on advanced chain relations.
            </summary>
            <param name="initialGrid">The initial grid.</param>
            <param name="currentGrid">The current grid.</param>
            <returns>All found potentials.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.CreateViews(Sudoku.Concepts.Grid@)">
            <summary>
            To create views via the specified values.
            </summary>
            <param name="grid">The grid used.</param>
            <returns>The values.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.CollectRuleParents(Sudoku.Concepts.Grid@,Sudoku.Concepts.Grid@,System.Collections.Generic.List{Sudoku.Solving.Logical.Patterns.ChainNode},Sudoku.Solving.Logical.Patterns.ChainNode)">
            <summary><b><i>
            This method will be implemented later.
            </i></b></summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.AncestorsCountOf(Sudoku.Solving.Logical.Patterns.ChainNode)">
            <summary>
            Try to get all ancestors from the specified node.
            </summary>
            <param name="child">The specified node.</param>
            <returns>The total number of all found ancestors.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.SourcePotentialOf(Sudoku.Solving.Logical.Patterns.ChainNode)">
            <summary>
            Indicates the source potential from the specified target. This method can only be used for finding AICs.
            </summary>
            <param name="target">The target node.</param>
            <returns>The source potential.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.GetColorCandidates(Sudoku.Solving.Logical.Patterns.ChainNode,System.Boolean,System.Boolean)">
            <summary>
            Try to fetch all colored candidates with specified state.
            </summary>
            <param name="target">The target node.</param>
            <param name="state">The state of the node to be colored.</param>
            <param name="skipTarget">Indicates whether we should skip the target node.</param>
            <returns>All found candidates.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.GetNestedGreenPotentials(System.Int32)">
            <summary>
            Try to fetch all candidates that will be colored in green in nested chains.
            </summary>
            <param name="nestedViewIndex">The specified index of the view.</param>
            <returns>All found candidates.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.GetNestedRedPotentials(System.Int32)">
            <summary>
            Try to fetch all candidates that will be colored in red in nested chains.
            </summary>
            <param name="nestedViewIndex">The specified index of the view.</param>
            <returns>All found candidates.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.GetGreenPotentials(System.Int32)">
            <summary>
            Try to fetch all candidates to be colored in green (state 1: the candidate is "on").
            </summary>
            <param name="viewIndex">The specified index of the view.</param>
            <returns>All found candidates.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.GetRedPotentials(System.Int32)">
            <summary>
            Try to fetch all candidates to be colored in red (state 2: the candidate is "off").
            </summary>
            <param name="viewIndex">The specified index of the view.</param>
            <returns>All found candidates.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.GetBluePotentials(Sudoku.Concepts.Grid@,System.Int32)">
            <summary>
            Try to fetch all candidates to be colored in blue
            (state 3: the candidate is partially "off"; they will be "off" in this view, but "on" in other views if used).
            </summary>
            <param name="grid">The grid as a candidate reference.</param>
            <param name="viewIndex">The specified index of the view.</param>
            <returns>All found candidates.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.GetLinks(System.Int32)">
            <summary>
            Try to fetch all <see cref="T:Sudoku.Presentation.Nodes.LinkViewNode"/> instances of the specified view index.
            </summary>
            <param name="viewIndex">The view index.</param>
            <returns>All <see cref="T:Sudoku.Presentation.Nodes.LinkViewNode"/>.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.GetLinks(Sudoku.Solving.Logical.Patterns.ChainNode)">
            <summary>
            Try to fetch all <see cref="T:Sudoku.Presentation.Nodes.LinkViewNode"/> instances of the branch from the specified target,
            specified as a <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> instance.
            </summary>
            <param name="target">The target node.</param>
            <returns>All <see cref="T:Sudoku.Presentation.Nodes.LinkViewNode"/> displayed in this branch.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.GetNestedLinks(System.Int32)">
            <summary>
            Try to fetch all nested <see cref="T:Sudoku.Presentation.Nodes.LinkViewNode"/> instances of the specified view.
            </summary>
            <param name="nestedViewNum">The specified index of the view.</param>
            <returns>All <see cref="T:Sudoku.Presentation.Nodes.LinkViewNode"/> instance in this view.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.GetChainTargetAt(System.Int32)">
            <summary>
            Try to get the target node of a chain, displayed in the view at the specified index.
            </summary>
            <param name="viewIndex">The view index.</param>
            <returns>The <see cref="T:Sudoku.Solving.Logical.Patterns.ChainNode"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.GetContainerTarget(Sudoku.Solving.Logical.Steps.ChainingStep)">
            <summary>
            Try to get container target potential via the specified step.
            </summary>
            <param name="step">The step instance.</param>
            <returns>The container target.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.GetNestedChains">
            <summary>
            Try to get nested chains, represented as <see cref="T:Sudoku.Solving.Logical.Steps.ChainingStep"/> instances.
            </summary>
            <returns>A list of <see cref="T:Sudoku.Solving.Logical.Steps.ChainingStep"/> instances.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.GetNestedChain(System.Int32)">
            <summary>
            Try to get all nested chains, represented as a pair of values:
            <list type="number">
            <item>
            <term>First</term>
            <description>A <see cref="T:Sudoku.Solving.Logical.Steps.ChainingStep"/> instance.</description>
            </item>
            <item>
            <term>Second</term>
            <description>An index of the step to be displayed.</description>
            </item>
            </list>
            </summary>
            <param name="nestedViewIndex">The nested view index.</param>
            <returns>A pair of values.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChainingStep.Compare(Sudoku.Solving.Logical.Steps.ChainingStep,Sudoku.Solving.Logical.Steps.ChainingStep)">
            <summary>
            Compares two <see cref="T:Sudoku.Solving.Logical.Steps.ChainingStep"/> instance, and returns an <see cref="T:System.Int32"/>
            indicating which value is greater.
            </summary>
            <param name="left">The left-side value to be compared.</param>
            <param name="right">The right-side value to be compared.</param>
            <returns>An <see cref="T:System.Int32"/> value indicating which is greater.</returns>
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.Comparer">
            <summary>
            Defines a equality comparer used for comparison with two <see cref="T:Sudoku.Solving.Logical.Steps.ChainingStep"/> instances.
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.Steps.ChainingStep"/>
        </member>
        <member name="F:Sudoku.Solving.Logical.Steps.Comparer.Instance">
            <summary>
            Indicates the singleton instance.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.Comparer.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Logical.Steps.Comparer"/> instance.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.Comparer.Equals(Sudoku.Solving.Logical.Steps.ChainingStep,Sudoku.Solving.Logical.Steps.ChainingStep)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.Comparer.GetHashCode(Sudoku.Solving.Logical.Steps.ChainingStep)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ChromaticPatternStep">
            <summary>
            Provides with a step that is a <b>Chromatic Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Blocks">The blocks used.</param>
            <param name="Pattern">The cells used.</param>
            <param name="DigitsMask">The digits mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChromaticPatternStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32[],Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Chromatic Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Blocks">The blocks used.</param>
            <param name="Pattern">The cells used.</param>
            <param name="DigitsMask">The digits mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternStep.Blocks">
            <summary>The blocks used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternStep.Pattern">
            <summary>The cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternStep.DigitsMask">
            <summary>The digits mask.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ChromaticPatternType1Step">
            <summary>
            Provides with a step that is a <b>Chromatic Pattern Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Blocks"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="ExtraCell">Indicates the extra cell used.</param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChromaticPatternType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32[],Sudoku.Concepts.CellMap@,System.Int32,System.Int16)">
            <summary>
            Provides with a step that is a <b>Chromatic Pattern Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Blocks"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="ExtraCell">Indicates the extra cell used.</param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternType1Step.ExtraCell">
            <summary>Indicates the extra cell used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternType1Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternType1Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ChromaticPatternXzStep">
            <summary>
            Provides with a step that is a <b>Chromatic Pattern XZ</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Blocks"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="Cells">The cells that contains extra digit in the pattern.</param>
            <param name="ExtraCell">Indicates the extra cell used.</param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigitsMask">The extra digits mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ChromaticPatternXzStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32[],Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int32,System.Int16,System.Int16)">
            <summary>
            Provides with a step that is a <b>Chromatic Pattern XZ</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Blocks"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="Cells">The cells that contains extra digit in the pattern.</param>
            <param name="ExtraCell">Indicates the extra cell used.</param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigitsMask">The extra digits mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternXzStep.Cells">
            <summary>The cells that contains extra digit in the pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternXzStep.ExtraCell">
            <summary>Indicates the extra cell used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternXzStep.ExtraDigitsMask">
            <summary>The extra digits mask.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternXzStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternXzStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ChromaticPatternXzStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ComplexFishStep">
            <summary>
            Provides with a step that is a <b>Complex Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseSetsMask"><inheritdoc/></param>
            <param name="CoverSetsMask"><inheritdoc/></param>
            <param name="Exofins">The exo-fins.</param>
            <param name="Endofins">The endo-fins.</param>
            <param name="IsFranken">Indicates whether the fish is a Franken fish.</param>
            <param name="IsSashimi">Indicates whether the fish is a Sashimi fish.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ComplexFishStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Provides with a step that is a <b>Complex Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseSetsMask"><inheritdoc/></param>
            <param name="CoverSetsMask"><inheritdoc/></param>
            <param name="Exofins">The exo-fins.</param>
            <param name="Endofins">The endo-fins.</param>
            <param name="IsFranken">Indicates whether the fish is a Franken fish.</param>
            <param name="IsSashimi">Indicates whether the fish is a Sashimi fish.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.Exofins">
            <summary>The exo-fins.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.Endofins">
            <summary>The endo-fins.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.IsFranken">
            <summary>Indicates whether the fish is a Franken fish.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.IsSashimi">
            <summary>Indicates whether the fish is a Sashimi fish.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.BaseHouses">
            <summary>
            Indicates the base houses.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.CoverHouses">
            <summary>
            Indicates the cover houses.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.InternalName">
            <summary>
            The internal name.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.FinModifier">
            <summary>
            Indicates the fin modifier.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ComplexFishStep.ShapeModifier">
            <summary>
            The shape modifier.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ComplexFishStep.Equals(Sudoku.Solving.Logical.Steps.ComplexFishStep,Sudoku.Solving.Logical.Steps.ComplexFishStep)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.DeadlyPatternStep">
            <summary>
            Provides with a step that is a <b>Deadly Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.DeadlyPatternStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View})">
            <summary>
            Provides with a step that is a <b>Deadly Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DeadlyPatternStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DeadlyPatternStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DeadlyPatternStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DeadlyPatternStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.DeathBlossomCellTypeStep">
            <summary>
            Provides with a step that is a <b>Death Blossom Cell Type</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="HubCell">Indicates a cell as the hub of petals.</param>
            <param name="DigitsMask">The digits used.</param>
            <param name="Petals">Indicates the petals used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.DeathBlossomCellTypeStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int16,Sudoku.Solving.Logical.Patterns.AlmostLockedSet[])">
            <summary>
            Provides with a step that is a <b>Death Blossom Cell Type</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="HubCell">Indicates a cell as the hub of petals.</param>
            <param name="DigitsMask">The digits used.</param>
            <param name="Petals">Indicates the petals used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DeathBlossomCellTypeStep.HubCell">
            <summary>Indicates a cell as the hub of petals.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DeathBlossomCellTypeStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DeathBlossomCellTypeStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DeathBlossomCellTypeStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DeathBlossomCellTypeStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.DeathBlossomStep">
            <summary>
            Provides with a step that is a <b>Death Blossom</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="Petals">Indicates the petals used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.DeathBlossomStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int16,Sudoku.Solving.Logical.Patterns.AlmostLockedSet[])">
            <summary>
            Provides with a step that is a <b>Death Blossom</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="Petals">Indicates the petals used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DeathBlossomStep.DigitsMask">
            <summary>Indicates the digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DeathBlossomStep.Petals">
            <summary>Indicates the petals used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DeathBlossomStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DeathBlossomStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.DominoLoopStep">
            <summary>
            Provides with a step that is a <b>Domino Loop</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.DominoLoopStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@)">
            <summary>
            Provides with a step that is a <b>Domino Loop</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DominoLoopStep.Cells">
            <summary>Indicates the cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DominoLoopStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DominoLoopStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DominoLoopStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DominoLoopStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DominoLoopStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DominoLoopStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.DominoLoopStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.EmptyRectangleIntersectionPairStep">
            <summary>
            Provides with a step that is an <b>Empty Rectangle Intersection Pair</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="StartCell">Indicates the start cell used.</param>
            <param name="EndCell">Indicates the end cell used.</param>
            <param name="House">The house that forms the dual empty rectangle.</param>
            <param name="Digit1">Indicates the digit 1 used in this pattern.</param>
            <param name="Digit2">Indicates the digit 2 used in this pattern.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.EmptyRectangleIntersectionPairStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is an <b>Empty Rectangle Intersection Pair</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="StartCell">Indicates the start cell used.</param>
            <param name="EndCell">Indicates the end cell used.</param>
            <param name="House">The house that forms the dual empty rectangle.</param>
            <param name="Digit1">Indicates the digit 1 used in this pattern.</param>
            <param name="Digit2">Indicates the digit 2 used in this pattern.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleIntersectionPairStep.StartCell">
            <summary>Indicates the start cell used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleIntersectionPairStep.EndCell">
            <summary>Indicates the end cell used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleIntersectionPairStep.House">
            <summary>The house that forms the dual empty rectangle.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleIntersectionPairStep.Digit1">
            <summary>Indicates the digit 1 used in this pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleIntersectionPairStep.Digit2">
            <summary>Indicates the digit 2 used in this pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleIntersectionPairStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleIntersectionPairStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleIntersectionPairStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleIntersectionPairStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleIntersectionPairStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleIntersectionPairStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.EmptyRectangleStep">
            <summary>
            Provides with a step that is an <b>Empty Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="Block">Indicates the block that the empty rectangle structure formed.</param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.EmptyRectangleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.Conjugate@)">
            <summary>
            Provides with a step that is an <b>Empty Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="Block">Indicates the block that the empty rectangle structure formed.</param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleStep.Block">
            <summary>Indicates the block that the empty rectangle structure formed.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleStep.ConjugatePair">
            <summary>Indicates the conjugate pair used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.EmptyRectangleStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ExocetStep">
            <summary>
            Provides with a step that is an <b>Exocet</b> technique.
            </summary>
            <param name="Views"><inheritdoc/></param>
            <param name="Exocet">INdicates the exocet pattern.</param>
            <param name="DigitsMask">Indicates the mask that holds all possible digits used.</param>
            <param name="Eliminations">Indicates all possible eliminations.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ExocetStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Patterns.Exocet@,System.Int16,System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Logical.Meta.ExocetElimination})">
            <summary>
            Provides with a step that is an <b>Exocet</b> technique.
            </summary>
            <param name="Views"><inheritdoc/></param>
            <param name="Exocet">INdicates the exocet pattern.</param>
            <param name="DigitsMask">Indicates the mask that holds all possible digits used.</param>
            <param name="Eliminations">Indicates all possible eliminations.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExocetStep.Exocet">
            <summary>INdicates the exocet pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExocetStep.DigitsMask">
            <summary>Indicates the mask that holds all possible digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExocetStep.Eliminations">
            <summary>Indicates all possible eliminations.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExocetStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExocetStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExocetStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExocetStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExocetStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExocetStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExocetStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExocetStep.BaseMap">
            <summary>
            Indicates the map of the base cells.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExocetStep.TargetMap">
            <summary>
            Indicates the map of the target cells.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ExocetStep.GatherConclusions(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Logical.Meta.ExocetElimination})">
            <summary>
            Gather conclusions.
            </summary>
            <returns>The gathered result.</returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ExtendedRectangleStep">
            <summary>
            Provides with a step that is an <b>Extended Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="DigitsMask">Indicates the mask that contains the digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ExtendedRectangleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Provides with a step that is an <b>Extended Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="DigitsMask">Indicates the mask that contains the digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleStep.Cells">
            <summary>Indicates the cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleStep.DigitsMask">
            <summary>Indicates the mask that contains the digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleStep.Type">
            <summary>
            Indicates the type of the step. The value must be between 1 and 4.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ExtendedRectangleType1Step">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ExtendedRectangleType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType1Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType1Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType1Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ExtendedRectangleType2Step">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ExtendedRectangleType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType2Step.ExtraDigit">
            <summary>Indicates the extra digit used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType2Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType2Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType2Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType2Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ExtendedRectangleType3Step">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains the extra digits.</param>
            <param name="House">Indicates the house that extra subset formed.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ExtendedRectangleType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16,Sudoku.Concepts.CellMap@,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains the extra digits.</param>
            <param name="House">Indicates the house that extra subset formed.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType3Step.ExtraCells">
            <summary>Indicates the extra cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType3Step.ExtraDigitsMask">
            <summary>Indicates the mask that contains the extra digits.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType3Step.House">
            <summary>Indicates the house that extra subset formed.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType3Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType3Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType3Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType3Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ExtendedRectangleType4Step">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ExtendedRectangleType4Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16,Sudoku.Concepts.Conjugate@)">
            <summary>
            Provides with a step that is an <b>Extended Rectangle Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType4Step.ConjugatePair">
            <summary>Indicates the conjugate pair used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType4Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType4Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType4Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ExtendedRectangleType4Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.FireworkPairType1Step">
            <summary>
            Provides with a step that is a <b>Firework Pair Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">The cells used.</param>
            <param name="DigitsMask">The digits used.</param>
            <param name="ExtraCell1">The extra cell 1.</param>
            <param name="ExtraCell2">The extra cell 2.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.FireworkPairType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Firework Pair Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">The cells used.</param>
            <param name="DigitsMask">The digits used.</param>
            <param name="ExtraCell1">The extra cell 1.</param>
            <param name="ExtraCell2">The extra cell 2.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType1Step.Cells">
            <summary>The cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType1Step.DigitsMask">
            <summary>The digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType1Step.ExtraCell1">
            <summary>The extra cell 1.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType1Step.ExtraCell2">
            <summary>The extra cell 2.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType1Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType1Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType1Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.FireworkPairType2Step">
            <summary>
            Provides with a step that is a <b>Firework Pair Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">The digits used.</param>
            <param name="Pattern1">The first pattern used.</param>
            <param name="Pattern2">The second pattern used.</param>
            <param name="ExtraCell">The extra cell used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.FireworkPairType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int16,Sudoku.Solving.Logical.Patterns.Firework@,Sudoku.Solving.Logical.Patterns.Firework@,System.Int32)">
            <summary>
            Provides with a step that is a <b>Firework Pair Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="DigitsMask">The digits used.</param>
            <param name="Pattern1">The first pattern used.</param>
            <param name="Pattern2">The second pattern used.</param>
            <param name="ExtraCell">The extra cell used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType2Step.DigitsMask">
            <summary>The digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType2Step.Pattern1">
            <summary>The first pattern used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType2Step.Pattern2">
            <summary>The second pattern used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType2Step.ExtraCell">
            <summary>The extra cell used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType2Step.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType2Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType2Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType2Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.FireworkPairType3Step">
            <summary>
            Provides with a step that is a <b>Firework Pair Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">The cells used.</param>
            <param name="DigitsMask">The digits used.</param>
            <param name="EmptyRectangleBlock">The empty rectangle block used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.FireworkPairType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is a <b>Firework Pair Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">The cells used.</param>
            <param name="DigitsMask">The digits used.</param>
            <param name="EmptyRectangleBlock">The empty rectangle block used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType3Step.Cells">
            <summary>The cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType3Step.DigitsMask">
            <summary>The digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType3Step.EmptyRectangleBlock">
            <summary>The empty rectangle block used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType3Step.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType3Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType3Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkPairType3Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.FireworkQuadrupleStep">
            <summary>
            Provides with a step that is a <b>Firework Quadruple</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">The cells used.</param>
            <param name="DigitsMask">The digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.FireworkQuadrupleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Firework Quadruple</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">The cells used.</param>
            <param name="DigitsMask">The digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkQuadrupleStep.Cells">
            <summary>The cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkQuadrupleStep.DigitsMask">
            <summary>The digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkQuadrupleStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkQuadrupleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkQuadrupleStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkQuadrupleStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.FireworkStep">
            <summary>
            Provides with a step that is a <b>Firework</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.FireworkStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View})">
            <summary>
            Provides with a step that is a <b>Firework</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.FireworkTripleStep">
            <summary>
            Provides with a step that is a <b>Firework Triple</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">The cells used.</param>
            <param name="DigitsMask">The digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.FireworkTripleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Firework Triple</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">The cells used.</param>
            <param name="DigitsMask">The digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkTripleStep.Cells">
            <summary>The cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkTripleStep.DigitsMask">
            <summary>The digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkTripleStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkTripleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkTripleStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FireworkTripleStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.FishStep">
            <summary>
            Provides with a step that is a <b>Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="BaseSetsMask">Indicates the mask that contains the base sets.</param>
            <param name="CoverSetsMask">Indicates the mask that contains the cover sets.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.FishStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="BaseSetsMask">Indicates the mask that contains the base sets.</param>
            <param name="CoverSetsMask">Indicates the mask that contains the cover sets.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FishStep.Digit">
            <summary>Indicates the digit used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FishStep.BaseSetsMask">
            <summary>Indicates the mask that contains the base sets.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FishStep.CoverSetsMask">
            <summary>Indicates the mask that contains the cover sets.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FishStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FishStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FishStep.Size">
            <inheritdoc/>
            <remarks>
            The name of the corresponding names are:
            <list type="table">
            <item><term>2</term><description>X-Wing</description></item>
            <item><term>3</term><description>Swordfish</description></item>
            <item><term>4</term><description>Jellyfish</description></item>
            <item><term>5</term><description>Squirmbag (or Starfish)</description></item>
            <item><term>6</term><description>Whale</description></item>
            <item><term>7</term><description>Leviathan</description></item>
            </list>
            Other fishes of sizes not appearing in above don't have well-known names.
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FishStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.FishStep.GetComplexFishTechniqueCodeFromName(System.String)">
            <summary>
            Try to get the <see cref="T:Sudoku.Solving.Logical.Techniques.Technique"/> code instance from the specified name, where the name belongs
            to a complex fish name, such as "Finned Franken Swordfish".
            </summary>
            <param name="name">The name.</param>
            <returns>The <see cref="T:Sudoku.Solving.Logical.Techniques.Technique"/> code instance.</returns>
            <seealso cref="T:Sudoku.Solving.Logical.Techniques.Technique"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ForcingChainStep">
            <summary>
            Provides with a step that is an <b>Alternating Inference Chain</b> technique that is compatible with program <b>Sudoku Explainer</b>.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Target">Indicates the target of the chain. This value can be used for constructing a whole chain.</param>
            <param name="IsX"><inheritdoc/></param>
            <param name="IsY"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ForcingChainStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},Sudoku.Solving.Logical.Patterns.ChainNode,System.Boolean,System.Boolean)">
            <summary>
            Provides with a step that is an <b>Alternating Inference Chain</b> technique that is compatible with program <b>Sudoku Explainer</b>.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Target">Indicates the target of the chain. This value can be used for constructing a whole chain.</param>
            <param name="IsX"><inheritdoc/></param>
            <param name="IsY"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ForcingChainStep.Target">
            <summary>Indicates the target of the chain. This value can be used for constructing a whole chain.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ForcingChainStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ForcingChainStep.GetGreenPotentials(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ForcingChainStep.GetRedPotentials(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ForcingChainStep.GetLinks(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ForcingChainStep.GetColorCandidates(System.Boolean)">
            <summary>
            Gets all colored candidates with the specified state.
            </summary>
            <param name="state">The state of the candidate you want to color.</param>
            <returns>All colored candidates with a same state.</returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.FullHouseStep">
            <summary>
            Provides with a step that is a <b>Full House</b> technique.
            </summary>
            <param name="Cell"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.FullHouseStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Full House</b> technique.
            </summary>
            <param name="Cell"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FullHouseStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FullHouseStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FullHouseStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.FullHouseStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.GroupedWWingStep">
            <summary>
            Provides with a step that is a <b>Grouped W-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="StartCell">Indicates the start cell.</param>
            <param name="EndCell">Indicates the end cell.</param>
            <param name="Bridge">
            Indicates the bridge cells connecting with cells <see cref="P:Sudoku.Solving.Logical.Steps.GroupedWWingStep.StartCell"/> and <see cref="P:Sudoku.Solving.Logical.Steps.GroupedWWingStep.EndCell"/>.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.GroupedWWingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@)">
            <summary>
            Provides with a step that is a <b>Grouped W-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="StartCell">Indicates the start cell.</param>
            <param name="EndCell">Indicates the end cell.</param>
            <param name="Bridge">
            Indicates the bridge cells connecting with cells <see cref="P:Sudoku.Solving.Logical.Steps.GroupedWWingStep.StartCell"/> and <see cref="P:Sudoku.Solving.Logical.Steps.GroupedWWingStep.EndCell"/>.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GroupedWWingStep.StartCell">
            <summary>Indicates the start cell.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GroupedWWingStep.EndCell">
            <summary>Indicates the end cell.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GroupedWWingStep.Bridge">
            <summary>
            Indicates the bridge cells connecting with cells <see cref="P:Sudoku.Solving.Logical.Steps.GroupedWWingStep.StartCell"/> and <see cref="P:Sudoku.Solving.Logical.Steps.GroupedWWingStep.EndCell"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GroupedWWingStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GroupedWWingStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GroupedWWingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GroupedWWingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GroupedWWingStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.GuardianStep">
            <summary>
            Provides with a step that is a <b>Guardian</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="Loop">Indicates the loop cells used.</param>
            <param name="Guardians">Indicates the guardian cells used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.GuardianStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@)">
            <summary>
            Provides with a step that is a <b>Guardian</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="Loop">Indicates the loop cells used.</param>
            <param name="Guardians">Indicates the guardian cells used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GuardianStep.Digit">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GuardianStep.Loop">
            <summary>Indicates the loop cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GuardianStep.Guardians">
            <summary>Indicates the guardian cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GuardianStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GuardianStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GuardianStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GuardianStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GuardianStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GuardianStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GuardianStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GuardianStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.GuardianStep.Equals(Sudoku.Solving.Logical.Steps.GuardianStep,Sudoku.Solving.Logical.Steps.GuardianStep)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.GurthSymmetricalPlacementStep">
            <summary>
            Provides with a step that is a <b>Gurth's Symmetrical Placement</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="SymmetryType">
            Indicates the symmetry type used. The supported value can only be:
            <list type="bullet">
            <item><see cref="F:Sudoku.Concepts.SymmetryType.Central"/></item>
            <item><see cref="F:Sudoku.Concepts.SymmetryType.Diagonal"/></item>
            <item><see cref="F:Sudoku.Concepts.SymmetryType.AntiDiagonal"/></item>
            </list>
            </param>
            <param name="MappingRelations">
            Indicates the mapping relations; in other words, this table shows what digits has symmetrical placement relation
            to what digits.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.GurthSymmetricalPlacementStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.SymmetryType,System.Nullable{System.Int32}[])">
            <summary>
            Provides with a step that is a <b>Gurth's Symmetrical Placement</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="SymmetryType">
            Indicates the symmetry type used. The supported value can only be:
            <list type="bullet">
            <item><see cref="F:Sudoku.Concepts.SymmetryType.Central"/></item>
            <item><see cref="F:Sudoku.Concepts.SymmetryType.Diagonal"/></item>
            <item><see cref="F:Sudoku.Concepts.SymmetryType.AntiDiagonal"/></item>
            </list>
            </param>
            <param name="MappingRelations">
            Indicates the mapping relations; in other words, this table shows what digits has symmetrical placement relation
            to what digits.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GurthSymmetricalPlacementStep.SymmetryType">
            <summary>
            Indicates the symmetry type used. The supported value can only be:
            <list type="bullet">
            <item><see cref="F:Sudoku.Concepts.SymmetryType.Central"/></item>
            <item><see cref="F:Sudoku.Concepts.SymmetryType.Diagonal"/></item>
            <item><see cref="F:Sudoku.Concepts.SymmetryType.AntiDiagonal"/></item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GurthSymmetricalPlacementStep.MappingRelations">
            <summary>
            Indicates the mapping relations; in other words, this table shows what digits has symmetrical placement relation
            to what digits.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GurthSymmetricalPlacementStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GurthSymmetricalPlacementStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.GurthSymmetricalPlacementStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.HiddenSingleStep">
            <summary>
            Provides with a step that is a <b>Hidden Single</b> or <b>Last Digit</b> (for special cases) technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="House">Indicates the house used.</param>
            <param name="EnableAndIsLastDigit">Indicates whether the current step is a <b>Last Digit</b> technique usage.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.HiddenSingleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Provides with a step that is a <b>Hidden Single</b> or <b>Last Digit</b> (for special cases) technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="House">Indicates the house used.</param>
            <param name="EnableAndIsLastDigit">Indicates whether the current step is a <b>Last Digit</b> technique usage.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.HiddenSingleStep.House">
            <summary>Indicates the house used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.HiddenSingleStep.EnableAndIsLastDigit">
            <summary>Indicates whether the current step is a <b>Last Digit</b> technique usage.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.HiddenSingleStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.HiddenSingleStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.HiddenSingleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.HiddenSingleStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.HiddenSingleStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.HiddenSubsetStep">
            <summary>
            Provides with a step that is a <b>Hidden Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="House"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.HiddenSubsetStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Hidden Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="House"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.HiddenSubsetStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.HiddenSubsetStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.HiddenSubsetStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.HiddenSubsetStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.HiddenUniqueRectangleStep">
            <summary>
            Provides with a step that is a <b>Hidden Unique Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="ConjugatePairs"><inheritdoc/></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.HiddenUniqueRectangleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Boolean,Sudoku.Concepts.Conjugate[],System.Int32)">
            <summary>
            Provides with a step that is a <b>Hidden Unique Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="ConjugatePairs"><inheritdoc/></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.HiddenUniqueRectangleStep.Format">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.IDistinctableStep`1">
            <summary>
            Defines a step that can be distinctable.
            </summary>
            <typeparam name="TSelf">
            The type of the element to compare. The type must derive from <see cref="T:Sudoku.Solving.Logical.IStep"/> (e.g. <see cref="T:Sudoku.Solving.Logical.Steps.Step"/>),
            and implement this interface type, with type argument be itself.
            </typeparam>
            <remarks>
            A <b>distinctable step</b> is a step that is with the unique information,
            in order that multiple steps of the same type can be recognized by the relative methods to filter and remove same-value instances.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.IDistinctableStep`1.Equals(`0,`0)">
            <summary>
            To compare 2 instances of type <typeparamref name="TSelf"/>, to determine whether 2 instances holds the same value.
            </summary>
            <param name="left">Indicates the first instance to compare.</param>
            <param name="right">Indicates the second instance to compare.</param>
            <returns>
            A <see cref="T:System.Boolean"/> result indicating whether the elements are same.
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>Two elements are same.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>Two elements holds the different values.</description>
            </item>
            </list>
            </returns>
            <remarks>
            The method can be the same implemented as the method <see cref="M:System.Object.Equals(System.Object)"/>,
            but <see langword="record"/>s are automatically implemented useless and unmeaningful methods.
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.IDistinctableStep`1.Distinct(System.Collections.Generic.IList{`0})">
            <summary>
            Distinct the list, that is, remove all duplicate elements in this list,
            which uses the method <see cref="M:Sudoku.Solving.Logical.Steps.IDistinctableStep`1.Equals(`0,`0)"/> defined in this interface.
            </summary>
            <param name="list">The list of steps to be processed.</param>
            <returns>The list of steps.</returns>
            <remarks>
            This method does not change the ordering of the original list.
            In other words, if the original list is in order, the final list after invoking this method will be also in order.
            </remarks>
            <seealso cref="M:Sudoku.Solving.Logical.Steps.IDistinctableStep`1.Equals(`0,`0)"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.Comparer`1">
            <summary>
            The internal comparer instance.
            </summary>
            <typeparam name="T">The type of the step.</typeparam>
        </member>
        <member name="F:Sudoku.Solving.Logical.Steps.Comparer`1.Instance">
            <summary>
            Indicates the singleton instance.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.Comparer`1.#ctor">
            <summary>
            Initializes a <see cref="T:Sudoku.Solving.Logical.Steps.Comparer`1"/> instance.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.Comparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.Comparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.IInvalidStep">
            <summary>
            Provides with an invalid step instance that can be used for some cases that the technique should be skipped
            because it is temporarily not supported by the technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Steps.IInvalidStep.Instance">
            <summary>
            Indicates the only instance of type <see cref="T:Sudoku.Solving.Logical.Steps.IInvalidStep"/> that can be used.
            </summary>
            <remarks>
            This instance is special. The instance will be used only if the step searcher found the puzzle
            being invalid to be successfully and correctly handled.
            All members existed in type <see cref="T:Sudoku.Solving.Logical.IStep"/> are implemented with throwing behavior.
            In other words, you cannot use any possible members in this instance; otherwise you will get
            a <see cref="T:System.NotSupportedException"/> instance.
            </remarks>
            <seealso cref="T:System.NotSupportedException"/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.IntersectionStep">
            <summary>
            Provides with a step that is an <b>Intersection</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.IntersectionStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View})">
            <summary>
            Provides with a step that is an <b>Intersection</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.IntersectionStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.IntersectionStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.IntersectionStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.IrregularWingStep">
            <summary>
            Provides with a step that is a <b>Irregular Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.IrregularWingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View})">
            <summary>
            Provides with a step that is a <b>Irregular Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.JuniorExocetStep">
            <summary>
            Provides with a step that is a <b>Junior Exocet</b> technique.
            </summary>
            <param name="Views"><inheritdoc/></param>
            <param name="Exocet"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="Eliminations"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.JuniorExocetStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Patterns.Exocet@,System.Int16,System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Logical.Meta.ExocetElimination})">
            <summary>
            Provides with a step that is a <b>Junior Exocet</b> technique.
            </summary>
            <param name="Views"><inheritdoc/></param>
            <param name="Exocet"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="Eliminations"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.JuniorExocetStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.JuniorExocetStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.JuniorExocetStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.JuniorExocetStep.LockedMemberQStr">
            <summary>
            Indicates the locked member Q string.
            </summary>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.JuniorExocetStep.LockedMemberRStr">
            <summary>
            Indicates the locked member R string.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.LastResortStep">
            <summary>
            Provides with a step that is a <b>Last Resort</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.LastResortStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View})">
            <summary>
            Provides with a step that is a <b>Last Resort</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.LastResortStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.LockedCandidatesStep">
            <summary>
            Provides with a step that is a <b>Locked Candidates</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="BaseSet">Indicates the house that the current locked candidates forms.</param>
            <param name="CoverSet">Indicates the house that the current locked candidates influences.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.LockedCandidatesStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Locked Candidates</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
            <param name="BaseSet">Indicates the house that the current locked candidates forms.</param>
            <param name="CoverSet">Indicates the house that the current locked candidates influences.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.LockedCandidatesStep.Digit">
            <summary>Indicates the digit used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.LockedCandidatesStep.BaseSet">
            <summary>Indicates the house that the current locked candidates forms.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.LockedCandidatesStep.CoverSet">
            <summary>Indicates the house that the current locked candidates influences.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.LockedCandidatesStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.LockedCandidatesStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.LockedCandidatesStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.LockedCandidatesStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.LockedCandidatesStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.LockedCandidatesStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.MultiBranchWWingStep">
            <summary>
            Provides with a step that is a <b>Multi-Branch W-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Leaves">The leaves of the pattern.</param>
            <param name="Root">The root cells that corresponds to each leaf.</param>
            <param name="House">The house used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.MultiBranchWWingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Provides with a step that is a <b>Multi-Branch W-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Leaves">The leaves of the pattern.</param>
            <param name="Root">The root cells that corresponds to each leaf.</param>
            <param name="House">The house used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultiBranchWWingStep.Leaves">
            <summary>The leaves of the pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultiBranchWWingStep.Root">
            <summary>The root cells that corresponds to each leaf.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultiBranchWWingStep.House">
            <summary>The house used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultiBranchWWingStep.Size">
            <summary>
            Indicates the number of branches of the technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultiBranchWWingStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultiBranchWWingStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultiBranchWWingStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultiBranchWWingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultiBranchWWingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultiBranchWWingStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.MultisectorLockedSetsStep">
            <summary>
            Provides with a step that is a <b>Multi-sector Locked Sets</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.MultisectorLockedSetsStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@)">
            <summary>
            Provides with a step that is a <b>Multi-sector Locked Sets</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultisectorLockedSetsStep.Cells">
            <summary>Indicates the cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultisectorLockedSetsStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultisectorLockedSetsStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultisectorLockedSetsStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultisectorLockedSetsStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultisectorLockedSetsStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultisectorLockedSetsStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultisectorLockedSetsStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.MultisectorLockedSetsStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.NakedSingleStep">
            <summary>
            Provides with a step that is a <b>Naked Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.NakedSingleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Naked Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NakedSingleStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NakedSingleStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NakedSingleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NakedSingleStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.NakedSubsetStep">
            <summary>
            Provides with a step that is a <b>Hidden Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="House"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="IsLocked">
            Indicates which locked type this subset is. The cases are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The subset is a locked subset.</description>
            </item>
            <item>
            <term><see langword="true"/></term>
            <description>The subset is a naked subset with at least one extra locked candidate.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The subset is a normal naked subset without any extra locked candidates.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.NakedSubsetStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,Sudoku.Concepts.CellMap@,System.Int16,System.Nullable{System.Boolean})">
            <summary>
            Provides with a step that is a <b>Hidden Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="House"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="IsLocked">
            Indicates which locked type this subset is. The cases are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The subset is a locked subset.</description>
            </item>
            <item>
            <term><see langword="true"/></term>
            <description>The subset is a naked subset with at least one extra locked candidate.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The subset is a normal naked subset without any extra locked candidates.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NakedSubsetStep.IsLocked">
            <summary>
            Indicates which locked type this subset is. The cases are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The subset is a locked subset.</description>
            </item>
            <item>
            <term><see langword="true"/></term>
            <description>The subset is a naked subset with at least one extra locked candidate.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The subset is a normal naked subset without any extra locked candidates.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NakedSubsetStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NakedSubsetStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NakedSubsetStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.NegativeRankStep">
            <summary>
            Provides with a step that is a <b>Negative Rank</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.NegativeRankStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View})">
            <summary>
            Provides with a step that is a <b>Negative Rank</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.NonnegativeRankStep">
            <summary>
            Provides with a step that is a <b>Non-negative Rank</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.NonnegativeRankStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View})">
            <summary>
            Provides with a step that is a <b>Non-negative Rank</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.NormalFishStep">
            <summary>
            Provides with a step that is an <b>Normal Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseSetsMask"><inheritdoc/></param>
            <param name="CoverSetsMask"><inheritdoc/></param>
            <param name="Fins">Indicates the fins.</param>
            <param name="IsSashimi">
            Indicates whether the fish instance is a sashimi fish. All possible values are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The fish is a sashimi fish.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>The fish is a finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The fish is a normal fish without any fins.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.NormalFishStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Nullable{System.Boolean})">
            <summary>
            Provides with a step that is an <b>Normal Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseSetsMask"><inheritdoc/></param>
            <param name="CoverSetsMask"><inheritdoc/></param>
            <param name="Fins">Indicates the fins.</param>
            <param name="IsSashimi">
            Indicates whether the fish instance is a sashimi fish. All possible values are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The fish is a sashimi fish.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>The fish is a finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The fish is a normal fish without any fins.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NormalFishStep.Fins">
            <summary>Indicates the fins.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NormalFishStep.IsSashimi">
            <summary>
            Indicates whether the fish instance is a sashimi fish. All possible values are as belows:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The fish is a sashimi fish.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>The fish is a finned fish.</description>
            </item>
            <item>
            <term><see langword="null"/></term>
            <description>The fish is a normal fish without any fins.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NormalFishStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NormalFishStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NormalFishStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NormalFishStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NormalFishStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NormalFishStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NormalFishStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.NormalFishStep.InternalName">
            <summary>
            Indicates the internal name.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.PatternOverlayStep">
            <summary>
            Provides with a step that is a <b>Pattern Overlay</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.PatternOverlayStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion})">
            <summary>
            Provides with a step that is a <b>Pattern Overlay</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.PatternOverlayStep.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.PatternOverlayStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.PatternOverlayStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.PatternOverlayStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.PatternOverlayStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.PatternOverlayStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.PatternOverlayStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.PatternOverlayStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternLockedTypeStep">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Locked Type</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="Candidates">Indicates the candidates used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternLockedTypeStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern@,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Locked Type</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="Candidates">Indicates the candidates used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternLockedTypeStep.Candidates">
            <summary>Indicates the candidates used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternLockedTypeStep.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternLockedTypeStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternLockedTypeStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternStep">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern">Indicates the pattern used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern@)">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern">Indicates the pattern used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternStep.Pattern">
            <summary>Indicates the pattern used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternStep.Type">
            <summary>
            Indicates the type of the current technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType1Step">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="Candidate">Indicates the extra candidate used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern@,System.Int32)">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="Candidate">Indicates the extra candidate used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType1Step.Candidate">
            <summary>Indicates the extra candidate used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType1Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType1Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType2Step">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern@,System.Int32)">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType2Step.ExtraDigit">
            <summary>Indicates the extra digit used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType2Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType2Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType2Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType3Step">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="ExtraDigitsMask">Indicates the extra digits used to form the subset.</param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="IsNaked">Indicates whether the subset is a naked subset.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern@,System.Int16,Sudoku.Concepts.CellMap@,System.Boolean)">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="ExtraDigitsMask">Indicates the extra digits used to form the subset.</param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="IsNaked">Indicates whether the subset is a naked subset.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType3Step.ExtraDigitsMask">
            <summary>Indicates the extra digits used to form the subset.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType3Step.ExtraCells">
            <summary>Indicates the extra cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType3Step.IsNaked">
            <summary>Indicates whether the subset is a naked subset.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType3Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType3Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType3Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType4Step">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType4Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Patterns.QiuDeadlyPattern@,Sudoku.Concepts.Conjugate@)">
            <summary>
            Provides with a step that is a <b>Qiu's Deadly Pattern Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern"><inheritdoc/></param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType4Step.ConjugatePair">
            <summary>Indicates the conjugate pair used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType4Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType4Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.QiuDeadlyPatternType4Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.RankTheoryStep">
            <summary>
            Provides with a step that is a <b>Rank Theory</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.RankTheoryStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View})">
            <summary>
            Provides with a step that is a <b>Rank Theory</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RankTheoryStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RankTheoryStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RankTheoryStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.RegionForcingChainsStep">
            <summary>
            Provides with a step that is an <b>Region (House) Forcing Chains</b> technique that is compatible with program <b>Sudoku Explainer</b>.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="HouseIndex">Indicates the index of the house represented.</param>
            <param name="Digit">Indicates the digit of the chain bound with.</param>
            <param name="Chains">Indicates all possible branches in this technique.</param>
            <param name="IsDynamic"><inheritdoc/></param>
            <param name="DynamicNestingLevel"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.RegionForcingChainsStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Int32,System.Byte,Sudoku.Solving.Logical.Patterns.MultipleForcingChains,System.Boolean,System.Int32)">
            <summary>
            Provides with a step that is an <b>Region (House) Forcing Chains</b> technique that is compatible with program <b>Sudoku Explainer</b>.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="HouseIndex">Indicates the index of the house represented.</param>
            <param name="Digit">Indicates the digit of the chain bound with.</param>
            <param name="Chains">Indicates all possible branches in this technique.</param>
            <param name="IsDynamic"><inheritdoc/></param>
            <param name="DynamicNestingLevel"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegionForcingChainsStep.HouseIndex">
            <summary>Indicates the index of the house represented.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegionForcingChainsStep.Digit">
            <summary>Indicates the digit of the chain bound with.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegionForcingChainsStep.Chains">
            <summary>Indicates all possible branches in this technique.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegionForcingChainsStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.RegionForcingChainsStep.GetGreenPotentials(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.RegionForcingChainsStep.GetRedPotentials(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.RegionForcingChainsStep.GetLinks(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.RegionForcingChainsStep.GetPotentialAt(System.Int32)">
            <summary>
            Gets the potential at the specified index.
            </summary>
            <param name="viewIndex">The view index.</param>
            <returns>The view index.</returns>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.RegularWingStep">
            <summary>
            Provides with a step that is a <b>Regular Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pivot">Indicates the cell that blossomed its petals.</param>
            <param name="PivotCandidatesCount">Indicates the number of digits in the pivot cell.</param>
            <param name="DigitsMask">Indicates a mask that contains all digits used.</param>
            <param name="Petals">Indicates the petals used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.RegularWingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,System.Int16,Sudoku.Concepts.CellMap@)">
            <summary>
            Provides with a step that is a <b>Regular Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pivot">Indicates the cell that blossomed its petals.</param>
            <param name="PivotCandidatesCount">Indicates the number of digits in the pivot cell.</param>
            <param name="DigitsMask">Indicates a mask that contains all digits used.</param>
            <param name="Petals">Indicates the petals used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegularWingStep.Pivot">
            <summary>Indicates the cell that blossomed its petals.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegularWingStep.PivotCandidatesCount">
            <summary>Indicates the number of digits in the pivot cell.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegularWingStep.DigitsMask">
            <summary>Indicates a mask that contains all digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegularWingStep.Petals">
            <summary>Indicates the petals used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegularWingStep.IsIncomplete">
            <summary>
            Indicates whether the structure is incomplete.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegularWingStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegularWingStep.Size">
            <inheritdoc/>
            <remarks>
            All names are:
            <list type="table">
            <item>
            <term>2</term>
            <description>XY-Wing</description>
            </item>
            <item>
            <term>3</term>
            <description>XYZ-Wing</description>
            </item>
            <item>
            <term>4</term>
            <description>WXYZ-Wing</description>
            </item>
            <item>
            <term>5</term>
            <description>VWXYZ-Wing</description>
            </item>
            <item>
            <term>6</term>
            <description>UVWXYZ-Wing</description>
            </item>
            <item>
            <term>7</term>
            <description>TUVWXYZ-Wing</description>
            </item>
            <item>
            <term>8</term>
            <description>STUVWXYZ-Wing</description>
            </item>
            <item>
            <term>9</term>
            <description>RSTUVWXYZ-Wing</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegularWingStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegularWingStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegularWingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegularWingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegularWingStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegularWingStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RegularWingStep.InternalName">
            <summary>
            Indicates the internal name.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ReverseBivalueUniversalGraveStep">
            <summary>
            Provides with a step that is a <b>Reverse Bi-value Universal Grave</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="DigitsMask">Indicates the digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ReverseBivalueUniversalGraveStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Reverse Bi-value Universal Grave</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="DigitsMask">Indicates the digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseBivalueUniversalGraveStep.Cells">
            <summary>Indicates the cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseBivalueUniversalGraveStep.DigitsMask">
            <summary>Indicates the digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseBivalueUniversalGraveStep.Type">
            <summary>
            Indicates the type of the step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseBivalueUniversalGraveStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseBivalueUniversalGraveStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseBivalueUniversalGraveStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseBivalueUniversalGraveStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseBivalueUniversalGraveStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleStep">
            <summary>
            Provides with a step that is a <b>Reverse Unique Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Reverse Unique Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleType1Step">
            <summary>
            Provides with a step that is a <b>Reverse Unique Rectangle Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="TargetCell">The target cell used.</param>
            <param name="TargetDigit">The target digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Reverse Unique Rectangle Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="TargetCell">The target cell used.</param>
            <param name="TargetDigit">The target digit used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleType1Step.TargetCell">
            <summary>The target cell used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleType1Step.TargetDigit">
            <summary>The target digit used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleType1Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleType1Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleType2Step">
            <summary>
            Provides with a step that is a <b>Reverse Unique Rectangle Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigit">The extra digit used.</param>
            <param name="CellsHavingExtraDigit">Indicates the cells that contains the extra digit in the pattern.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16,System.Int32,Sudoku.Concepts.CellMap@)">
            <summary>
            Provides with a step that is a <b>Reverse Unique Rectangle Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigit">The extra digit used.</param>
            <param name="CellsHavingExtraDigit">Indicates the cells that contains the extra digit in the pattern.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleType2Step.ExtraDigit">
            <summary>The extra digit used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleType2Step.CellsHavingExtraDigit">
            <summary>Indicates the cells that contains the extra digit in the pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleType2Step.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleType2Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.ReverseUniqueRectangleType2Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.RwDeadlyPatternStep">
            <summary>
            Provides with a step that is a <b>RW's Deadly Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern">Indicates the pattern.</param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="ChuteIndex">Indicates the global chute index.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.RwDeadlyPatternStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is a <b>RW's Deadly Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Pattern">Indicates the pattern.</param>
            <param name="DigitsMask">Indicates the digits used.</param>
            <param name="ChuteIndex">Indicates the global chute index.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RwDeadlyPatternStep.Pattern">
            <summary>Indicates the pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RwDeadlyPatternStep.DigitsMask">
            <summary>Indicates the digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RwDeadlyPatternStep.ChuteIndex">
            <summary>Indicates the global chute index.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RwDeadlyPatternStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RwDeadlyPatternStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RwDeadlyPatternStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RwDeadlyPatternStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RwDeadlyPatternStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.RwDeadlyPatternStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.SeniorExocetStep">
            <summary>
            Provides with a step that is a <b>Senior Exocet</b> technique.
            </summary>
            <param name="Views"><inheritdoc/></param>
            <param name="Exocet"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="EndoTargetCell">Indicates the target cell that is embedded into the cross-line cells.</param>
            <param name="ExtraHousesMask">Indicates the mask that holds the extra houses used.</param>
            <param name="Eliminations"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.SeniorExocetStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Patterns.Exocet@,System.Int16,System.Int32,System.Int32[],System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Logical.Meta.ExocetElimination})">
            <summary>
            Provides with a step that is a <b>Senior Exocet</b> technique.
            </summary>
            <param name="Views"><inheritdoc/></param>
            <param name="Exocet"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="EndoTargetCell">Indicates the target cell that is embedded into the cross-line cells.</param>
            <param name="ExtraHousesMask">Indicates the mask that holds the extra houses used.</param>
            <param name="Eliminations"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SeniorExocetStep.EndoTargetCell">
            <summary>Indicates the target cell that is embedded into the cross-line cells.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SeniorExocetStep.ExtraHousesMask">
            <summary>Indicates the mask that holds the extra houses used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SeniorExocetStep.ContainsExtraHouses">
            <summary>
            Indicates whether the specified instance contains any extra houses.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SeniorExocetStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SeniorExocetStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SeniorExocetStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SeniorExocetStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.SingleDigitPatternStep">
            <summary>
            Provides with a step that is a <b>Single Digit Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.SingleDigitPatternStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32)">
            <summary>
            Provides with a step that is a <b>Single Digit Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit">Indicates the digit used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SingleDigitPatternStep.Digit">
            <summary>Indicates the digit used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SingleDigitPatternStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SingleDigitPatternStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SingleDigitPatternStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SingleDigitPatternStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.SingleStep">
            <summary>
            Provides with a step that is a <b>Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell">Indicates the cell used.</param>
            <param name="Digit">Indicates the digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.SingleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Single</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cell">Indicates the cell used.</param>
            <param name="Digit">Indicates the digit used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SingleStep.Cell">
            <summary>Indicates the cell used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SingleStep.Digit">
            <summary>Indicates the digit used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SingleStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SingleStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SingleStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SingleStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.Step">
            <summary>
            Provides with a logical solving step that is a technique usage, and contains the conclusions.
            </summary>
            <param name="Conclusions"><inheritdoc cref="P:Sudoku.Presentation.IVisual.Conclusions" path="/summary"/></param>
            <param name="Views"><inheritdoc cref="P:Sudoku.Presentation.IVisual.Views" path="/summary"/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View})">
            <summary>
            Provides with a logical solving step that is a technique usage, and contains the conclusions.
            </summary>
            <param name="Conclusions"><inheritdoc cref="P:Sudoku.Presentation.IVisual.Conclusions" path="/summary"/></param>
            <param name="Views"><inheritdoc cref="P:Sudoku.Presentation.IVisual.Views" path="/summary"/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.Step.Conclusions">
            <summary><inheritdoc cref="P:Sudoku.Presentation.IVisual.Conclusions" path="/summary"/></summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.Step.Views">
            <summary><inheritdoc cref="P:Sudoku.Presentation.IVisual.Views" path="/summary"/></summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.Step.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.Step.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.Step.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.Step.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.Step.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.Step.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.Step.ConclusionText">
            <inheritdoc cref="P:Sudoku.Solving.Logical.IStep.ConclusionText"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.Step.Sudoku#Solving#Logical#IStep#ConclusionText">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.Step.ApplyTo(Sudoku.Concepts.Grid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.Step.HasTag(Sudoku.Solving.Logical.Techniques.TechniqueTags)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.Step.ToString">
            <summary>
            <inheritdoc cref="M:Sudoku.Solving.Logical.IStep.ToString" path="/summary"/>
            </summary>
            <returns>
            <inheritdoc cref="M:Sudoku.Solving.Logical.IStep.ToString" path="/returns"/>
            </returns>
            <remarks>
            <inheritdoc cref="M:Sudoku.Solving.Logical.IStep.ToString" path="//remarks/para[1]"/>
            </remarks>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.Step.ToSimpleString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.SubsetStep">
            <summary>
            Provides with a step that is a <b>Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="House">The house that structure lies in.</param>
            <param name="Cells">All cells used.</param>
            <param name="DigitsMask">The mask that contains all digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.SubsetStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Subset</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="House">The house that structure lies in.</param>
            <param name="Cells">All cells used.</param>
            <param name="DigitsMask">The mask that contains all digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SubsetStep.House">
            <summary>The house that structure lies in.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SubsetStep.Cells">
            <summary>All cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SubsetStep.DigitsMask">
            <summary>The mask that contains all digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SubsetStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SubsetStep.Size">
            <summary>
            Indicates the number of cells used.
            Due to the technique logic, you can also treat the result value of this property as the number of digits used.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SubsetStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SubsetStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SubsetStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SubsetStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SubsetStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SubsetStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.SueDeCoq3DimensionStep">
            <summary>
            Provides with a step that is a <b>3-dimensional Sue de Coq</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="RowDigitsMask">The row digits mask.</param>
            <param name="ColumnDigitsMask">The column digits mask.</param>
            <param name="BlockDigitsMask">The block digits mask.</param>
            <param name="RowCells">The row cells map.</param>
            <param name="ColumnCells">The column cells map.</param>
            <param name="BlockCells">The block cells map.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.SueDeCoq3DimensionStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int16,System.Int16,System.Int16,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@)">
            <summary>
            Provides with a step that is a <b>3-dimensional Sue de Coq</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="RowDigitsMask">The row digits mask.</param>
            <param name="ColumnDigitsMask">The column digits mask.</param>
            <param name="BlockDigitsMask">The block digits mask.</param>
            <param name="RowCells">The row cells map.</param>
            <param name="ColumnCells">The column cells map.</param>
            <param name="BlockCells">The block cells map.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoq3DimensionStep.RowDigitsMask">
            <summary>The row digits mask.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoq3DimensionStep.ColumnDigitsMask">
            <summary>The column digits mask.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoq3DimensionStep.BlockDigitsMask">
            <summary>The block digits mask.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoq3DimensionStep.RowCells">
            <summary>The row cells map.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoq3DimensionStep.ColumnCells">
            <summary>The column cells map.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoq3DimensionStep.BlockCells">
            <summary>The block cells map.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoq3DimensionStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoq3DimensionStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoq3DimensionStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoq3DimensionStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoq3DimensionStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoq3DimensionStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoq3DimensionStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.SueDeCoqStep">
            <summary>
            Provides with a step that is a <b>Sue de Coq</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Block">The block.</param>
            <param name="Line">The line.</param>
            <param name="BlockMask">The block mask.</param>
            <param name="LineMask">The line mask.</param>
            <param name="IntersectionMask">The intersection mask.</param>
            <param name="IsCannibalistic">Indicates whether the SdC is cannibalistic.</param>
            <param name="IsolatedDigitsMask">The isolated digits mask.</param>
            <param name="BlockCells">The map of block cells.</param>
            <param name="LineCells">The map of line cells.</param>
            <param name="IntersectionCells">The map of intersection cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.SueDeCoqStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,System.Int16,System.Int16,System.Int16,System.Boolean,System.Int16,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@)">
            <summary>
            Provides with a step that is a <b>Sue de Coq</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Block">The block.</param>
            <param name="Line">The line.</param>
            <param name="BlockMask">The block mask.</param>
            <param name="LineMask">The line mask.</param>
            <param name="IntersectionMask">The intersection mask.</param>
            <param name="IsCannibalistic">Indicates whether the SdC is cannibalistic.</param>
            <param name="IsolatedDigitsMask">The isolated digits mask.</param>
            <param name="BlockCells">The map of block cells.</param>
            <param name="LineCells">The map of line cells.</param>
            <param name="IntersectionCells">The map of intersection cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.Block">
            <summary>The block.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.Line">
            <summary>The line.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.BlockMask">
            <summary>The block mask.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.LineMask">
            <summary>The line mask.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.IntersectionMask">
            <summary>The intersection mask.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.IsCannibalistic">
            <summary>Indicates whether the SdC is cannibalistic.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.IsolatedDigitsMask">
            <summary>The isolated digits mask.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.BlockCells">
            <summary>The map of block cells.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.LineCells">
            <summary>The map of line cells.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.IntersectionCells">
            <summary>The map of intersection cells.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SueDeCoqStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.SymmetryStep">
            <summary>
            Provides with a step that is a <b>Symmetrical</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.SymmetryStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View})">
            <summary>
            Provides with a step that is a <b>Symmetrical</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SymmetryStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SymmetryStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SymmetryStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.SymmetryStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.TemplateStep">
            <summary>
            Provides with a step that is a <b>Template</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="IsTemplateDeletion">Indicates whether the step is a deletion.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.TemplateStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Boolean)">
            <summary>
            Provides with a step that is a <b>Template</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="IsTemplateDeletion">Indicates whether the step is a deletion.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TemplateStep.IsTemplateDeletion">
            <summary>Indicates whether the step is a deletion.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TemplateStep.Digit">
            <summary>
            Indicates the digit.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TemplateStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TemplateStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TemplateStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TemplateStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TemplateStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TemplateStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.TwoStrongLinksStep">
            <summary>
            Provides with a step that is a <b>Single Digit Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseHouse">Indicates the base house used.</param>
            <param name="TargetHouse">Indicates the target house used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.TwoStrongLinksStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Single Digit Pattern</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit"><inheritdoc/></param>
            <param name="BaseHouse">Indicates the base house used.</param>
            <param name="TargetHouse">Indicates the target house used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TwoStrongLinksStep.BaseHouse">
            <summary>Indicates the base house used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TwoStrongLinksStep.TargetHouse">
            <summary>Indicates the target house used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TwoStrongLinksStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TwoStrongLinksStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TwoStrongLinksStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TwoStrongLinksStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TwoStrongLinksStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.TwoStrongLinksStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueLoopStep">
            <summary>
            Provides with a step that is a <b>Unique Loop</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1">Indicates the first digit.</param>
            <param name="Digit2">Indicates the second digit.</param>
            <param name="Loop">Indicates the loop that the instance used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueLoopStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@)">
            <summary>
            Provides with a step that is a <b>Unique Loop</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1">Indicates the first digit.</param>
            <param name="Digit2">Indicates the second digit.</param>
            <param name="Loop">Indicates the loop that the instance used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopStep.Digit1">
            <summary>Indicates the first digit.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopStep.Digit2">
            <summary>Indicates the second digit.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopStep.Loop">
            <summary>Indicates the loop that the instance used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopStep.Type">
            <summary>
            Indicates the type.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueLoopStep.Equals(Sudoku.Solving.Logical.Steps.UniqueLoopStep,Sudoku.Solving.Logical.Steps.UniqueLoopStep)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueLoopType1Step">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueLoopType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@)">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType1Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType1Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType1Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueLoopType2Step">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueLoopType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType2Step.ExtraDigit">
            <summary>Indicates the extra digit.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType2Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType2Step.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType2Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType2Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueLoopType3Step">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="SubsetDigitsMask">
            Indicates the mask that contains the subset digits used in this instance.
            </param>
            <param name="SubsetCells">Indicates the subset cells.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueLoopType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int16,Sudoku.Concepts.CellMap@)">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="SubsetDigitsMask">
            Indicates the mask that contains the subset digits used in this instance.
            </param>
            <param name="SubsetCells">Indicates the subset cells.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType3Step.SubsetDigitsMask">
            <summary>
            Indicates the mask that contains the subset digits used in this instance.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType3Step.SubsetCells">
            <summary>Indicates the subset cells.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType3Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType3Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType3Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType3Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueLoopType4Step">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueLoopType4Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.Conjugate@)">
            <summary>
            Provides with a step that is a <b>Unique Loop Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Loop"><inheritdoc/></param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType4Step.ConjugatePair">
            <summary>Indicates the conjugate pair used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType4Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType4Step.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType4Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueLoopType4Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueMatrixStep">
            <summary>
            Provides with a step that is a <b>Unique Matrix</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="DigitsMask">Indicates the digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueMatrixStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Unique Matrix</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="DigitsMask">Indicates the digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixStep.Cells">
            <summary>Indicates the cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixStep.DigitsMask">
            <summary>Indicates the digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixStep.Type">
            <summary>
            Indicates the type of the current technique step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueMatrixType1Step">
            <summary>
            Provides with a step that is a <b>Unique Matrix Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="Candidate">Indicates the true candidate.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueMatrixType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Matrix Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="Candidate">Indicates the true candidate.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType1Step.Candidate">
            <summary>Indicates the true candidate.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType1Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType1Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueMatrixType2Step">
            <summary>
            Provides with a step that is a <b>Unique Square Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueMatrixType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Square Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType2Step.ExtraDigit">
            <summary>Indicates the extra digit used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType2Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType2Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType2Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueMatrixType3Step">
            <summary>
            Provides with a step that is a <b>Unique Square Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">
            Indicates the extra digits that forms a subset with <paramref name="DigitsMask"/>.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueMatrixType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16,System.Int16,Sudoku.Concepts.CellMap@)">
            <summary>
            Provides with a step that is a <b>Unique Square Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">
            Indicates the extra digits that forms a subset with <paramref name="DigitsMask"/>.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType3Step.ExtraDigitsMask">
            <summary>
            Indicates the extra digits that forms a subset with <paramref name="DigitsMask"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType3Step.ExtraCells">
            <summary>Indicates the extra cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType3Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType3Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType3Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueMatrixType4Step">
            <summary>
            Provides with a step that is a <b>Unique Square Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="Digit1">Indicates the digit 1 used.</param>
            <param name="Digit2">Indicates the digit 2 used.</param>
            <param name="ConjugateHouse">Indicates the cells used as the conjugate house.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueMatrixType4Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16,System.Int32,System.Int32,Sudoku.Concepts.CellMap@)">
            <summary>
            Provides with a step that is a <b>Unique Square Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="Digit1">Indicates the digit 1 used.</param>
            <param name="Digit2">Indicates the digit 2 used.</param>
            <param name="ConjugateHouse">Indicates the cells used as the conjugate house.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType4Step.Digit1">
            <summary>Indicates the digit 1 used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType4Step.Digit2">
            <summary>Indicates the digit 2 used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType4Step.ConjugateHouse">
            <summary>Indicates the cells used as the conjugate house.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType4Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueMatrixType4Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniquenessClueCoverStep">
            <summary>
            Provides with a step that is a <b>Unique Clue Cover</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniquenessClueCoverStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@)">
            <summary>
            Provides with a step that is a <b>Unique Clue Cover</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverStep.ExtraCells">
            <summary>Indicates the extra cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverStep.Type">
            <summary>
            Indicates the type.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniquenessClueCoverType2Step">
            <summary>
            Provides with a step that is a <b>Unique Clue Cover Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1">Indicates the first digit.</param>
            <param name="Digit2">Indicates the second digit.</param>
            <param name="Cell1">Indicates the first cell used.</param>
            <param name="Cell2">Indicates the second cell used.</param>
            <param name="ChuteIndex">Indicates the global chute index.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniquenessClueCoverType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Clue Cover Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1">Indicates the first digit.</param>
            <param name="Digit2">Indicates the second digit.</param>
            <param name="Cell1">Indicates the first cell used.</param>
            <param name="Cell2">Indicates the second cell used.</param>
            <param name="ChuteIndex">Indicates the global chute index.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverType2Step.Digit1">
            <summary>Indicates the first digit.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverType2Step.Digit2">
            <summary>Indicates the second digit.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverType2Step.Cell1">
            <summary>Indicates the first cell used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverType2Step.Cell2">
            <summary>Indicates the second cell used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverType2Step.ChuteIndex">
            <summary>Indicates the global chute index.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverType2Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverType2Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquenessClueCoverType2Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniquePolygonStep">
            <summary>
            Provides with a step that is a <b>Unique Polygon</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map">The map that contains the cells used for this technique.</param>
            <param name="DigitsMask">The mask that contains all digits used.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniquePolygonStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Unique Polygon</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map">The map that contains the cells used for this technique.</param>
            <param name="DigitsMask">The mask that contains all digits used.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonStep.Map">
            <summary>The map that contains the cells used for this technique.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonStep.DigitsMask">
            <summary>The mask that contains all digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonStep.Type">
            <summary>
            Indicates the type of the technique.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniquePolygonType1Step">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniquePolygonType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType1Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType1Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniquePolygonType2Step">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniquePolygonType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraDigit">The extra digit.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType2Step.ExtraDigit">
            <summary>The extra digit.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType2Step.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType2Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType2Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniquePolygonType3Step">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used for forming the subset.</param>
            <param name="ExtraDigitsMask">Indicates the extra digits used for forming the subset.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniquePolygonType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16,Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used for forming the subset.</param>
            <param name="ExtraDigitsMask">Indicates the extra digits used for forming the subset.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType3Step.ExtraCells">
            <summary>Indicates the extra cells used for forming the subset.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType3Step.ExtraDigitsMask">
            <summary>Indicates the extra digits used for forming the subset.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType3Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType3Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType3Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniquePolygonType4Step">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ConjugateHouse">Indicates the cells that forms the conjugate house.</param>
            <param name="ExtraMask">Indicates the extra digits mask.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniquePolygonType4Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Concepts.CellMap@,System.Int16,Sudoku.Concepts.CellMap@,System.Int16)">
            <summary>
            Provides with a step that is a <b>Unique Polygon Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Map"><inheritdoc/></param>
            <param name="DigitsMask"><inheritdoc/></param>
            <param name="ConjugateHouse">Indicates the cells that forms the conjugate house.</param>
            <param name="ExtraMask">Indicates the extra digits mask.</param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType4Step.ConjugateHouse">
            <summary>Indicates the cells that forms the conjugate house.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType4Step.ExtraMask">
            <summary>Indicates the extra digits mask.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType4Step.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType4Step.Type">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniquePolygonType4Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueRectangle2DOr3XStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle 2D (or 3X)</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="XDigit">Indicates the digit X.</param>
            <param name="YDigit">Indicates the digit Y.</param>
            <param name="XyCell">Indicates the cell XY.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangle2DOr3XStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Techniques.Technique,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle 2D (or 3X)</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="XDigit">Indicates the digit X.</param>
            <param name="YDigit">Indicates the digit Y.</param>
            <param name="XyCell">Indicates the cell XY.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangle2DOr3XStep.XDigit">
            <summary>Indicates the digit X.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangle2DOr3XStep.YDigit">
            <summary>Indicates the digit Y.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangle2DOr3XStep.XyCell">
            <summary>Indicates the cell XY.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangle2DOr3XStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangle2DOr3XStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangle2DOr3XStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangle2DOr3XStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangle2DOr3XStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalAlmostLockedSetsXzStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle External Almost Locked Sets XZ Rule</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="GuardianCells">Indicates the cells that the guardians lie in.</param>
            <param name="AlmostLockedSet">The almost locked sets used.</param>
            <param name="IsIncomplete">Indicates whether the rectangle is incomplete.</param>
            <param name="IsAvoidable">Indicates whether the structure is based on avoidable rectangle.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalAlmostLockedSetsXzStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,Sudoku.Solving.Logical.Patterns.AlmostLockedSet,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle External Almost Locked Sets XZ Rule</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="GuardianCells">Indicates the cells that the guardians lie in.</param>
            <param name="AlmostLockedSet">The almost locked sets used.</param>
            <param name="IsIncomplete">Indicates whether the rectangle is incomplete.</param>
            <param name="IsAvoidable">Indicates whether the structure is based on avoidable rectangle.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalAlmostLockedSetsXzStep.GuardianCells">
            <summary>Indicates the cells that the guardians lie in.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalAlmostLockedSetsXzStep.AlmostLockedSet">
            <summary>The almost locked sets used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalAlmostLockedSetsXzStep.IsIncomplete">
            <summary>Indicates whether the rectangle is incomplete.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalAlmostLockedSetsXzStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalAlmostLockedSetsXzStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalAlmostLockedSetsXzStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalAlmostLockedSetsXzStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalAlmostLockedSetsXzStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalTurbotFishStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle External Turbot Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="GuardianCells">Indicates the cells that the guardians lie in.</param>
            <param name="CellPair">Indicates the cell pair.</param>
            <param name="TurbotFishDigit">Indicates the digit that the turbot fish used.</param>
            <param name="BaseHouse">Indicates the base house used.</param>
            <param name="TargetHouse">Indicates the target house used.</param>
            <param name="IsIncomplete">Indicates whether the rectangle is incomplete.</param>
            <param name="IsAvoidable">Indicates whether the structure is based on avoidable rectangle.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalTurbotFishStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle External Turbot Fish</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="GuardianCells">Indicates the cells that the guardians lie in.</param>
            <param name="CellPair">Indicates the cell pair.</param>
            <param name="TurbotFishDigit">Indicates the digit that the turbot fish used.</param>
            <param name="BaseHouse">Indicates the base house used.</param>
            <param name="TargetHouse">Indicates the target house used.</param>
            <param name="IsIncomplete">Indicates whether the rectangle is incomplete.</param>
            <param name="IsAvoidable">Indicates whether the structure is based on avoidable rectangle.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalTurbotFishStep.GuardianCells">
            <summary>Indicates the cells that the guardians lie in.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalTurbotFishStep.CellPair">
            <summary>Indicates the cell pair.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalTurbotFishStep.TurbotFishDigit">
            <summary>Indicates the digit that the turbot fish used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalTurbotFishStep.BaseHouse">
            <summary>Indicates the base house used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalTurbotFishStep.TargetHouse">
            <summary>Indicates the target house used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalTurbotFishStep.IsIncomplete">
            <summary>Indicates whether the rectangle is incomplete.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalTurbotFishStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalTurbotFishStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalTurbotFishStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalTurbotFishStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalTurbotFishStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalTurbotFishStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType1Or2Step">
            <summary>
            Provides with a step that is a <b>Unique Rectangle External Type 1/2</b>
            or <b>Avoidable Rectangle External Type 1/2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="GuardianCells">Indicates the cells that the guardians lie in.</param>
            <param name="GuardianDigit">Indicates the digit that the guardians are used.</param>
            <param name="IsIncomplete">Indicates whether the rectangle is incomplete.</param>
            <param name="IsAvoidable">Indicates whether the structure is based on avoidable rectangle.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType1Or2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle External Type 1/2</b>
            or <b>Avoidable Rectangle External Type 1/2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="GuardianCells">Indicates the cells that the guardians lie in.</param>
            <param name="GuardianDigit">Indicates the digit that the guardians are used.</param>
            <param name="IsIncomplete">Indicates whether the rectangle is incomplete.</param>
            <param name="IsAvoidable">Indicates whether the structure is based on avoidable rectangle.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType1Or2Step.GuardianCells">
            <summary>Indicates the cells that the guardians lie in.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType1Or2Step.GuardianDigit">
            <summary>Indicates the digit that the guardians are used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType1Or2Step.IsIncomplete">
            <summary>Indicates whether the rectangle is incomplete.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType1Or2Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType1Or2Step.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType1Or2Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType1Or2Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType1Or2Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType3Step">
            <summary>
            Provides with a step that is a <b>Unique Rectangle External Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="GuardianCells">Indicates the cells that the guardians lie in.</param>
            <param name="SubsetCells">The extra cells that forms the subset.</param>
            <param name="SubsetDigitsMask">Indicates the digits that the subset are used.</param>
            <param name="IsIncomplete">Indicates whether the rectangle is incomplete.</param>
            <param name="IsAvoidable">Indicates whether the structure is based on avoidable rectangle.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int16,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle External Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="GuardianCells">Indicates the cells that the guardians lie in.</param>
            <param name="SubsetCells">The extra cells that forms the subset.</param>
            <param name="SubsetDigitsMask">Indicates the digits that the subset are used.</param>
            <param name="IsIncomplete">Indicates whether the rectangle is incomplete.</param>
            <param name="IsAvoidable">Indicates whether the structure is based on avoidable rectangle.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType3Step.GuardianCells">
            <summary>Indicates the cells that the guardians lie in.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType3Step.SubsetCells">
            <summary>The extra cells that forms the subset.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType3Step.SubsetDigitsMask">
            <summary>Indicates the digits that the subset are used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType3Step.IsIncomplete">
            <summary>Indicates whether the rectangle is incomplete.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType3Step.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType3Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType3Step.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType3Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType3Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType3Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType4Step">
            <summary>
            Provides with a step that is a <b>Unique Rectangle External Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="GuardianCells">Indicates the cells that the guardians lie in.</param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
            <param name="IsIncomplete">Indicates whether the rectangle is incomplete.</param>
            <param name="IsAvoidable">Indicates whether the structure is based on avoidable rectangle.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType4Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.Conjugate,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle External Type 4</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="GuardianCells">Indicates the cells that the guardians lie in.</param>
            <param name="ConjugatePair">Indicates the conjugate pair used.</param>
            <param name="IsIncomplete">Indicates whether the rectangle is incomplete.</param>
            <param name="IsAvoidable">Indicates whether the structure is based on avoidable rectangle.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType4Step.GuardianCells">
            <summary>Indicates the cells that the guardians lie in.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType4Step.ConjugatePair">
            <summary>Indicates the conjugate pair used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType4Step.IsIncomplete">
            <summary>Indicates whether the rectangle is incomplete.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType4Step.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType4Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType4Step.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType4Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType4Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalType4Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalXyWingStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle External XY-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="GuardianCells">Indicates the cells that the guardians lie in.</param>
            <param name="CellPair">Indicates the cell pair.</param>
            <param name="IsIncomplete">Indicates whether the rectangle is incomplete.</param>
            <param name="IsAvoidable">Indicates whether the structure is based on avoidable rectangle.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalXyWingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle External XY-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="GuardianCells">Indicates the cells that the guardians lie in.</param>
            <param name="CellPair">Indicates the cell pair.</param>
            <param name="IsIncomplete">Indicates whether the rectangle is incomplete.</param>
            <param name="IsAvoidable">Indicates whether the structure is based on avoidable rectangle.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalXyWingStep.GuardianCells">
            <summary>Indicates the cells that the guardians lie in.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalXyWingStep.CellPair">
            <summary>Indicates the cell pair.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalXyWingStep.IsIncomplete">
            <summary>Indicates whether the rectangle is incomplete.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalXyWingStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalXyWingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalXyWingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalXyWingStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleExternalXyWingStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueRectangleStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2">
            <para>Indicates the technique code.</para>
            <para><i>
            Limited by the C# language, here we creates a new property <see cref="P:Sudoku.Solving.Logical.Steps.UniqueRectangleStep.TechniqueCode2"/>
            to pass the value and assign it to the property <see cref="P:Sudoku.Solving.Logical.Steps.Step.TechniqueCode"/>. If write code
            to place the property <see cref="P:Sudoku.Solving.Logical.Steps.Step.TechniqueCode"/> into the primary constructor as a parameter,
            the default member named <c>TechniqueCode</c> may be duplicate with this parameter's,
            which isn't allowed in <see langword="record"/> types in the language design.
            </i></para>
            </param>
            <param name="Digit1">Indicates the first digit used in this unique rectangle pattern.</param>
            <param name="Digit2">Indicates the second digit used in this unique rectangle pattern.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="IsAvoidable">
            <para>Indicates whether the current unique rectangle is avoidable rectangle.</para>
            <para>
            For the designation and the implementation, <b>Avoidable Rectangle</b> and <b>Unique Rectangle</b>
            are used as the same type.
            </para>
            </param>
            <param name="AbsoluteOffset">
            <para>Indicates the absolute offset.</para>
            <para>
            The value will be an <see cref="T:System.Int32"/> value to compare all possible cases
            of unique rectangle structures to be iterated. The greater the value is,
            the later the unique rectangle structure will be processed. The value must be between 0 and 485.
            Other values are invalid and useless. The number of all possible unique rectangle structures is 486.
            </para>
            </param>
            <seealso cref="P:Sudoku.Solving.Logical.Steps.Step.TechniqueCode"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangleStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Techniques.Technique,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Boolean,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2">
            <para>Indicates the technique code.</para>
            <para><i>
            Limited by the C# language, here we creates a new property <see cref="P:Sudoku.Solving.Logical.Steps.UniqueRectangleStep.TechniqueCode2"/>
            to pass the value and assign it to the property <see cref="P:Sudoku.Solving.Logical.Steps.Step.TechniqueCode"/>. If write code
            to place the property <see cref="P:Sudoku.Solving.Logical.Steps.Step.TechniqueCode"/> into the primary constructor as a parameter,
            the default member named <c>TechniqueCode</c> may be duplicate with this parameter's,
            which isn't allowed in <see langword="record"/> types in the language design.
            </i></para>
            </param>
            <param name="Digit1">Indicates the first digit used in this unique rectangle pattern.</param>
            <param name="Digit2">Indicates the second digit used in this unique rectangle pattern.</param>
            <param name="Cells">Indicates the cells used.</param>
            <param name="IsAvoidable">
            <para>Indicates whether the current unique rectangle is avoidable rectangle.</para>
            <para>
            For the designation and the implementation, <b>Avoidable Rectangle</b> and <b>Unique Rectangle</b>
            are used as the same type.
            </para>
            </param>
            <param name="AbsoluteOffset">
            <para>Indicates the absolute offset.</para>
            <para>
            The value will be an <see cref="T:System.Int32"/> value to compare all possible cases
            of unique rectangle structures to be iterated. The greater the value is,
            the later the unique rectangle structure will be processed. The value must be between 0 and 485.
            Other values are invalid and useless. The number of all possible unique rectangle structures is 486.
            </para>
            </param>
            <seealso cref="P:Sudoku.Solving.Logical.Steps.Step.TechniqueCode"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleStep.TechniqueCode2">
            <summary>
            <para>Indicates the technique code.</para>
            <para><i>
            Limited by the C# language, here we creates a new property <see cref="P:Sudoku.Solving.Logical.Steps.UniqueRectangleStep.TechniqueCode2"/>
            to pass the value and assign it to the property <see cref="P:Sudoku.Solving.Logical.Steps.Step.TechniqueCode"/>. If write code
            to place the property <see cref="P:Sudoku.Solving.Logical.Steps.Step.TechniqueCode"/> into the primary constructor as a parameter,
            the default member named <c>TechniqueCode</c> may be duplicate with this parameter's,
            which isn't allowed in <see langword="record"/> types in the language design.
            </i></para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleStep.Digit1">
            <summary>Indicates the first digit used in this unique rectangle pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleStep.Digit2">
            <summary>Indicates the second digit used in this unique rectangle pattern.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleStep.Cells">
            <summary>Indicates the cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleStep.IsAvoidable">
            <summary>
            <para>Indicates whether the current unique rectangle is avoidable rectangle.</para>
            <para>
            For the designation and the implementation, <b>Avoidable Rectangle</b> and <b>Unique Rectangle</b>
            are used as the same type.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleStep.AbsoluteOffset">
            <summary>
            <para>Indicates the absolute offset.</para>
            <para>
            The value will be an <see cref="T:System.Int32"/> value to compare all possible cases
            of unique rectangle structures to be iterated. The greater the value is,
            the later the unique rectangle structure will be processed. The value must be between 0 and 485.
            Other values are invalid and useless. The number of all possible unique rectangle structures is 486.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangleStep.Equals(Sudoku.Solving.Logical.Steps.UniqueRectangleStep,Sudoku.Solving.Logical.Steps.UniqueRectangleStep)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueRectangleType1Step">
            <summary>
            Provides with a step that is a <b>Unique Rectangle Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangleType1Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Boolean,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle Type 1</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType1Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType1Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType1Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueRectangleType2Step">
            <summary>
            Provides with a step that is a <b>Unique Rectangle Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangleType2Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Solving.Logical.Techniques.Technique,Sudoku.Concepts.CellMap@,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle Type 2</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType2Step.ExtraDigit">
            <summary>Indicates the extra digit used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType2Step.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType2Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType2Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType2Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueRectangleType3Step">
            <summary>
            Provides with a step that is a <b>Unique Rectangle Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains all extra digits used.</param>
            <param name="House">Indicates the house used.</param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
            <param name="IsNaked">
            <para>
            Indicates whether the current instance uses a naked subset instead of a hidden subset to form the type 3.
            </para>
            <para>
            In the default case, due to not having implemented the hidden subset cases,
            the argument always keeps the value <see langword="true"/>. The possible values are:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The type 3 is with a naked subset.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>The type 3 is with a hidden subset.</description>
            </item>
            </list>
            </para>
            </param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangleType3Step.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int16,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle Type 3</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="ExtraCells">Indicates the extra cells used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains all extra digits used.</param>
            <param name="House">Indicates the house used.</param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
            <param name="IsNaked">
            <para>
            Indicates whether the current instance uses a naked subset instead of a hidden subset to form the type 3.
            </para>
            <para>
            In the default case, due to not having implemented the hidden subset cases,
            the argument always keeps the value <see langword="true"/>. The possible values are:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The type 3 is with a naked subset.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>The type 3 is with a hidden subset.</description>
            </item>
            </list>
            </para>
            </param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType3Step.ExtraCells">
            <summary>Indicates the extra cells used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType3Step.ExtraDigitsMask">
            <summary>Indicates the mask that contains all extra digits used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType3Step.House">
            <summary>Indicates the house used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType3Step.IsNaked">
            <summary>
            <para>
            Indicates whether the current instance uses a naked subset instead of a hidden subset to form the type 3.
            </para>
            <para>
            In the default case, due to not having implemented the hidden subset cases,
            the argument always keeps the value <see langword="true"/>. The possible values are:
            <list type="table">
            <item>
            <term><see langword="true"/></term>
            <description>The type 3 is with a naked subset.</description>
            </item>
            <item>
            <term><see langword="false"/></term>
            <description>The type 3 is with a hidden subset.</description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType3Step.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType3Step.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType3Step.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleType3Step.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueRectangleWithBabaGroupingStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Unknown Covering</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="TargetCell">Indicates the target cell.</param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangleWithBabaGroupingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Unknown Covering</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="TargetCell">Indicates the target cell.</param>
            <param name="ExtraDigit">Indicates the extra digit used.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithBabaGroupingStep.TargetCell">
            <summary>Indicates the target cell.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithBabaGroupingStep.ExtraDigit">
            <summary>Indicates the extra digit used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithBabaGroupingStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithBabaGroupingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithBabaGroupingStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithBabaGroupingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithBabaGroupingStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueRectangleWithConjugatePairStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Conjugate Pair(s)</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="ConjugatePairs">Indicates the conjugate pairs used.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangleWithConjugatePairStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Techniques.Technique,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Boolean,Sudoku.Concepts.Conjugate[],System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Conjugate Pair(s)</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="ConjugatePairs">Indicates the conjugate pairs used.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithConjugatePairStep.ConjugatePairs">
            <summary>Indicates the conjugate pairs used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithConjugatePairStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithConjugatePairStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithConjugatePairStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithConjugatePairStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithConjugatePairStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithConjugatePairStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithConjugatePairStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Sue de Coq</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="Block">Indicates the block that the Sue de Coq structure used.</param>
            <param name="Line">Indicates the line that the Sue de Coq structure used.</param>
            <param name="BlockMask">
            Indicates the mask that contains all digits from the block of the Sue de Coq structure.
            </param>
            <param name="LineMask">
            Indicates the mask that contains all digits from the line of the Sue de Coq structure.
            </param>
            <param name="IntersectionMask">
            Indicates the mask that contains all digits from the intersection
            of houses <see cref="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.Block"/> and <see cref="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.Line"/>
            </param>
            <param name="IsCannibalistic">Indicates whether the Sue de Coq structure is a cannibalism.</param>
            <param name="IsolatedDigitsMask">Indicates the mask that contains all isolated digits.</param>
            <param name="BlockCells">Indicates the cells in the block of the Sue de Coq structure.</param>
            <param name="LineCells">Indicates the cells in the line of the Sue de Coq structure.</param>
            <param name="IntersectionCells">
            Indicates the cells in the intersection from houses <see cref="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.Block"/> and <see cref="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.Line"/>.
            </param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Boolean,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16,System.Boolean,System.Int16,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Sue de Coq</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="Block">Indicates the block that the Sue de Coq structure used.</param>
            <param name="Line">Indicates the line that the Sue de Coq structure used.</param>
            <param name="BlockMask">
            Indicates the mask that contains all digits from the block of the Sue de Coq structure.
            </param>
            <param name="LineMask">
            Indicates the mask that contains all digits from the line of the Sue de Coq structure.
            </param>
            <param name="IntersectionMask">
            Indicates the mask that contains all digits from the intersection
            of houses <see cref="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.Block"/> and <see cref="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.Line"/>
            </param>
            <param name="IsCannibalistic">Indicates whether the Sue de Coq structure is a cannibalism.</param>
            <param name="IsolatedDigitsMask">Indicates the mask that contains all isolated digits.</param>
            <param name="BlockCells">Indicates the cells in the block of the Sue de Coq structure.</param>
            <param name="LineCells">Indicates the cells in the line of the Sue de Coq structure.</param>
            <param name="IntersectionCells">
            Indicates the cells in the intersection from houses <see cref="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.Block"/> and <see cref="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.Line"/>.
            </param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.Block">
            <summary>Indicates the block that the Sue de Coq structure used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.Line">
            <summary>Indicates the line that the Sue de Coq structure used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.BlockMask">
            <summary>
            Indicates the mask that contains all digits from the block of the Sue de Coq structure.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.LineMask">
            <summary>
            Indicates the mask that contains all digits from the line of the Sue de Coq structure.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.IntersectionMask">
            <summary>
            Indicates the mask that contains all digits from the intersection
            of houses <see cref="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.Block"/> and <see cref="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.Line"/>
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.IsCannibalistic">
            <summary>Indicates whether the Sue de Coq structure is a cannibalism.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.IsolatedDigitsMask">
            <summary>Indicates the mask that contains all isolated digits.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.BlockCells">
            <summary>Indicates the cells in the block of the Sue de Coq structure.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.LineCells">
            <summary>Indicates the cells in the line of the Sue de Coq structure.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.IntersectionCells">
            <summary>
            Indicates the cells in the intersection from houses <see cref="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.Block"/> and <see cref="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.Line"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithSueDeCoqStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.UniqueRectangleWithWingStep">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="Branches">Indicates the branches used.</param>
            <param name="Petals">Indicates the petals used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains all extra digits.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.UniqueRectangleWithWingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},Sudoku.Solving.Logical.Techniques.Technique,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,System.Boolean,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@,System.Int16,System.Int32)">
            <summary>
            Provides with a step that is a <b>Unique Rectangle with Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="TechniqueCode2"><inheritdoc/></param>
            <param name="Digit1"><inheritdoc/></param>
            <param name="Digit2"><inheritdoc/></param>
            <param name="Cells"><inheritdoc/></param>
            <param name="IsAvoidable"><inheritdoc/></param>
            <param name="Branches">Indicates the branches used.</param>
            <param name="Petals">Indicates the petals used.</param>
            <param name="ExtraDigitsMask">Indicates the mask that contains all extra digits.</param>
            <param name="AbsoluteOffset"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithWingStep.Branches">
            <summary>Indicates the branches used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithWingStep.Petals">
            <summary>Indicates the petals used.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithWingStep.ExtraDigitsMask">
            <summary>Indicates the mask that contains all extra digits.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithWingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithWingStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithWingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithWingStep.ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.UniqueRectangleWithWingStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.WingStep">
            <summary>
            Provides with a step that is a <b>Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.WingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View})">
            <summary>
            Provides with a step that is a <b>Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.WingStep.Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.WingStep.Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.WingStep.TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.WingStep.TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.WWingStep">
            <summary>
            Provides with a step that is a <b>W-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="StartCell">Indicates the start cell.</param>
            <param name="EndCell">Indicates the end cell.</param>
            <param name="ConjugatePair">
            Indicates the conjugate pair connecting with cells <see cref="P:Sudoku.Solving.Logical.Steps.WWingStep.StartCell"/> and <see cref="P:Sudoku.Solving.Logical.Steps.WWingStep.EndCell"/>.
            </param>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.WWingStep.#ctor(System.Collections.Immutable.ImmutableArray{Sudoku.Solving.Conclusion},System.Collections.Immutable.ImmutableArray{Sudoku.Presentation.View},System.Int32,System.Int32,Sudoku.Concepts.Conjugate@)">
            <summary>
            Provides with a step that is a <b>W-Wing</b> technique.
            </summary>
            <param name="Conclusions"><inheritdoc/></param>
            <param name="Views"><inheritdoc/></param>
            <param name="StartCell">Indicates the start cell.</param>
            <param name="EndCell">Indicates the end cell.</param>
            <param name="ConjugatePair">
            Indicates the conjugate pair connecting with cells <see cref="P:Sudoku.Solving.Logical.Steps.WWingStep.StartCell"/> and <see cref="P:Sudoku.Solving.Logical.Steps.WWingStep.EndCell"/>.
            </param>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.WWingStep.StartCell">
            <summary>Indicates the start cell.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.WWingStep.EndCell">
            <summary>Indicates the end cell.</summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.WWingStep.ConjugatePair">
            <summary>
            Indicates the conjugate pair connecting with cells <see cref="P:Sudoku.Solving.Logical.Steps.WWingStep.StartCell"/> and <see cref="P:Sudoku.Solving.Logical.Steps.WWingStep.EndCell"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.WWingStep.BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.WWingStep.TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.WWingStep.DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.WWingStep.Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.WWingStep.FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.Steps.InvalidStep">
            <summary>
            The background type that has implemented the type <see cref="T:Sudoku.Solving.Logical.Steps.IInvalidStep"/>.
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.Steps.IInvalidStep"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Solving#Logical#IStep#Name">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Solving#Logical#IStep#ConclusionText">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Solving#Logical#IStep#Format">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Solving#Logical#IStep#BaseDifficulty">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Solving#Logical#IStep#TechniqueCode">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Solving#Logical#IStep#TechniqueTags">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Solving#Logical#IStep#TechniqueGroup">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Solving#Logical#IStep#DifficultyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Solving#Logical#IStep#Rarity">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Solving#Logical#IStep#ExtraDifficultyCases">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Presentation#IVisual#Conclusions">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Presentation#IVisual#Views">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Solving#Logical#IStep#FormatInterpolatedParts">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Solving#Logical#IStep#ApplyTo(Sudoku.Concepts.Grid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Solving#Logical#IStep#HasTag(Sudoku.Solving.Logical.Techniques.TechniqueTags)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Solving#Logical#IStep#ToSimpleString">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Solving.Logical.Steps.InvalidStep.Sudoku#Solving#Logical#IStep#ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Solving.Logical.IStep">
            <summary>
            Provides a basic logical solving step.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStep.Name">
            <summary>
            Indicates the technique name. The technique name are all stored in the resource dictionary,
            you can find them in the <c>Resources</c> folder (Type <see cref="T:Sudoku.Resources.MergedResources"/>).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStep.Format">
            <summary>
            Gets the format of the current instance.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> result. If the resource dictionary doesn't contain
            any valid formats here, the result value will be <see langword="null"/>.
            </returns>
            <remarks>
            <para>
            A <b>format</b> is the better way to format the result text of this technique information instance.
            It'll be represented by the normal characters and the placeholders, e.g.
            <code><![CDATA["Cells {0}, with digits {1}"]]></code>
            </para>
            <para>
            Here the placeholder <c>{0}</c>, and <c>{1}</c> must be provided by property <see cref="P:Sudoku.Solving.Logical.IStep.FormatInterpolatedParts"/>.
            You should create 2 values that can be replaced with the placeholder <c>{0}</c> and <c>{1}</c>.
            </para>
            <para>
            The recommended implementation pattern is:
            <code><![CDATA[
            private string CellsStr => Cells.ToString();
            private string DigitsStr => Digits.ToString(separator: R.EmitPunctuation(Punctuation.Comma));
            ]]></code>
            </para>
            <para>
            And then fill the blank via property <see cref="P:Sudoku.Solving.Logical.IStep.FormatInterpolatedParts"/>:
            <code><![CDATA[
            public override IDictionary<string, string[]?> FormatInterpolatedParts
                => [["en-US": [CellsStr, DigitsStr]], ["zh-CN": [CellsStr, DigitsStr]]];
            ]]></code>
            via the feature provided by C# 12: Collection Literals. If you cannot decide the real name of the culture name,
            just use suffix instead like <c>"en"</c> and <c>"zh"</c>, ignoring cases.
            </para>
            <para>
            If you want to use the values in the resource dictionary, you can just use a <see langword="static readonly"/> field
            called <see cref="F:Sudoku.Resources.MergedResources.R"/>, for example:
            <code><![CDATA[
            using static Sudoku.Resources.MergedResources;
            
            public override string Format => R["TheKeyYouWantToSearch"];
            ]]></code>
            </para>
            </remarks>
            <seealso cref="P:Sudoku.Solving.Logical.IStep.FormatInterpolatedParts"/>
            <seealso cref="F:Sudoku.Resources.MergedResources.R"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStep.BaseDifficulty">
            <summary>
            Indicates the difficulty of this technique step.
            </summary>
            <remarks>
            Generally this property holds the default and basic difficulty of the step.
            If the step's difficulty rating requires multiple factors, this property will provide with a basic difficulty value
            as elementary and default rating value; other factors will be given in the other property <see cref="P:Sudoku.Solving.Logical.IStep.ExtraDifficultyCases"/>.
            </remarks>
            <seealso cref="P:Sudoku.Solving.Logical.IStep.ExtraDifficultyCases"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStep.Difficulty">
            <summary>
            Indicates the total difficulty of the technique step. This value is the total sum of merged result from two properties
            <see cref="P:Sudoku.Solving.Logical.IStep.BaseDifficulty"/> and <see cref="P:Sudoku.Solving.Logical.IStep.ExtraDifficultyCases"/>. For property <see cref="P:Sudoku.Solving.Logical.IStep.ExtraDifficultyCases"/>,
            the result is to sum all values up of inner property <see cref="P:Sudoku.Rating.ExtraDifficultyCase.Value"/>.
            </summary>
            <seealso cref="P:Sudoku.Solving.Logical.IStep.BaseDifficulty"/>
            <seealso cref="P:Sudoku.Solving.Logical.IStep.ExtraDifficultyCases"/>
            <seealso cref="T:Sudoku.Rating.ExtraDifficultyCase"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStep.TechniqueCode">
            <summary>
            The technique code of this instance used for comparison
            (e.g. search for specified puzzle that contains this technique).
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStep.TechniqueTags">
            <summary>
            The technique tags of this instance.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStep.TechniqueGroup">
            <summary>
            The technique group that this technique instance belongs to.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStep.DifficultyLevel">
            <summary>
            The difficulty level of this step.
            </summary>
            <remarks>
            Although the type of this property is marked <see cref="T:System.FlagsAttribute"/>,
            we still can't set multiple flag values into the result. The flags are filtered
            during generating puzzles.
            </remarks>
            <seealso cref="T:System.FlagsAttribute"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStep.Rarity">
            <summary>
            Indicates the rarity of this technique appears.
            </summary>
            <remarks>
            Although the type of this property is marked <see cref="T:System.FlagsAttribute"/>,
            we still can't set multiple flag values into the result. The flags are filtered
            during generating puzzles.
            </remarks>
            <seealso cref="T:System.FlagsAttribute"/>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStep.ExtraDifficultyCases">
            <summary>
            Indicates the extra difficulty cases of the technique step. If the step does not contain such cases,
            this property will keep <see langword="null"/> value.
            </summary>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStep.FormatInterpolatedParts">
            <summary>
            Indicates the interpolated parts that is used for the format.
            The formats will be interpolated into the property <see cref="P:Sudoku.Solving.Logical.IStep.Format"/> result.
            </summary>
            <remarks>
            <para>
            This property use a dictionary to merge globalizational format data.
            The key type is <see cref="T:System.String"/>, which can be used for the comparison of the current culture via type <see cref="T:System.Globalization.CultureInfo"/>,
            for example, <c>"zh"</c> and <c>"en-US"</c>.
            </para>
            <para>
            For more backing implementation details, please visit method <see cref="M:Sudoku.Solving.Logical.IStep.ToString"/> in derived <see langword="class"/>es.
            </para>
            </remarks>
            <seealso cref="P:Sudoku.Solving.Logical.IStep.Format"/>
            <seealso cref="T:System.Globalization.CultureInfo"/>
            <seealso cref="M:Sudoku.Solving.Logical.IStep.ToString"/>
        </member>
        <member name="M:Sudoku.Solving.Logical.IStep.ApplyTo(Sudoku.Concepts.Grid@)">
            <summary>
            Put this instance into the specified grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Sudoku.Solving.Logical.IStep.HasTag(Sudoku.Solving.Logical.Techniques.TechniqueTags)">
            <summary>
            Determine whether the current step information instance with the specified flags.
            </summary>
            <param name="flags">
            The flags. If the argument contains more than one set bit, all flags will be checked one by one.
            </param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.IStep.ToSimpleString">
            <summary>
            Returns a string that only contains the name and the conclusions.
            </summary>
            <returns>The string instance.</returns>
        </member>
        <member name="M:Sudoku.Solving.Logical.IStep.ToString">
            <summary>
            Returns a string that only contains the name and the basic description.
            </summary>
            <returns>The string instance.</returns>
            <remarks>
            <para><i>
            This method uses modifiers <see langword="sealed"/> and <see langword="override"/> to prevent with compiler overriding this method.
            </i></para>
            <para><b><i>
            In addition, <c>ToString</c> is a special method that has already been declared in type <see cref="T:System.Object"/>
            as <see langword="virtual"/> one, so this interface member lacks of binding behavior on implementing,
            which means even if you don't implement a parameterless method called <c>ToString</c> that returns <see cref="T:System.String"/>,
            the code will also be compiled successfully if nullability analysis is disabled.
            This member declared here is only used as a role of XML documentation comment provider.
            </i></b></para>
            </remarks>
        </member>
        <member name="P:Sudoku.Solving.Logical.IStep.ConclusionText">
            <summary>
            Indicates the string representation of the conclusions of the step.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Techniques.Technique">
            <summary>
            Represents a technique instance, which is used for comparison.
            </summary>
            <remarks><b><i>
            Please note that some fields declared in this type may not be used by neither direct reference nor reflection,
            but they are reserved ones. In the future I'll implement the searching logic on those fields (maybe?)
            </i></b></remarks>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.None">
            <summary>
            The placeholder of this enumeration type.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FullHouse">
            <summary>
            Indicates full house.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.LastDigit">
            <summary>
            Indicates last digit.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.HiddenSingleBlock">
            <summary>
            Indicates hidden single (in block).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.HiddenSingleRow">
            <summary>
            Indicates hidden single (in row).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.HiddenSingleColumn">
            <summary>
            Indicates hidden single (in column).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.NakedSingle">
            <summary>
            Indicates naked single.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.Pointing">
            <summary>
            Indicates pointing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.Claiming">
            <summary>
            Indicates claiming.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AlmostLockedPair">
            <summary>
            Indicates almost locked pair.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AlmostLockedTriple">
            <summary>
            Indicates almost locked triple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AlmostLockedQuadruple">
            <summary>
            Indicates almost locked quadruple.
            The technique may not be useful because it'll be replaced with Sue de Coq.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FireworkPairType1">
            <summary>
            Indicates firework pair type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FireworkPairType2">
            <summary>
            Indicates firework pair type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FireworkPairType3">
            <summary>
            Indicates firework pair type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FireworkTriple">
            <summary>
            Indicates firework triple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FireworkQuadruple">
            <summary>
            Indicates firework quadruple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.NakedPair">
            <summary>
            Indicates naked pair.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.NakedPairPlus">
            <summary>
            Indicates naked pair plus (naked pair (+)).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.LockedPair">
            <summary>
            Indicates locked pair.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.HiddenPair">
            <summary>
            Indicates hidden pair.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.NakedTriple">
            <summary>
            Indicates naked triple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.NakedTriplePlus">
            <summary>
            Indicates naked triple plus (naked triple (+)).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.LockedTriple">
            <summary>
            Indicates locked triple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.HiddenTriple">
            <summary>
            Indicates hidden triple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.NakedQuadruple">
            <summary>
            Indicates naked quadruple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.NakedQuadruplePlus">
            <summary>
            Indicates naked quadruple plus (naked quadruple (+)).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.HiddenQuadruple">
            <summary>
            Indicates hidden quadruple.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.XWing">
            <summary>
            Indicates X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedXWing">
            <summary>
            Indicates finned X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiXWing">
            <summary>
            Indicates sashimi X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedXWing">
            <summary>
            Indicates siamese finned X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiXWing">
            <summary>
            Indicates siamese sashimi X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FrankenXWing">
            <summary>
            Indicates franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedFrankenXWing">
            <summary>
            Indicates finned franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiFrankenXWing">
            <summary>
            Indicates sashimi franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedFrankenXWing">
            <summary>
            Indicates siamese finned franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiFrankenXWing">
            <summary>
            Indicates siamese sashimi franken X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.MutantXWing">
            <summary>
            Indicates mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedMutantXWing">
            <summary>
            Indicates finned mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiMutantXWing">
            <summary>
            Indicates sashimi mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedMutantXWing">
            <summary>
            Indicates siamese finned mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiMutantXWing">
            <summary>
            Indicates siamese sashimi mutant X-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.Swordfish">
            <summary>
            Indicates swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedSwordfish">
            <summary>
            Indicates finned swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiSwordfish">
            <summary>
            Indicates sashimi swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedSwordfish">
            <summary>
            Indicates siamese finned swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiSwordfish">
            <summary>
            Indicates siamese sashimi swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FrankenSwordfish">
            <summary>
            Indicates swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedFrankenSwordfish">
            <summary>
            Indicates finned franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiFrankenSwordfish">
            <summary>
            Indicates sashimi franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedFrankenSwordfish">
            <summary>
            Indicates siamese finned franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiFrankenSwordfish">
            <summary>
            Indicates siamese sashimi franken swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.MutantSwordfish">
            <summary>
            Indicates mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedMutantSwordfish">
            <summary>
            Indicates finned mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiMutantSwordfish">
            <summary>
            Indicates sashimi mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedMutantSwordfish">
            <summary>
            Indicates siamese finned mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiMutantSwordfish">
            <summary>
            Indicates siamese sashimi mutant swordfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.Jellyfish">
            <summary>
            Indicates jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedJellyfish">
            <summary>
            Indicates finned jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiJellyfish">
            <summary>
            Indicates sashimi jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedJellyfish">
            <summary>
            Indicates siamese finned jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiJellyfish">
            <summary>
            Indicates siamese sashimi jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FrankenJellyfish">
            <summary>
            Indicates franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedFrankenJellyfish">
            <summary>
            Indicates finned franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiFrankenJellyfish">
            <summary>
            Indicates sashimi franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedFrankenJellyfish">
            <summary>
            Indicates siamese finned franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiFrankenJellyfish">
            <summary>
            Indicates siamese sashimi franken jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.MutantJellyfish">
            <summary>
            Indicates mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedMutantJellyfish">
            <summary>
            Indicates finned mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiMutantJellyfish">
            <summary>
            Indicates sashimi mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedMutantJellyfish">
            <summary>
            Indicates siamese finned mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiMutantJellyfish">
            <summary>
            Indicates siamese sashimi mutant jellyfish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.Squirmbag">
            <summary>
            Indicates squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedSquirmbag">
            <summary>
            Indicates finned squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiSquirmbag">
            <summary>
            Indicates sashimi squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedSquirmbag">
            <summary>
            Indicates siamese finned squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiSquirmbag">
            <summary>
            Indicates siamese sashimi squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FrankenSquirmbag">
            <summary>
            Indicates franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedFrankenSquirmbag">
            <summary>
            Indicates finned franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiFrankenSquirmbag">
            <summary>
            Indicates sashimi franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedFrankenSquirmbag">
            <summary>
            Indicates siamese finned franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiFrankenSquirmbag">
            <summary>
            Indicates siamese sashimi franken squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.MutantSquirmbag">
            <summary>
            Indicates mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedMutantSquirmbag">
            <summary>
            Indicates finned mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiMutantSquirmbag">
            <summary>
            Indicates sashimi mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedMutantSquirmbag">
            <summary>
            Indicates siamese finned mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiMutantSquirmbag">
            <summary>
            Indicates siamese sashimi mutant squirmbag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.Whale">
            <summary>
            Indicates whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedWhale">
            <summary>
            Indicates finned whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiWhale">
            <summary>
            Indicates sashimi whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedWhale">
            <summary>
            Indicates siamese finned whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiWhale">
            <summary>
            Indicates siamese sashimi whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FrankenWhale">
            <summary>
            Indicates franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedFrankenWhale">
            <summary>
            Indicates finned franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiFrankenWhale">
            <summary>
            Indicates sashimi franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedFrankenWhale">
            <summary>
            Indicates siamese finned franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiFrankenWhale">
            <summary>
            Indicates siamese sashimi franken whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.MutantWhale">
            <summary>
            Indicates mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedMutantWhale">
            <summary>
            Indicates finned mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiMutantWhale">
            <summary>
            Indicates sashimi mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedMutantWhale">
            <summary>
            Indicates siamese finned mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiMutantWhale">
            <summary>
            Indicates siamese sashimi mutant whale.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.Leviathan">
            <summary>
            Indicates leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedLeviathan">
            <summary>
            Indicates finned leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiLeviathan">
            <summary>
            Indicates sashimi leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedLeviathan">
            <summary>
            Indicates siamese finned leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiLeviathan">
            <summary>
            Indicates siamese sashimi leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FrankenLeviathan">
            <summary>
            Indicates franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedFrankenLeviathan">
            <summary>
            Indicates finned franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiFrankenLeviathan">
            <summary>
            Indicates sashimi franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedFrankenLeviathan">
            <summary>
            Indicates siamese finned franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiFrankenLeviathan">
            <summary>
            Indicates siamese sashimi franken leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.MutantLeviathan">
            <summary>
            Indicates mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FinnedMutantLeviathan">
            <summary>
            Indicates finned mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SashimiMutantLeviathan">
            <summary>
            Indicates sashimi mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseFinnedMutantLeviathan">
            <summary>
            Indicates siamese finned mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSashimiMutantLeviathan">
            <summary>
            Indicates siamese sashimi mutant leviathan.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.XyWing">
            <summary>
            Indicates XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.XyzWing">
            <summary>
            Indicates XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.WxyzWing">
            <summary>
            Indicates WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.VwxyzWing">
            <summary>
            Indicates VWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UvwxyzWing">
            <summary>
            Indicates UVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.TuvwxyzWing">
            <summary>
            Indicates TUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.StuvwxyzWing">
            <summary>
            Indicates STUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.RstuvwxyzWing">
            <summary>
            Indicates RSTUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.IncompleteWxyzWing">
            <summary>
            Indicates incomplete WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.IncompleteVwxyzWing">
            <summary>
            Indicates incomplete VWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.IncompleteUvwxyzWing">
            <summary>
            Indicates incomplete UVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.IncompleteTuvwxyzWing">
            <summary>
            Indicates incomplete TUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.IncompleteStuvwxyzWing">
            <summary>
            Indicates incomplete STUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.IncompleteRstuvwxyzWing">
            <summary>
            Indicates incomplete RSTUVWXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.WWing">
            <summary>
            Indicates W-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.MultiBranchWWing">
            <summary>
            Indicates Multi-Branch W-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.MWing">
            <summary>
            Indicates M-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.LocalWing">
            <summary>
            Indicates local wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SplitWing">
            <summary>
            Indicates split wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.HybridWing">
            <summary>
            Indicates hybrid wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedXyWing">
            <summary>
            Indicates grouped XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedWWing">
            <summary>
            Indicates grouped W-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedMWing">
            <summary>
            Indicates grouped M-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedLocalWing">
            <summary>
            Indicates grouped local wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedSplitWing">
            <summary>
            Indicates grouped split wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedHybridWing">
            <summary>
            Indicates grouped hybrid wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleType1">
            <summary>
            Indicates unique rectangle type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleType2">
            <summary>
            Indicates unique rectangle type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleType3">
            <summary>
            Indicates unique rectangle type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleType4">
            <summary>
            Indicates unique rectangle type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleType5">
            <summary>
            Indicates unique rectangle type 5.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleType6">
            <summary>
            Indicates unique rectangle type 6.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.HiddenUniqueRectangle">
            <summary>
            Indicates hidden unique rectangle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle2D">
            <summary>
            Indicates unique rectangle + 2D.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle2B1">
            <summary>
            Indicates unique rectangle + 2B / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle2D1">
            <summary>
            Indicates unique rectangle + 2D / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle3X">
            <summary>
            Indicates unique rectangle + 3X.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle3X1L">
            <summary>
            Indicates unique rectangle + 3x / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle3X1U">
            <summary>
            Indicates unique rectangle + 3X / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle3X2">
            <summary>
            Indicates unique rectangle + 3X / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle3N2">
            <summary>
            Indicates unique rectangle + 3N / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle3U2">
            <summary>
            Indicates unique rectangle + 3U / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle3E2">
            <summary>
            Indicates unique rectangle + 3E / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle4X1L">
            <summary>
            Indicates unique rectangle + 4x / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle4X1U">
            <summary>
            Indicates unique rectangle + 4X / 1SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle4X2L">
            <summary>
            Indicates unique rectangle + 4x / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle4X2U">
            <summary>
            Indicates unique rectangle + 4X / 2SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle4X3">
            <summary>
            Indicates unique rectangle + 4X / 3SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangle4C3">
            <summary>
            Indicates unique rectangle + 4C / 3SL.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleXyWing">
            <summary>
            Indicates unique rectangle-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleXyzWing">
            <summary>
            Indicates unique rectangle-XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleWxyzWing">
            <summary>
            Indicates unique rectangle-WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleSueDeCoq">
            <summary>
            Indicates unique rectangle sue de coq.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleBabaGrouping">
            <summary>
            Indicates unique rectangle baba grouping.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleExternalType1">
            <summary>
            Indicates unique rectangle external type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleExternalType2">
            <summary>
            Indicates unique rectangle external type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleExternalType3">
            <summary>
            Indicates unique rectangle external type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleExternalType4">
            <summary>
            Indicates unique rectangle external type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleExternalSkyscraper">
            <summary>
            Indicates unique rectangle external skyscraper.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleExternalTwoStringKite">
            <summary>
            Indicates unique rectangle external two-string kite.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleExternalTurbotFish">
            <summary>
            Indicates unique rectangle external turbot fish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleExternalXyWing">
            <summary>
            Indicates unique rectangle external XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueRectangleExternalAlmostLockedSetsXz">
            <summary>
            Indicates unique rectangle external almost locked sets XZ rule.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleType1">
            <summary>
            Indicates avoidable rectangle type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleType2">
            <summary>
            Indicates avoidable rectangle type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleType3">
            <summary>
            Indicates avoidable rectangle type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleType5">
            <summary>
            Indicates avoidable rectangle type 5.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.HiddenAvoidableRectangle">
            <summary>
            Indicates hidden avoidable rectangle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangle2D">
            <summary>
            Indicates avoidable rectangle + 2D.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangle3X">
            <summary>
            Indicates avoidable rectangle + 3X.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleXyWing">
            <summary>
            Indicates avoidable rectangle XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleXyzWing">
            <summary>
            Indicates avoidable rectangle XYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleWxyzWing">
            <summary>
            Indicates avoidable rectangle WXYZ-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleSueDeCoq">
            <summary>
            Indicates avoidable rectangle sue de coq.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleBrokenWing">
            <summary>
            Indicates avoidable rectangle guardian.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleHiddenSingleBlock">
            <summary>
            Indicates avoidable rectangle hidden single in block.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleHiddenSingleRow">
            <summary>
            Indicates avoidable rectangle hidden single in row.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleHiddenSingleColumn">
            <summary>
            Indicates avoidable rectangle hidden single in column.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleExternalType1">
            <summary>
            Indicates avoidable rectangle external type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleExternalType2">
            <summary>
            Indicates avoidable rectangle external type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleExternalType3">
            <summary>
            Indicates avoidable rectangle external type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleExternalType4">
            <summary>
            Indicates avoidable rectangle external type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleExternalSkyscraper">
            <summary>
            Indicates avoidable rectangle external skyscraper.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleExternalTwoStringKite">
            <summary>
            Indicates avoidable rectangle external two-string kite.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleExternalTurbotFish">
            <summary>
            Indicates avoidable rectangle external turbot fish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleExternalXyWing">
            <summary>
            Indicates avoidable rectangle external XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AvoidableRectangleExternalAlmostLockedSetsXz">
            <summary>
            Indicates avoidable rectangle external almost locked sets XZ rule.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueLoopType1">
            <summary>
            Indicates unique loop type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueLoopType2">
            <summary>
            Indicates unique loop type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueLoopType3">
            <summary>
            Indicates unique loop type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueLoopType4">
            <summary>
            Indicates unique loop type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ExtendedRectangleType1">
            <summary>
            Indicates extended rectangle type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ExtendedRectangleType2">
            <summary>
            Indicates extended rectangle type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ExtendedRectangleType3">
            <summary>
            Indicates extended rectangle type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ExtendedRectangleType4">
            <summary>
            Indicates extended rectangle type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.BivalueUniversalGraveType1">
            <summary>
            Indicates bi-value universal grave type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.BivalueUniversalGraveType2">
            <summary>
            Indicates bi-value universal grave type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.BivalueUniversalGraveType3">
            <summary>
            Indicates bi-value universal grave type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.BivalueUniversalGraveType4">
            <summary>
            Indicates bi-value universal grave type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.BivalueUniversalGravePlusN">
            <summary>
            Indicates bi-value universal grave + n.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.BivalueUniversalGraveFalseCandidateType">
            <summary>
            Indicates bi-value universal grave false candidate type.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.BivalueUniversalGravePlusNForcingChains">
            <summary>
            Indicates bi-value universal grave + n with forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.BivalueUniversalGraveXzRule">
            <summary>
            Indicates bi-value universal grave XZ rule.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.BivalueUniversalGraveXyWing">
            <summary>
            Indicates bi-value universal grave XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ReverseUniqueRectangleType1">
            <summary>
            Indicates reverse unique rectangle type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ReverseUniqueRectangleType2">
            <summary>
            Indicates reverse unique rectangle type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ReverseUniqueRectangleType3">
            <summary>
            Indicates reverse unique rectangle type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ReverseUniqueRectangleType4">
            <summary>
            Indicates reverse unique rectangle type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ReverseUniqueLoopType1">
            <summary>
            Indicates reverse unique loop type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ReverseUniqueLoopType2">
            <summary>
            Indicates reverse unique loop type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ReverseUniqueLoopType3">
            <summary>
            Indicates reverse unique loop type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ReverseUniqueLoopType4">
            <summary>
            Indicates reverse unique loop type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniquenessClueCoverType2">
            <summary>
            Indicates uniqueness clue cover type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.RwDeadlyPattern">
            <summary>
            Indicates RW's deadly pattern.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniquePolygonType1">
            <summary>
            Indicates unique polygon type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniquePolygonType2">
            <summary>
            Indicates unique polygon type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniquePolygonType3">
            <summary>
            Indicates unique polygon type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniquePolygonType4">
            <summary>
            Indicates unique polygon type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.QiuDeadlyPatternType1">
            <summary>
            Indicates Qiu's deadly pattern type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.QiuDeadlyPatternType2">
            <summary>
            Indicates Qiu's deadly pattern type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.QiuDeadlyPatternType3">
            <summary>
            Indicates Qiu's deadly pattern type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.QiuDeadlyPatternType4">
            <summary>
            Indicates Qiu's deadly pattern type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.LockedQiuDeadlyPattern">
            <summary>
            Indicates locked Qiu's deadly pattern.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueMatrixType1">
            <summary>
            Indicates unique matrix type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueMatrixType2">
            <summary>
            Indicates unique matrix type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueMatrixType3">
            <summary>
            Indicates unique matrix type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.UniqueMatrixType4">
            <summary>
            Indicates unique matrix type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SueDeCoq">
            <summary>
            Indicates sue de coq.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SueDeCoqIsolated">
            <summary>
            Indicates sue de coq with isolated digit.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SueDeCoq3Dimension">
            <summary>
            Indicates 3-dimensional sue de coq.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SueDeCoqCannibalism">
            <summary>
            Indicates sue de coq cannibalism.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.Skyscraper">
            <summary>
            Indicates skyscraper.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.TwoStringKite">
            <summary>
            Indicates two-string kite.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.TurbotFish">
            <summary>
            Indicates turbot fish.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.EmptyRectangle">
            <summary>
            Indicates empty rectangle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.BrokenWing">
            <summary>
            Indicates broken wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.BivalueOddagonType1">
            <summary>
            Indicates bi-value oddagon type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.BivalueOddagonType2">
            <summary>
            Indicates bi-value oddagon type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.BivalueOddagonType3">
            <summary>
            Indicates bi-value oddagon type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedBivalueOddagon">
            <summary>
            Indicates grouped bi-value oddagon.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ChromaticPatternType1">
            <summary>
            Indicates chromatic pattern (tri-value oddagon) type 1.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ChromaticPatternType2">
            <summary>
            Indicates chromatic pattern (tri-value oddagon) type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ChromaticPatternType3">
            <summary>
            Indicates chromatic pattern (tri-value oddagon) type 3.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ChromaticPatternType4">
            <summary>
            Indicates chromatic pattern (tri-value oddagon) type 4.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ChromaticPatternXzRule">
            <summary>
            Indicates chromatic pattern (tri-value oddagon) XZ rule.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.XChain">
            <summary>
            Indicates X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.YChain">
            <summary>
            Indicates Y-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.FishyCycle">
            <summary>
            Indicates fishy cycle (X-Cycle).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.XyChain">
            <summary>
            Indicates XY-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.XyCycle">
            <summary>
            Indicates XY-Cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.XyXChain">
            <summary>
            Indicates XY-X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.RemotePair">
            <summary>
            Indicates remote pair.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.PurpleCow">
            <summary>
            Indicates purple cow.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.DiscontinuousNiceLoop">
            <summary>
            Indicates discontinuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ContinuousNiceLoop">
            <summary>
            Indicates continuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AlternatingInferenceChain">
            <summary>
            Indicates alternating inference chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedXChain">
            <summary>
            Indicates grouped X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedFishyCycle">
            <summary>
            Indicates grouped fishy cycle (grouped X-Cycle).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedXyChain">
            <summary>
            Indicates grouped XY-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedXyCycle">
            <summary>
            Indicates grouped XY-Cycle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedXyXChain">
            <summary>
            Indicates grouped XY-X-Chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedPurpleCow">
            <summary>
            Indicates grouped purple cow.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedDiscontinuousNiceLoop">
            <summary>
            Indicates grouped discontinuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedContinuousNiceLoop">
            <summary>
            Indicates grouped continuous nice loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GroupedAlternatingInferenceChain">
            <summary>
            Indicates grouped alternating inference chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.NodeCollision">
            <summary>
            Indicates special case that a grouped alternating inference chain has a collision
            between start and end node.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.NishioForcingChains">
            <summary>
            Indicates nishio forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.RegionForcingChains">
            <summary>
            Indicates region forcing chains (i.e. house forcing chains).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.CellForcingChains">
            <summary>
            Indicates cell forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.DynamicRegionForcingChains">
            <summary>
            Indicates dynamic region forcing chains (i.e. dynamic house forcing chains).
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.DynamicCellForcingChains">
            <summary>
            Indicates dynamic cell forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.DynamicContradictionForcingChains">
            <summary>
            Indicates dynamic contradiction forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.DynamicDoubleForcingChains">
            <summary>
            Indicates dynamic double forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.DynamicForcingChains">
            <summary>
            Indicates dynamic forcing chains.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.EmptyRectangleIntersectionPair">
            <summary>
            Indicates empty rectangle intersection pair.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ExtendedSubsetPrinciple">
            <summary>
            Indicates extended subset principle.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SinglyLinkedAlmostLockedSetsXzRule">
            <summary>
            Indicates singly linked ALS-XZ.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.DoublyLinkedAlmostLockedSetsXzRule">
            <summary>
            Indicates doubly linked ALS-XZ.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AlmostLockedSetsXyWing">
            <summary>
            Indicates ALS-XY-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AlmostLockedSetsWWing">
            <summary>
            Indicates ALS-W-Wing.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AlmostLockedSetsChain">
            <summary>
            Indicates ALS chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.AlmostHiddenSetsChain">
            <summary>
            Indicates AHS chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.DeathBlossomCellType">
            <summary>
            Indicates death blossom cell type.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.DeathBlossomHouseType">
            <summary>
            Indicates death blossom house type.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.GurthSymmetricalPlacement">
            <summary>
            Indicates Gurth's symmetrical placement.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ExtendedGurthSymmetricalPlacement">
            <summary>
            Indicates extended Gurth's symmetrical placement.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.JuniorExocet">
            <summary>
            Indicates junior exocet.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SeniorExocet">
            <summary>
            Indicates senior exocet.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.ComplexSeniorExocet">
            <summary>
            Indicates complex senior exocet.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseJuniorExocet">
            <summary>
            Indicates siamese junior exocet.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.SiameseSeniorExocet">
            <summary>
            Indicates siamese senior exocet.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.DominoLoop">
            <summary>
            Indicates domino loop.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.MultisectorLockedSets">
            <summary>
            Indicates multi-sector locked sets.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.PatternOverlay">
            <summary>
            Indicates pattern overlay method.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.TemplateSet">
            <summary>
            Indicates template set.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.TemplateDelete">
            <summary>
            Indicates template delete.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.BowmanBingo">
            <summary>
            Indicates bowman's bingo.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.Technique.BruteForce">
            <summary>
            Indicates brute force.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Techniques.TechniqueGroup">
            <summary>
            Indicates a technique group.
            </summary>
            <remarks>
            Different with <see cref="T:Sudoku.Solving.Logical.Techniques.TechniqueTags"/>, this enumeration type contains
            the real technique group that the technique belongs to. In addition, the value
            of this type may effect the displaying of the analysis result.
            </remarks>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.None">
            <summary>
            Indicates the technique doesn't belong to any group.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.Single">
            <summary>
            Indicates the singles technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.LockedCandidates">
            <summary>
            Indicates the locked candidates (LC) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.Subset">
            <summary>
            Indicates the subset technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.NormalFish">
            <summary>
            Indicates the normal fish technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.ComplexFish">
            <summary>
            Indicates the complex fish technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.Wing">
            <summary>
            Indicates the wing technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.EmptyRectangle">
            <summary>
            Indicates the empty rectangle technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.SingleDigitPattern">
            <summary>
            Indicates the single digit pattern (SDP) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.EmptyRectangleIntersectionPair">
            <summary>
            Indicates the empty rectangle intersection pair (ERIP) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.AlmostLockedCandidates">
            <summary>
            Indicates the almost locked candidates (ALC) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.Firework">
            <summary>
            Indicates the firework technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.AlternatingInferenceChain">
            <summary>
            Indicates the alternating inference chain (AIC) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.ForcingChains">
            <summary>
            Indicates the forcing chains (FC) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.UniqueRectangle">
            <summary>
            Indicates the unique rectangle (UR) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.UniqueRectanglePlus">
            <summary>
            Indicates the unique rectangle plus (UR+) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.UniqueLoop">
            <summary>
            Indicates the unique loop (UL) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.ExtendedRectangle">
            <summary>
            Indicates the extended rectangle (XR) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.BivalueUniversalGrave">
            <summary>
            Indicates the bi-value universal grave (BUG) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.ReverseBivalueUniversalGrave">
            <summary>
            Indicates the reverse bi-value universal grave (Reverse BUG) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.UniquenessClueCover">
            <summary>
            Indicates the uniqueness clue cover.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.DeadlyPattern">
            <summary>
            Indicates the deadly pattern technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.BivalueOddagon">
            <summary>
            Indicates the bi-value oddagon technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.TrivalueOddagon">
            <summary>
            Indicates the tri-value oddagon technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.SueDeCoq">
            <summary>
            Indicates the sue de coq (SdC) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.BrokenWing">
            <summary>
            Indicates the broken wing technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.AlmostLockedSetsChainingLike">
            <summary>
            Indicates the ALS chaining-like (ALS-XZ, ALS-XY-Wing, ALS-W-Wing) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.DominoLoop">
            <summary>
            Indicates the SK-Loop technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.MultisectorLockedSets">
            <summary>
            Indicates the multi-sector locked sets (MSLS) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.Exocet">
            <summary>
            Indicates the exocet technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.Symmetry">
            <summary>
            Indicates the symmetry technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.RankTheory">
            <summary>
            Indicates the technique checked and searched relies on the rank theory.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.BowmanBingo">
            <summary>
            Indicates the bowman bingo technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.PatternOverlay">
            <summary>
            Indicates the pattern overlay method (POM) technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.Templating">
            <summary>
            Indicates the templating technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueGroup.BruteForce">
            <summary>
            Indicates the brute force (BF) technique.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Techniques.TechniqueTags">
            <summary>
            Provides a series of tags to mark on a technique.
            </summary>
            <remarks>
            For example, a <see cref="F:Sudoku.Solving.Logical.Techniques.Technique.DeathBlossomCellType"/> can be categorized
            as both <see cref="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.Als"/> and <see cref="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.LongChaining"/>.
            </remarks>
            <seealso cref="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.Als"/>
            <seealso cref="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.LongChaining"/>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.None">
            <summary>
            Indicates none of flags that the technique belongs to.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.Singles">
            <summary>
            Indicates the singles technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.Intersections">
            <summary>
            Indicates the intersection technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.Subsets">
            <summary>
            Indicates the subset technique. Please note that all ALS techniques shouldn't be with this flag.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.Fishes">
            <summary>
            Indicates the fish technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.Wings">
            <summary>
            Indicates the wing technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.SingleDigitPattern">
            <summary>
            Indicates the single digit pattern technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.ShortChaining">
            <summary>
            Indicates the short chain.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.LongChaining">
            <summary>
            Indicates the long chain, which includes normal AICs, forcing chains
            and other chaining-like techniques, such as Bowman's Bingo.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.ForcingChains">
            <summary>
            Indicates the forcing chains technique, such as Bowman's Bingo, Region Forcing Chains and so on.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.DeadlyPattern">
            <summary>
            Indicates the deadly pattern technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.Als">
            <summary>
            Indicates the ALS technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.Msls">
            <summary>
            Indicates the MSLS technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.Exocet">
            <summary>
            Indicates the exocet technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.RankTheory">
            <summary>
            Indicates the technique checked and searched relies on the rank theory.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.Symmetry">
            <summary>
            Indicates the symmetry technique.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.Techniques.TechniqueTags.LastResort">
            <summary>
            Indicates the last resort technique.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.WellKnownStepSearcherCollections">
            <summary>
            Represents a list of <see cref="T:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection"/>s.
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection"/>
        </member>
        <member name="F:Sudoku.Solving.Logical.WellKnownStepSearcherCollections.SimpleSudokuTechniqueSet">
            <summary>
            Indicates a <see cref="T:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection"/> instance that only contains SSTS step searchers.
            </summary>
        </member>
        <member name="F:Sudoku.Solving.Logical.WellKnownStepSearcherCollections.AdvancedTechniqueSet">
            <summary>
            Indicates a <see cref="T:Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection"/> instance that contains advanced techniques.
            </summary>
        </member>
        <member name="T:Sudoku.Solving.Logical.Extensions">
            <target name="class" when="extension">
				<summary>
					Provides with file-local extension methods.
				</summary>
			</target>
        </member>
        <member name="M:Sudoku.Solving.Logical.Extensions.GetOfType``1(Sudoku.Solving.Logical.StepSearchers.StepSearcherCollection)">
            <summary>
            Try to fetch a valid <typeparamref name="T"/> instance via the specified pool.
            </summary>
            <typeparam name="T">The type of the step searcher you want to fetch.</typeparam>
            <param name="this">The pool where all possible step searchers are stored.</param>
            <returns>
            The found step searcher instance.
            If the type is marked <see cref="T:Sudoku.Solving.Logical.Annotations.SeparatedStepSearcherAttribute"/>,
            the method will return the first found instance.
            </returns>
            <seealso cref="T:Sudoku.Solving.Logical.Annotations.SeparatedStepSearcherAttribute"/>
        </member>
        <member name="T:Sudoku.Preprocessing.AutoFiller.DefaultAutoFiller">
            <summary>
            Defines a default auto filler instance.
            </summary>
        </member>
        <member name="F:Sudoku.Preprocessing.AutoFiller.DefaultAutoFiller.Solver">
            <summary>
            Indicates the default solver.
            </summary>
        </member>
        <member name="M:Sudoku.Preprocessing.AutoFiller.DefaultAutoFiller.Fill(Sudoku.Concepts.Grid@)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Preprocessing.AutoFiller.IAutoFiller">
            <summary>
            Defines an auto filler instance that can automatically fill some empty cells via the specified rule.
            </summary>
        </member>
        <member name="M:Sudoku.Preprocessing.AutoFiller.IAutoFiller.Fill(Sudoku.Concepts.Grid@)">
            <summary>
            To fill the current grid automatically with some digits input.
            </summary>
            <param name="grid">The target grid.</param>
            <exception cref="T:System.InvalidOperationException">Throws when the argument <paramref name="grid"/> is not unique.</exception>
        </member>
        <member name="T:Sudoku.Preprocessing.Checking.BackdoorSearcher">
            <summary>
            Defines a backdoor searcher.
            </summary>
        </member>
        <member name="F:Sudoku.Preprocessing.Checking.BackdoorSearcher.BitwiseSolver">
            <summary>
            Indicates the bitwise solver.
            </summary>
        </member>
        <member name="M:Sudoku.Preprocessing.Checking.BackdoorSearcher.GetBackdoors(Sudoku.Concepts.Grid@)">
            <summary>
            Try to get all possible backdoors.
            </summary>
            <param name="grid">The grid to be checked.</param>
            <returns>A list of backdoors.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the grid is not unique, or the puzzle is too easy.
            </exception>
        </member>
        <member name="T:Sudoku.Preprocessing.Checking.IttouryuPuzzleChecker">
            <summary>
            Provides with a checker that determines whether the puzzle is an
            <see href="https://sunnieshine.github.io/Sudoku/terms/ittouryu-puzzle">ittouryu puzzle</see>.
            </summary>
        </member>
        <member name="M:Sudoku.Preprocessing.Checking.IttouryuPuzzleChecker.IsIttouryu(Sudoku.Concepts.Grid@,System.ValueTuple{System.Int32,System.Boolean}[]@)">
            <summary>
            Determines whether the puzzle is an ittouryu puzzle, which means we can fill the puzzle digit by digit.
            </summary>
            <param name="grid">The grid to be determined.</param>
            <param name="solvingPath">The solving path.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="T:Sudoku.Preprocessing.Gathering.ConjugateGatherer">
            <summary>
            Represents a type that can gather <see cref="T:Sudoku.Concepts.Conjugate"/> instances that exists in a grid.
            </summary>
        </member>
        <member name="M:Sudoku.Preprocessing.Gathering.ConjugateGatherer.Gather(Sudoku.Concepts.Grid@)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Preprocessing.Gathering.ConjugateGatherer.Gather(System.Int32)">
            <summary>
            Gathers possible conjugate pairs of the specified digit.
            </summary>
            <returns>The conjugate pairs found.</returns>
            <remarks><i>
            This method uses buffers, so you cannot use it everywhere. You should initialize the buffer first,
            by calling the method <see cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/>.
            </i></remarks>
            <seealso cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/>
        </member>
        <member name="M:Sudoku.Preprocessing.Gathering.ConjugateGatherer.Gather">
            <summary>
            Gathers possible conjugate pairs grouped by digit.
            </summary>
            <returns>The conjugate pairs found, grouped by digit.</returns>
            <remarks><i>
            This method uses buffers, so you cannot use it everywhere. You should initialize the buffer first,
            by calling the method <see cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/>.
            </i></remarks>
            <seealso cref="M:Sudoku.Buffers.FastProperties.InitializeMaps(Sudoku.Concepts.Grid@)"/>
        </member>
        <member name="T:Sudoku.Preprocessing.Gathering.IConceptGatherable`1">
            <summary>
            Provides with a gatherer that gathers all possible structures of a concept existing in a grid.
            </summary>
            <typeparam name="TResult">
            The type of the concept. For example, if you want to find all possible <see cref="T:Sudoku.Concepts.Conjugate"/> instances
            in a grid, the type argument will be <see cref="T:Sudoku.Concepts.Conjugate"/>.
            </typeparam>
        </member>
        <member name="M:Sudoku.Preprocessing.Gathering.IConceptGatherable`1.Gather(Sudoku.Concepts.Grid@)">
            <summary>
            Gathers all possible structures from a sudoku grid.
            </summary>
            <param name="grid">The grid used.</param>
            <returns>The results found.</returns>
        </member>
        <member name="T:Sudoku.Rating.ChainDifficultyRating">
            <summary>
            Represents a type that calculates for chain difficulty.
            </summary>
        </member>
        <member name="M:Sudoku.Rating.ChainDifficultyRating.GetExtraDifficultyByLength(System.Int32)">
            <summary>
            Get extra difficulty rating for a chain node sequence.
            </summary>
            <param name="length">The length.</param>
            <returns>The difficulty.</returns>
        </member>
        <member name="T:Sudoku.Rating.ExtraDifficultyCase">
            <summary>
            Represents an extra rating case to be recorded into a technique step.
            </summary>
            <param name="Name">
            Indicates the name of the extra difficulty case. This value is an English word stored in type <see cref="T:Sudoku.Rating.ExtraDifficultyCaseNames"/>,
            you can use constants in that type to assign to this property.
            </param>
            <param name="Value">Indicates the value of the target rating.</param>
            <seealso cref="T:Sudoku.Rating.ExtraDifficultyCaseNames"/>
        </member>
        <member name="M:Sudoku.Rating.ExtraDifficultyCase.#ctor(System.String,System.Decimal)">
            <summary>
            Represents an extra rating case to be recorded into a technique step.
            </summary>
            <param name="Name">
            Indicates the name of the extra difficulty case. This value is an English word stored in type <see cref="T:Sudoku.Rating.ExtraDifficultyCaseNames"/>,
            you can use constants in that type to assign to this property.
            </param>
            <param name="Value">Indicates the value of the target rating.</param>
            <seealso cref="T:Sudoku.Rating.ExtraDifficultyCaseNames"/>
        </member>
        <member name="P:Sudoku.Rating.ExtraDifficultyCase.Name">
            <summary>
            Indicates the name of the extra difficulty case. This value is an English word stored in type <see cref="T:Sudoku.Rating.ExtraDifficultyCaseNames"/>,
            you can use constants in that type to assign to this property.
            </summary>
        </member>
        <member name="P:Sudoku.Rating.ExtraDifficultyCase.Value">
            <summary>Indicates the value of the target rating.</summary>
        </member>
        <member name="T:Sudoku.Rating.ExtraDifficultyCaseNames">
            <summary>
            Represents with kinds of the phased difficulty rating that is used for the calculations the total rating of a step.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.Size">
            <summary>
            Indicates the kind is the size. This field is used for sized techniques,
            such as deadly patterns of type 3, naked or hidden subsets, fishes.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.ExtraDigit">
            <summary>
            Indicates the kind is the extra digit. This field is used for deadly patterns of type 2.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.Sashimi">
            <summary>
            Indicates the kind is the sashimi. This field is only used for fishes.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.FishShape">
            <summary>
            Indicates the kind is the fish shape. This field is only used for complex fishes.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.Hidden">
            <summary>
            Indicates the kind is the hidden. This field is used for some techniques that has hidden views.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.Locked">
            <summary>
            Indicates the kind is the locked. This field is only used for naked subsets.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.LockedDigit">
            <summary>
            Indicates the kind is the locked digit. This field is only used for Locked Qiu's Deadly Pattern.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.Length">
            <summary>
            Indicates the kind is the length. This field is used for variable-length chaining techniques.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.GroupedChains">
            <summary>
            Indicates the kind is the grouped chains. This field is used for grouped AIC and loops.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.ConjugatePair">
            <summary>
            Indicates the kind is the conjugate pair. This field is used for deadly patterns of type 4,
            or advanced Unique Rectangle techniques.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.Guardian">
            <summary>
            Indicates the kind is the guardian. This field is used for some guardian-related techniques,
            such as guardian itself, Unique Rectangle + Guardian (i.e. Unique Rectangle External Types).
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.Petals">
            <summary>
            Indicates the number of petals used in death blossom.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.ValueCell">
            <summary>
            Indicates the kind is the value cell used in the pattern. This field is used for Almost Locked Candidates.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.Incompleteness">
            <summary>
            Indicates the kind is the incompleteness. This field is used for Unique Rectangle incomplete types.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.Avoidable">
            <summary>
            Indicates the kind is the avoidable. This field is used for avoidable rectangles.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.WingSize">
            <summary>
            Indicates the kind is the wing size. This field is used for Unique Rectangle + Wings,
            or Regular Wing technique itself.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.Isolated">
            <summary>
            Indicates the kind is the isolated digits. This field is used for Sue de Coq variant types,
            or Unique Rectangle + Sue de Coq.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.Cannibalism">
            <summary>
            Indicates the kind is the cannibalism. This field is used for Sue de Coq variant types.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.Mirror">
            <summary>
            Indicates the kind is the mirror eliminations. This field is only used for exocets.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.BiBiPattern">
            <summary>
            Indicates the kind is the Bi-Bi pattern eliminations. This field is only used for exocets.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.TargetPair">
            <summary>
            Indicates the kind is the target pair eliminations. This field is only used for exocets.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.GeneralizedSwordfish">
            <summary>
            Indicates the kind is the generalized swordfish eliminations. This field is only used for exocets.
            </summary>
        </member>
        <member name="F:Sudoku.Rating.ExtraDifficultyCaseNames.ExtraHouse">
            <summary>
            Indicates the kind is the extra house. This field is only used for complex senior exocets.
            </summary>
        </member>
        <member name="T:Sudoku.Runtime.AnalysisServices.CommonReadOnlies">
            <summary>
            Represents a type holding some common read-only fields used by runtime or compiling-time.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.UniqueSquareTemplatesCount">
            <summary>
            Indicates the total number of unique square patterns.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.QiuDeadlyPatternTemplatesCount">
            <summary>
            Indicates the total number of Qiu's deadly patterns.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.ExocetTemplatesCount">
            <summary>
            Indicates the total number of exocet patterns.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.FireworkSubsetCount">
            <summary>
            Indicates the total number of firework subset patterns.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.BdpTemplatesSize3Count">
            <summary>
            Indicates the total number of Unique Polygon (Heptagon) possible templates of size 3.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.BdpTemplatesSize4Count">
            <summary>
            Indicates the total number of Unique Polygon (Octagon) possible templates of size 4.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.PairFireworksCount">
            <summary>
            Indicates the total number of pair fireworks.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.MultisectorLockedSetsTemplatesCount">
            <summary>
            Indicates the total number of multi-sector locked sets possible templates.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.UniqueRectanglePatterns">
            <summary>
            The table of all <b>Unique Rectangle</b> cells.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.EmptyRectangleLinkIds">
            <summary>
            Indicates all houses iterating on the specified block forming an empty rectangle.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.ChromaticPatternBlocksCombinations">
            <summary>
            All possible blocks combinations being reserved for chromatic pattern searcher's usages.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.BruteForceTryAndErrorOrder">
            <summary>
            The order of cell offsets to get values.
            </summary>
            <remarks>
            For example, the first value is 40, which means the first cell to be tried to be filled
            is the 40th cell in the grid (i.e. the cell <c>r5c5</c>).
            </remarks>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.IntersectionMaps">
            <summary>
            <para>
            Indicates all maps that forms the each intersection. The pattern will be like:
            <code><![CDATA[
            .-------.-------.-------.
            | C C C | A A A | A A A |
            | B B B | . . . | . . . |
            | B B B | . . . | . . . |
            '-------'-------'-------'
            ]]></code>
            </para>
            <para>
            In addition, in this data structure, a <b>CoverSet</b> is a block and a <b>BaseSet</b> is a line.
            </para>
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.IntersectionBlockTable">
            <summary>
            <para>The table of all blocks to iterate for each blocks.</para>
            <para>
            This field is only used for providing the data for another field <see cref="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.IntersectionMaps"/>.
            </para>
            </summary>
            <seealso cref="F:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.IntersectionMaps"/>
        </member>
        <member name="M:Sudoku.Runtime.AnalysisServices.CommonReadOnlies.#cctor">
            <static-constructor>
		<summary>
			<para>
				Indicates the <see langword="static" /> constructor of the current type.
			</para>
			<para>
				This constructor will initialize some <see langword="static readonly" /> data members
				of this type that can't use a simple expression to describe the initial value.
			</para>
		</summary>
	</static-constructor>
        </member>
        <member name="T:Sudoku.Runtime.AnalysisServices.ValueTupleComparer">
            <summary>
            Represents a comparer instance that compares two tuples.
            </summary>
        </member>
        <member name="M:Sudoku.Runtime.AnalysisServices.ValueTupleComparer.Equals(System.ValueTuple{System.Byte,System.Byte},System.ValueTuple{System.Byte,System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Runtime.AnalysisServices.ValueTupleComparer.GetHashCode(System.ValueTuple{System.Byte,System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Runtime.AnalysisServices.DifficultyLevel">
            <summary>
            Provides a difficulty kind for a puzzle.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.DifficultyLevel.Unknown">
            <summary>
            Indicates the difficulty level is unknown.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.DifficultyLevel.Easy">
            <summary>
            Indicates the difficulty is easy.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.DifficultyLevel.Moderate">
            <summary>
            Indicates the difficulty is moderate.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.DifficultyLevel.Hard">
            <summary>
            Indicates the difficulty is hard.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.DifficultyLevel.Fiendish">
            <summary>
            Indicates the difficulty is fiendish.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.DifficultyLevel.Nightmare">
            <summary>
            Indicates the difficulty is nightmare.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.DifficultyLevel.LastResort">
            <summary>
            Indicates the puzzle can't be solved unless using last resort methods.
            </summary>
        </member>
        <member name="T:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext">
            <summary>
            Defines a context that is used by step searchers to check the details of the solving and analysis information.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.Grid">
            <summary>
            Indicates the puzzle to be solved and analyzed.
            </summary>
            <remarks>
            <target name="field">
				<b>
					<i>
						This field is not encapsulated into a property because C# doesn't support auto read-only properties
						returning <see langword="ref" /> or <see langword="ref readonly" />.
					</i>
				</b>
			</target>
            </remarks>
        </member>
        <member name="M:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.#ctor(System.Collections.Generic.ICollection{Sudoku.Solving.Logical.IStep},Sudoku.Concepts.Grid@,System.Boolean)">
            <summary>
            Initializes a <see cref="T:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext"/> instance via the specified.
            </summary>
            <param name="accumulator">The accumulator.</param>
            <param name="grid">The reference to the puzzle.</param>
            <param name="onlyFindOne">Indicates whether the step searcher only find one possible step and exit.</param>
        </member>
        <member name="P:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.OnlyFindOne">
            <summary>
            Indicates whether the solver only find one possible step and exit the searcher.
            </summary>
        </member>
        <member name="P:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.PreviousSetDigit">
            <summary>
            Indicates the previously set digit. This field is only used for <see cref="T:Sudoku.Solving.Logical.StepSearchers.ISingleStepSearcher"/>.
            </summary>
            <seealso cref="T:Sudoku.Solving.Logical.StepSearchers.ISingleStepSearcher"/>
        </member>
        <member name="P:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.Accumulator">
            <summary>
            <para>
            <para>The accumulator to store each step.</para>
            </para>
            <para>
            If <see cref="P:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.OnlyFindOne"/> is set to <see langword="true"/>,
            this argument will become useless because we only finding one step is okay,
            so we may not use the accumulator to store all possible steps, in order to optimize the performance.
            Therefore, this argument can be <see langword="null"/> in this case.
            </para>
            </summary>
            <seealso cref="P:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.OnlyFindOne"/>
        </member>
        <member name="M:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Runtime.AnalysisServices.LogicalAnalysisContext.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Sudoku.Runtime.AnalysisServices.Rarity">
            <summary>
            Indicates the rarity of the technique.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.Rarity.Unknown">
            <summary>
            Indicates the technique can't be confirmed for its rarity.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.Rarity.Always">
            <summary>
            Indicates the technique always appears, such as <b>Hidden Single</b>.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.Rarity.Often">
            <summary>
            Indicates the rarity is often appears.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.Rarity.Sometimes">
            <summary>
            Indicates the rarity is sometimes appears.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.Rarity.Seldom">
            <summary>
            Indicates the rarity is seldom appears.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.Rarity.HardlyEver">
            <summary>
            Indicates the rarity is hardly ever appears.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.Rarity.OnlyForSpecialPuzzles">
            <summary>
            Indicates the technique only appears in the special puzzles designed on purpose.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.Rarity.ReplacedByOtherTechniques">
            <summary>
            Indicates the technique can't appear because the technique will be replaced with another technique.
            </summary>
        </member>
        <member name="T:Sudoku.Runtime.AnalysisServices.SearcherDisabledReason">
            <summary>
            Indicates a reason why the searcher is disabled.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherDisabledReason.None">
            <summary>
            Indicates the searcher is normal one and isn't disabled.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherDisabledReason.LastResort">
            <summary>
            Indicates the searcher searches for last resorts, which don't need to show.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherDisabledReason.HasBugs">
            <summary>
            Indicates the searcher has bugs while searching.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherDisabledReason.TooSlow">
            <summary>
            Indicates the searcher runs so slowly that the author himself can't stand to use it.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherDisabledReason.DeprecatedOrNotImplemented">
            <summary>
            Indicates the searcher has not been implemented, or has been deprecated.
            </summary>
        </member>
        <member name="T:Sudoku.Runtime.AnalysisServices.SearcherDisplayingLevel">
            <summary>
            Indicates the difficulty level of the step.
            This enumeration type is used for the displaying of the step information list.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherDisplayingLevel.None">
            <summary>
            Indicates the level is none.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherDisplayingLevel.A">
            <summary>
            Indicates the level is the elementary searchers, which means the techniques found
            in the current step searcher is the elementary ones.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherDisplayingLevel.B">
            <summary>
            Indicates the level is the moderate searchers, which means the techniques found
            in the current step searcher is more difficult than the elementary ones,
            but they aren't very difficult to comprehend the backing logic.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherDisplayingLevel.C">
            <summary>
            Indicates the level is the hard searchers, which means the techniques found
            in the current step searcher is more difficult than the moderate ones.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherDisplayingLevel.D">
            <summary>
            Indicates the level is the fiendish searchers, which means the techniques found
            in the current step searcher is more difficult than the hard ones.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherDisplayingLevel.E">
            <summary>
            <para>
            Indicates the level is the hidden searchers, which means the techniques found
            in the current step searcher should be hidden no matter how easy the technique is.
            </para>
            <para>The well-known technique searcher of this level is Brute Force.</para>
            </summary>
        </member>
        <member name="T:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea">
            <summary>
            Represents the data about where a step searcher can be enabled and used.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea.None">
            <summary>
            Indicates all modes are disabled.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea.Default">
            <summary>
            Indicates the default mode (Sudoku Explainer or Hodoku mode).
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea.Gathering">
            <summary>
            Indicates the gathering mode (All steps will be found here).
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea.Experimental">
            <summary>
            Indicates the experimental function can use the step searcher.
            </summary>
        </member>
        <member name="T:Sudoku.Runtime.AnalysisServices.SearcherFailedReason">
            <summary>
            Defines a reason why the puzzle is failed to be solved.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.Nothing">
            <summary>
            Indicates nothing goes wrong.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.PuzzleIsInvalid">
            <summary>
            <para>Indicates the failed reason is that the puzzle doesn't contain a valid unique solution.</para>
            <para>
            Different with <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.PuzzleHasMultipleSolutions"/> and <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.PuzzleHasNoSolution"/>,
            this field will include more generic cases. If the puzzle doesn't pass the pre-process operation
            before solving, we should use this field.
            </para>
            </summary>
            <seealso cref="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.PuzzleHasNoSolution"/>
            <seealso cref="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.PuzzleHasMultipleSolutions"/>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.PuzzleHasNoSolution">
            <summary>
            Indicates the failed reason is that the puzzle doesn't contain a valid solution.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.PuzzleHasMultipleSolutions">
            <summary>
            Indicates the failed reason is that the puzzle contains multiple valid solutions.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.UserCancelled">
            <summary>
            Indicates the failed reason is that the user has canceled the task.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.NotImplemented">
            <summary>
            Indicates the failed reason is that the solver or some searching module isn't implemented.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.ExceptionThrown">
            <summary>
            Indicates the failed reason is that the solver has encountered an error and couldn't solve
            that will cause an exception thrown.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.WrongStep">
            <summary>
            Indicates the failed reason is that the solver has found a wrong step that cause the grid become invalid.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.AnalysisServices.SearcherFailedReason.PuzzleIsTooHard">
            <summary>
            Indicates the failed reason is that the puzzle is too hard to solve. The solver gave up.
            </summary>
            <remarks><i>
            This option becomes deprecated at present because we has already implemented a step searcher
            that always produces a valid step, guaranteeing that the solver will never give up at all time.
            </i></remarks>
        </member>
        <member name="T:Sudoku.Runtime.AnalysisServices.SearcherInitializationOptions">
            <summary>
            Indicates the options for a step searcher used while searching.
            </summary>
            <param name="Priority">Indicates the priority of this technique.</param>
            <param name="EnabledArea">
            Indicates which areas the step searcher is enabled and works well.
            The default value is both <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea.Default"/>
            and <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea.Gathering"/>.
            </param>
            <param name="DisplayingLevel">
            <para>Indicates the displaying level of this technique.</para>
            <para>
            The display level means the which level the technique is at. All higher leveled techniques
            won't display on the screen when the searchers at the current level have found technique
            instances.
            </para>
            <para>
            In order to enhance the performance, this attribute is used on a step gatherer.
            For example, if Alternating Inference Chain (AIC) is at the level <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherDisplayingLevel.D"/>
            but Forcing Chains (FC) is at the level <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherDisplayingLevel.E"/>,
            when we find any AIC technique instances, FC won't be checked at the same time.
            </para>
            <para>
            This attribute is also used for grouping those the searchers, especially in Sudoku Explainer mode.
            </para>
            </param>
            <param name="DisabledReason">
            <para>
            Indicates whether the current searcher has bug to fix, or something else to describe why
            the searcher is (or should be) disabled.
            </para>
            <para>
            The property <b>must</b> contain a value that differs with <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherDisabledReason.None"/>
            when the property <see cref="P:Sudoku.Runtime.AnalysisServices.SearcherInitializationOptions.EnabledArea"/> isn't <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea.Default"/>.
            </para>
            </param>
        </member>
        <member name="M:Sudoku.Runtime.AnalysisServices.SearcherInitializationOptions.#ctor(System.Int32,Sudoku.Runtime.AnalysisServices.SearcherDisplayingLevel,Sudoku.Runtime.AnalysisServices.SearcherEnabledArea,Sudoku.Runtime.AnalysisServices.SearcherDisabledReason)">
            <summary>
            Indicates the options for a step searcher used while searching.
            </summary>
            <param name="Priority">Indicates the priority of this technique.</param>
            <param name="EnabledArea">
            Indicates which areas the step searcher is enabled and works well.
            The default value is both <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea.Default"/>
            and <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea.Gathering"/>.
            </param>
            <param name="DisplayingLevel">
            <para>Indicates the displaying level of this technique.</para>
            <para>
            The display level means the which level the technique is at. All higher leveled techniques
            won't display on the screen when the searchers at the current level have found technique
            instances.
            </para>
            <para>
            In order to enhance the performance, this attribute is used on a step gatherer.
            For example, if Alternating Inference Chain (AIC) is at the level <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherDisplayingLevel.D"/>
            but Forcing Chains (FC) is at the level <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherDisplayingLevel.E"/>,
            when we find any AIC technique instances, FC won't be checked at the same time.
            </para>
            <para>
            This attribute is also used for grouping those the searchers, especially in Sudoku Explainer mode.
            </para>
            </param>
            <param name="DisabledReason">
            <para>
            Indicates whether the current searcher has bug to fix, or something else to describe why
            the searcher is (or should be) disabled.
            </para>
            <para>
            The property <b>must</b> contain a value that differs with <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherDisabledReason.None"/>
            when the property <see cref="P:Sudoku.Runtime.AnalysisServices.SearcherInitializationOptions.EnabledArea"/> isn't <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea.Default"/>.
            </para>
            </param>
        </member>
        <member name="P:Sudoku.Runtime.AnalysisServices.SearcherInitializationOptions.Priority">
            <summary>Indicates the priority of this technique.</summary>
        </member>
        <member name="P:Sudoku.Runtime.AnalysisServices.SearcherInitializationOptions.DisplayingLevel">
            <summary>
            <para>Indicates the displaying level of this technique.</para>
            <para>
            The display level means the which level the technique is at. All higher leveled techniques
            won't display on the screen when the searchers at the current level have found technique
            instances.
            </para>
            <para>
            In order to enhance the performance, this attribute is used on a step gatherer.
            For example, if Alternating Inference Chain (AIC) is at the level <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherDisplayingLevel.D"/>
            but Forcing Chains (FC) is at the level <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherDisplayingLevel.E"/>,
            when we find any AIC technique instances, FC won't be checked at the same time.
            </para>
            <para>
            This attribute is also used for grouping those the searchers, especially in Sudoku Explainer mode.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Runtime.AnalysisServices.SearcherInitializationOptions.EnabledArea">
            <summary>
            Indicates which areas the step searcher is enabled and works well.
            The default value is both <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea.Default"/>
            and <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea.Gathering"/>.
            </summary>
        </member>
        <member name="P:Sudoku.Runtime.AnalysisServices.SearcherInitializationOptions.DisabledReason">
            <summary>
            <para>
            Indicates whether the current searcher has bug to fix, or something else to describe why
            the searcher is (or should be) disabled.
            </para>
            <para>
            The property <b>must</b> contain a value that differs with <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherDisabledReason.None"/>
            when the property <see cref="P:Sudoku.Runtime.AnalysisServices.SearcherInitializationOptions.EnabledArea"/> isn't <see cref="F:Sudoku.Runtime.AnalysisServices.SearcherEnabledArea.Default"/>.
            </para>
            </summary>
        </member>
        <member name="P:Sudoku.Runtime.AnalysisServices.SearcherInitializationOptions.SeparatedStepSearcherPriority">
            <summary>
            Indicates the custom priority value. This property is used for a comparison between two step searchers
            when they hold a same priority value.
            </summary>
        </member>
        <member name="T:Sudoku.Runtime.AnalysisServices.WrongStepException">
            <summary>
            Indicates an error that throws when a solving step is wrong (may be due to wrong algorithm, bug, etc.).
            </summary>
        </member>
        <member name="M:Sudoku.Runtime.AnalysisServices.WrongStepException.#ctor(Sudoku.Concepts.Grid@,Sudoku.Solving.Logical.IStep)">
            <summary>
            Initializes a <see cref="T:Sudoku.Runtime.AnalysisServices.WrongStepException"/> with the specified invalid grid and the wrong step.
            </summary>
            <param name="grid">The invalid sudoku grid.</param>
            <param name="wrongStep">The wrong step.</param>
        </member>
        <member name="P:Sudoku.Runtime.AnalysisServices.WrongStepException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Runtime.AnalysisServices.WrongStepException.CurrentInvalidGrid">
            <summary>
            Indicates the invalid sudoku grid. This property is also stored in the property
            <see cref="P:System.Exception.Data"/>.
            </summary>
            <seealso cref="P:System.Exception.Data"/>
        </member>
        <member name="P:Sudoku.Runtime.AnalysisServices.WrongStepException.WrongStep">
            <summary>
            Indicates the wrong step.
            </summary>
        </member>
        <member name="T:Sudoku.Runtime.DisplayingServices.StepDisplayingFeature">
            <summary>
            Defines one or more step displaying feature, which controls the extra information about target displaying control.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.DisplayingServices.StepDisplayingFeature.None">
            <summary>
            Indicates the feature is none.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.DisplayingServices.StepDisplayingFeature.HideDifficultyRating">
            <summary>
            Indicates the feature is to hide difficulty rating value.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.DisplayingServices.StepDisplayingFeature.VeryRare">
            <summary>
            Indicates the feature is to display "very rare" information.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.DisplayingServices.StepDisplayingFeature.DifficultyRatingNotStable">
            <summary>
            Indicates the difficulty rating is not stable, which means the rating value may be changed
            if the pattern is changed.
            </summary>
        </member>
        <member name="F:Sudoku.Runtime.DisplayingServices.StepDisplayingFeature.ConstructedTechnique">
            <summary>
            Indicates the current technique is constructed technique usage, which means it uses two or more techniques
            to form a single technique usage. For example, UR + XY-Wing.
            </summary>
        </member>
        <member name="T:Sudoku.Runtime.DisplayingServices.StepDisplayingFeatureAttribute">
            <summary>
            Represents an attribute that can modify step displaying features,
            which can control the target displaying UI controls.
            </summary>
        </member>
        <member name="M:Sudoku.Runtime.DisplayingServices.StepDisplayingFeatureAttribute.#ctor(Sudoku.Runtime.DisplayingServices.StepDisplayingFeature)">
            <summary>
            Initializes a <see cref="T:Sudoku.Runtime.DisplayingServices.StepDisplayingFeatureAttribute"/> instance via the specified runtime features.
            </summary>
            <param name="features">
            The runtime features. If you want to apply multiple different kinds of features,
            just use <c><see langword="operator"/> |</c>, such as the expression <c></c>.
            </param>
        </member>
        <member name="P:Sudoku.Runtime.DisplayingServices.StepDisplayingFeatureAttribute.Features">
            <summary>
            Indicates the features that can be used on rendering and displaying runtime UI controls.
            </summary>
        </member>
        <member name="P:Sudoku.Runtime.DisplayingServices.StepDisplayingFeatureAttribute.VerifyMemberName">
            <summary>
            Indicates the extra member to be verified.
            </summary>
        </member>
        <member name="P:Sudoku.Runtime.DisplayingServices.StepDisplayingFeatureAttribute.VerifyMemberValue">
            <summary>
            Indicates the value to the extra member to be verified.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.KeywordPattern_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the KeywordPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.KeywordPattern_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.KeywordPattern_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.KeywordPattern_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.KeywordPattern_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.KeywordPattern_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.KeywordPattern_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.KeywordPattern_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.KeywordPattern_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
    </members>
</doc>
