<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SystemExtensions</name>
    </assembly>
    <members>
        <member name="T:System.Algorithm.Combinatorics">
            <summary>
            Provides operations on Combinatorics.
            </summary>
        </member>
        <member name="M:System.Algorithm.Combinatorics.GetSubsets``1(System.Span{``0},System.Int32)">
            <summary>
            Get all subsets from the specified number of the values to take.
            </summary>
            <param name="this">The array.</param>
            <param name="count">The number of elements you want to take.</param>
            <returns>All subsets.</returns>
        </member>
        <member name="M:System.Algorithm.Combinatorics.GetSubsets``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Get all subsets from the specified number of the values to take.
            </summary>
            <param name="this">The array.</param>
            <param name="count">The number of elements you want to take.</param>
            <returns>All subsets.</returns>
        </member>
        <member name="M:System.Algorithm.Combinatorics.GetSubsets``1(``0[],System.Int32)">
            <summary>
            Get all subsets from the specified number of the values to take.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The array.</param>
            <param name="count">The number of elements you want to take.</param>
            <returns>
            The subsets of the list.
            For example, if the input array is <c>[1, 2, 3]</c> and the argument <paramref name="count"/> is 2, the result will be
            <code>
            [[1, 2], [1, 3], [2, 3]]
            </code>
            3 cases.
            </returns>
        </member>
        <member name="M:System.Algorithm.Combinatorics.GetExtractedCombinations``1(``0[][])">
            <summary>
            Get all combinations that each sub-array only choose one.
            </summary>
            <param name="this">The jigsaw array.</param>
            <returns>
            All combinations that each sub-array choose one.
            For example, if one array is <c>[[1, 2, 3], [1, 3], [1, 4, 7, 10]]</c>, the final combinations will be
            <code>
            [
                [1, 1, 1], [1, 1, 4], [1, 1, 7], [1, 1, 10],
                [1, 3, 1], [1, 3, 4], [1, 3, 7], [1, 3, 10],
                [2, 1, 1], [2, 1, 4], [2, 1, 7], [2, 1, 10],
                [2, 3, 1], [2, 3, 4], [2, 3, 7], [2, 3, 10],
                [3, 1, 1], [3, 1, 4], [3, 1, 7], [3, 1, 10],
                [3, 3, 1], [3, 3, 4], [3, 3, 7], [3, 3, 10]
            ]
            </code>
            24 cases.
            </returns>
        </member>
        <member name="T:System.Algorithm.Sequences">
            <summary>
            Defines some sequences that has been recorded in the
            <see href="https://oeis.org/">On-Line Encyclopedia of Integer Sequences</see>.
            </summary>
            <shared-comments>
            <para>The index of the sequence. The index is 0-based.</para>
            <para>The index of the sequence. The index is 1-based.</para>
            </shared-comments>
        </member>
        <member name="M:System.Algorithm.Sequences.A000217(System.Int32)">
            <summary>
            Gets the value at the specified index in the sequence <see href="https://oeis.org/A000217">A000217</see>
            (0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ..).
            </summary>
            <param name="index"><inheritdoc cref="T:System.Algorithm.Sequences" path="//shared-comments/para[1]"/></param>
            <returns>The result value at the specified index.</returns>
        </member>
        <member name="M:System.Algorithm.Sequences.A002024(System.Int32)">
            <summary>
            Gets the value at the specified index in the sequence <see href="https://oeis.org/A002024">A002024</see>
            (1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, ..).
            </summary>
            <param name="index"><inheritdoc cref="T:System.Algorithm.Sequences" path="//shared-comments/para[2]"/></param>
            <returns>The result value at the specified index.</returns>
        </member>
        <member name="M:System.Algorithm.Sequences.A004526(System.Int32)">
            <summary>
            Gets the value at the specified index in the sequence <see href="https://oeis.org/A004526">A004526</see>
            (0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, ..).
            </summary>
            <param name="index"><inheritdoc cref="T:System.Algorithm.Sequences" path="//shared-comments/para[1]"/></param>
            <returns>The result value at the specified index.</returns>
        </member>
        <member name="M:System.Algorithm.Sequences.A057353(System.Int32)">
            <summary>
            Gets the value at the specified index in the sequence <see href="https://oeis.org/A057353">A057353</see>
            (0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, ..).
            </summary>
            <param name="index"><inheritdoc cref="T:System.Algorithm.Sequences" path="//shared-comments/para[1]"/></param>
            <returns>The result value at the specified index.</returns>
        </member>
        <member name="T:System.Algorithm.SimdOperations">
            <summary>
            Encapsulates a list of methods to handle with bits, using SIMD.
            </summary>
            <seealso href="https://learn.microsoft.com/en-us/dotnet/standard/simd">Microsoft Learn - SIMD</seealso>
            <seealso href="https://en.wikipedia.org/wiki/Single_instruction,_multiple_data">Wikipedia - SIMD</seealso>
        </member>
        <member name="M:System.Algorithm.SimdOperations.IterateBits(System.Int64*,System.Int32,System.Int32*)">
            <summary>
            Iterates all possible set bits in the target array.
            </summary>
            <param name="array">The array specified as a pointer that points to an array or other collection, of <see cref="T:System.Int64"/> integers.</param>
            <param name="length">The length of the argument <paramref name="array"/>.</param>
            <param name="outBuffer">The set bit indices specified as a buffer.</param>
            <returns>Returns the number of set bit indices. This return value is used with argument <paramref name="outBuffer"/>.</returns>
            <seealso href="https://lemire.me/blog/2018/03/08/iterating-over-set-bits-quickly-simd-edition/">
            Iterating over set bits quickly (SIMD edition)
            </seealso>
        </member>
        <member name="T:System.Algorithm.Constants">
            <target name="class" when="constant">
				<summary>
					Provides with constants and read-only values used by code in the current file.
				</summary>
			</target>
        </member>
        <member name="F:System.Algorithm.Constants.LengthTable">
            <summary>
            The length table. Indicates how many bits are set in the specified integer.
            </summary>
        </member>
        <member name="F:System.Algorithm.Constants.BitPosTable">
            <summary>
            The bit position table. In other words, <c>BitPosTable[n]</c> means the n-th integer's (i.e. <c>n</c>'s) set bit positions
            represented as indices.
            </summary>
        </member>
        <member name="T:System.Algorithm.Sorting">
            <summary>
            Provides all algorithm processing methods.
            </summary>
        </member>
        <member name="M:System.Algorithm.Sorting.Sort``1(``0[],,System.Int32,System.Int32)">
            <summary>
            Sort the specified array by quick sort.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The array.</param>
            <param name="comparer">The method to compare two elements.</param>
            <param name="startIndex">Indicates the start index.</param>
            <param name="endIndex">Indicates the end index.</param>
        </member>
        <member name="M:System.Algorithm.Sorting.Sort``1(``0[],)">
            <summary>
            Sort the specified array by quick sort.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The array.</param>
            <param name="comparer">The method to compare two elements.</param>
            <remarks>
            If you want to use this method, please call the other method <see cref="!:Sort&lt;T&gt;(T[], delegate*&lt;T, T, int&gt;, int, int)"/> instead.
            </remarks>
            <seealso cref="!:Sort&lt;T&gt;(T[], delegate*&lt;T, T, int&gt;, int, int)"/>
        </member>
        <member name="T:System.Argument">
            <summary>
            Represents a type that holds argument checking operations.
            </summary>
        </member>
        <member name="M:System.Argument.ThrowIfNotEqual``1(``0,``0,System.String)">
            <summary>
            Checks whether the specified value is equivalent to the specified value. Otherwise,
            an <see cref="T:System.ArgumentException"/> will be thrown.
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <param name="instance">The instance.</param>
            <param name="value">The value that the argument <paramref name="argName"/> must be.</param>
            <param name="argName">The argument name.</param>
            <exception cref="T:System.ArgumentException">
            Throws when the argument <paramref name="argName"/> is not equal to <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:System.Argument.ThrowIfFalse(System.Boolean,System.String,System.String)">
            <summary>
            Checks whether the specified condition is <see langword="true"/>. Otherwise,
            an <see cref="T:System.ArgumentException"/> will be thrown.
            </summary>
            <param name="condition">The condition.</param>
            <param name="message">The error message.</param>
            <param name="conditionStr">The string representation of the condition expression.</param>
            <exception cref="T:System.ArgumentException">
            Throws when checking failed on argument <paramref name="condition"/>.
            </exception>
        </member>
        <member name="M:System.Argument.ThrowIfInvalid(System.Boolean,System.String,System.String)">
            <summary>
            Checks whether the specified condition is <see langword="true"/>. Otherwise,
            an <see cref="T:System.InvalidOperationException"/> will be thrown.
            </summary>
            <param name="condition">The condition.</param>
            <param name="message">The error message.</param>
            <param name="conditionStr">The string representation of the condition expression.</param>
            <exception cref="T:System.InvalidOperationException">
            Throws when checking failed on argument <paramref name="condition"/>.
            </exception>
        </member>
        <member name="T:System.ArgumentNullRefException">
            <inheritdoc/>
        </member>
        <member name="M:System.ArgumentNullRefException.#ctor(System.String)">
            <summary>
            Initializes an <see cref="T:System.ArgumentNullRefException"/> instance via the specified argument name whose value is <see langword="ref null"/>.
            </summary>
            <param name="paramName">The parameter name.</param>
        </member>
        <member name="M:System.ArgumentNullRefException.ThrowIfNullRef``1(``0@,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullRefException"/> if argument is <see langword="null"/> reference.
            </summary>
            <typeparam name="T">The type of the argument reference.</typeparam>
            <param name="argument">
            <para>The reference type argument to validate as non-null.</para>
            <para><i>
            Please note that the argument requires a <see langword="ref"/> modifier, but it does not modify the referenced value
            of the argument. It is nearly equal to <see langword="in"/> modifier.
            However, the method will invoke <see cref="M:System.Runtime.CompilerServices.Unsafe.IsNullRef``1(``0@)"/>, where the only argument is passed by <see langword="ref"/>.
            Therefore, here the current method argument requires a modifier <see langword="ref"/> instead of <see langword="in"/>.
            </i></para>
            </param>
            <param name="paramName">
            The name of the parameter with which argument corresponds. If you omit this parameter, the name of argument is used.
            </param>
            <exception cref="T:System.ArgumentNullRefException">Throws when <paramref name="argument"/> is <see langword="null"/>.</exception>
            <seealso cref="M:System.Runtime.CompilerServices.Unsafe.IsNullRef``1(``0@)"/>
        </member>
        <member name="T:System.Casing">
            <summary>
            Provides a set of methods that handles for a <see cref="T:System.String"/>, to convert the value
            into the specified case.
            </summary>
        </member>
        <member name="M:System.Casing.IsValidIdentifier(System.String)">
            <summary>
            Checks whether the specified string value is a valid identifier name.
            </summary>
            <param name="str">The string to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:System.Casing.ToCamelCase(System.String)">
            <summary>
            Converts the current string identifier into the camel-casing (like <c>camelCasingVariable</c>).
            If the first character is the underscore, the return value will remove the underscore,
            and treat the last characters as the identifier and converts into the camel-casing.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The result string.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the argument <paramref name="str"/> is not an identifier.
            </exception>
        </member>
        <member name="M:System.Casing.ToPascalCase(System.String)">
            <summary>
            Converts the current string identifier into the pascal-casing (like <c>PascalCasingVariable</c>).
            If the first character is the underscore, the return value will remove the underscore,
            and treat the last characters as the identifier and converts into the pascal-casing.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The result string.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the argument <paramref name="str"/> is not an identifier.
            </exception>
        </member>
        <member name="M:System.Casing.Utf8IdentifierPattern">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match a character in the set [A-Z_a-z].<br/>
            ○ Match a word character atomically any number of times.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:System.Collections.Generic.ArrayPairEnumerator`3">
            <summary>
            Defines an enumerator that iterates on elements, combined with two adjacent elements.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <typeparam name="TFirst">
            The first element returned. This type argument must be derived from <typeparamref name="T"/>, or same type.
            </typeparam>
            <typeparam name="TSecond">
            The second element returned. This type argument must be derived from <typeparamref name="T"/>, or same type.
            </typeparam>
            <param name="array">The array value.</param>
            <exception cref="T:System.ArgumentException">Throws when <paramref name="array"/> has the odd number of elements.</exception>
        </member>
        <member name="M:System.Collections.Generic.ArrayPairEnumerator`3.#ctor(`0[])">
            <summary>
            Defines an enumerator that iterates on elements, combined with two adjacent elements.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <typeparam name="TFirst">
            The first element returned. This type argument must be derived from <typeparamref name="T"/>, or same type.
            </typeparam>
            <typeparam name="TSecond">
            The second element returned. This type argument must be derived from <typeparamref name="T"/>, or same type.
            </typeparam>
            <param name="array">The array value.</param>
            <exception cref="T:System.ArgumentException">Throws when <paramref name="array"/> has the odd number of elements.</exception>
        </member>
        <member name="F:System.Collections.Generic.ArrayPairEnumerator`3._array">
            <summary>
            Indicates the internal array to be iterated.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.ArrayPairEnumerator`3._index">
            <summary>
            Indicates the index.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ArrayPairEnumerator`3.Current">
            <inheritdoc cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:System.Collections.Generic.ArrayPairEnumerator`3.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:System.Collections.Generic.ArrayPairEnumerator`3.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="T:System.Collections.Generic.CollectionEnumeration">
            <summary>
            Provides the extension <c>GetEnumerator</c> methods on collection types.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.CollectionEnumeration.EnumerateImmutable``1(``0[])">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.OneDimensionalArrayEnumerator`1"/> instance that iterates on each element.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="this">The array.</param>
            <returns>
            The enumerable collection that allows the iteration on an one-dimensional array.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionEnumeration.EnumerateRef``1(``0[])">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.OneDimensionalArrayRefEnumerator`1"/> instance that iterates on each element.
            Different with the default iteration operation, this type will iterate each element by reference,
            in order that you can write the code like:
            <code><![CDATA[
            foreach (ref int element in new[] { 1, 3, 6, 10 }.EnumerateRef())
            {
                Console.WriteLine(++element);
            }
            ]]></code>
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="this">The array.</param>
            <returns>
            The enumerable collection that allows the iteration by reference on an one-dimensional array.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionEnumeration.ForEachRef``1(``0[],System.ForEachRefCallback{``0})">
            <summary>
            Same as for-each method <see cref="M:System.Array.ForEach``1(``0[],System.Action{``0})"/>, but iterating on references to corresponding elements.
            </summary>
            <typeparam name="T">The type of each element in this array.</typeparam>
            <param name="this">The array.</param>
            <param name="callback">The callback method to handle for each reference to each element.</param>
        </member>
        <member name="M:System.Collections.Generic.CollectionEnumeration.ForEachRefUnsafe``1(``0[],)">
            <inheritdoc cref="M:System.Collections.Generic.CollectionEnumeration.ForEachRef``1(``0[],System.ForEachRefCallback{``0})"/>
        </member>
        <member name="M:System.Collections.Generic.CollectionEnumeration.EnumerateReversely``1(``0[])">
            <inheritdoc cref="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})"/>.
        </member>
        <member name="M:System.Collections.Generic.CollectionEnumeration.EnumerateAsPair``3(``0[])">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.ArrayPairEnumerator`3"/> instance that iterates on each element of pair elements.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <typeparam name="TFirst">The first element returned.</typeparam>
            <typeparam name="TSecond">The second element returned.</typeparam>
            <param name="this">The array.</param>
            <returns>An enumerable collection.</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionEnumeration.GetEnumerator``1(``0)">
            <summary>
            Get all possible flags that the current enumeration field set.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="this">The current enumeration type instance.</param>
            <returns>All flags.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the type isn't applied the attribute <see cref="T:System.FlagsAttribute"/>.
            </exception>
        </member>
        <member name="T:System.Collections.Generic.FlagsEnumTypeFieldEnumerator`1">
            <summary>
            Defines an enumerator that iterates the possible fields of an enumeration type.
            </summary>
            <typeparam name="T">The type of the enumeration type, that is marked the attribute <see cref="T:System.FlagsAttribute"/>.</typeparam>
        </member>
        <member name="F:System.Collections.Generic.FlagsEnumTypeFieldEnumerator`1._fields">
            <summary>
            Indicates the fields of the type to iterate.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.FlagsEnumTypeFieldEnumerator`1._base">
            <summary>
            Indicates the base field.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.FlagsEnumTypeFieldEnumerator`1._index">
            <summary>
            Indicates the current index being iterated.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.FlagsEnumTypeFieldEnumerator`1.#ctor(`0)">
            <summary>
            Initializes a <see cref="T:System.Collections.Generic.FlagsEnumTypeFieldEnumerator`1"/> instance via the type argument,
            and the base field.
            </summary>
            <param name="base">The base field to iterate.</param>
            <exception cref="T:System.InvalidOperationException">
            Throws when the type <typeparamref name="T"/> is not marked <see cref="T:System.FlagsAttribute"/>.
            </exception>
        </member>
        <member name="P:System.Collections.Generic.FlagsEnumTypeFieldEnumerator`1.Current">
            <inheritdoc cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="M:System.Collections.Generic.FlagsEnumTypeFieldEnumerator`1.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:System.Collections.Generic.FlagsEnumTypeFieldEnumerator`1.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:System.Collections.Generic.FlagsEnumTypeFieldEnumerator`1.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:System.Collections.Generic.FlagsEnumTypeFieldEnumerator`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="T:System.Collections.Generic.OneDimensionalArrayEnumerator`1">
            <summary>
            Defines an enumerator that iterates the one-dimensional array.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
        </member>
        <member name="F:System.Collections.Generic.OneDimensionalArrayEnumerator`1._length">
            <summary>
            Indicates the length of the array to iterate.
            The value is equal to <c><see cref="F:System.Collections.Generic.OneDimensionalArrayEnumerator`1._innerArray"/>.Length</c>.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.OneDimensionalArrayEnumerator`1._innerArray">
            <summary>
            Indicates the array to iterate.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.OneDimensionalArrayEnumerator`1._index">
            <summary>
            Indicates the current index being iterated.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.OneDimensionalArrayEnumerator`1.#ctor(`0[])">
            <summary>
            Initializes a <see cref="T:System.Collections.Generic.OneDimensionalArrayEnumerator`1"/> instance
            via the specified array to iterate.
            </summary>
            <param name="innerArray">The array to iterate.</param>
        </member>
        <member name="P:System.Collections.Generic.OneDimensionalArrayEnumerator`1.Current">
            <summary>
            Indicates the current instance being iterated. Please note that the value is returned by reference.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.OneDimensionalArrayEnumerator`1.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:System.Collections.Generic.OneDimensionalArrayEnumerator`1.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:System.Collections.Generic.OneDimensionalArrayEnumerator`1.GetEnumerator">
            <summary>
            Gets the enumerator to iterate on each elements that is with the <see langword="ref"/> keyword.
            </summary>
            <returns>The enumerator type.</returns>
        </member>
        <member name="M:System.Collections.Generic.OneDimensionalArrayEnumerator`1.MoveNext">
            <summary>
            Retrieve the iterator to make it points to the next element.
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating whether the moving operation is successful.
            Returns <see langword="false"/> when the last iteration is for the last element,
            and now there's no elements to be iterated.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.OneDimensionalArrayRefEnumerator`1">
            <summary>
            Defines an enumerator that iterates the one-dimensional array.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.OneDimensionalArrayRefEnumerator`1._length">
            <summary>
            Indicates the length of the array to iterate.
            The value is equal to <c><see cref="F:System.Collections.Generic.OneDimensionalArrayRefEnumerator`1._innerArray"/>.Length</c>.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.OneDimensionalArrayRefEnumerator`1._innerArray">
            <summary>
            Indicates the array to iterate.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.OneDimensionalArrayRefEnumerator`1._index">
            <summary>
            Indicates the current index being iterated.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.OneDimensionalArrayRefEnumerator`1.#ctor(`0[])">
            <summary>
            Initializes a <see cref="T:System.Collections.Generic.OneDimensionalArrayRefEnumerator`1"/> instance
            via the specified array to iterate.
            </summary>
            <param name="innerArray">The array to iterate.</param>
        </member>
        <member name="P:System.Collections.Generic.OneDimensionalArrayRefEnumerator`1.Current">
            <summary>
            Indicates the current instance being iterated. Please note that the value is returned by reference.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.OneDimensionalArrayRefEnumerator`1.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:System.Collections.Generic.OneDimensionalArrayRefEnumerator`1.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:System.Collections.Generic.OneDimensionalArrayRefEnumerator`1.GetEnumerator">
            <summary>
            Gets the enumerator to iterate on each elements that is with
            <see langword="ref"/> or <see langword="ref readonly"/> keyword.
            </summary>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="M:System.Collections.Generic.OneDimensionalArrayRefEnumerator`1.MoveNext">
            <summary>
            Retrieve the iterator to make it points to the next element.
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating whether the moving operation is successful.
            Returns <see langword="false"/> when the last iteration is for the last element,
            and now there's no elements to be iterated.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.ReverseEnumerator`1">
            <summary>
            Represents a reverse enumerator.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="array">The internal array.</param>
        </member>
        <member name="M:System.Collections.Generic.ReverseEnumerator`1.#ctor(`0[])">
            <summary>
            Represents a reverse enumerator.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="array">The internal array.</param>
        </member>
        <member name="F:System.Collections.Generic.ReverseEnumerator`1._index">
            <summary>
            Indicates the current index.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ReverseEnumerator`1.Current">
            <inheritdoc cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:System.Collections.Generic.ReverseEnumerator`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:System.Collections.Generic.ReverseEnumerator`1.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="F:System.Collections.Generic.ReverseEnumerator`1._array">
            <summary>
            The generated field declaration for parameter <c>array</c>.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.ValueList`1">
            <summary>
            Defines a value-type sequence list, using unmanaged pointer types to describe the sequence memory.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="capacity">Indicates the length of the list.</param>
            <remarks>
            We recommend you use this type like:
            <code><![CDATA[
            static int[] Example()
            {
                using scoped var list = new ValueList<int>(10);
                list.Add(3);
                list.Add(6);
                return list.ToArray();
            }
            ]]></code>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.ValueList`1.#ctor(System.Byte)">
            <summary>
            Defines a value-type sequence list, using unmanaged pointer types to describe the sequence memory.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="capacity">Indicates the length of the list.</param>
            <remarks>
            We recommend you use this type like:
            <code><![CDATA[
            static int[] Example()
            {
                using scoped var list = new ValueList<int>(10);
                list.Add(3);
                list.Add(6);
                return list.ToArray();
            }
            ]]></code>
            </remarks>
        </member>
        <member name="F:System.Collections.Generic.ValueList`1._length">
            <summary>
            Indicates the current length.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.ValueList`1._startPtr">
            <summary>
            Indicates the pointer that points to the first element.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ValueList`1.#ctor">
            <summary>
            Initializes a <see cref="T:System.Collections.Generic.ValueList`1"/> instance via the default capacity 255.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ValueList`1.Count">
            <summary>
            Indicates the length of the list.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ValueList`1.Length">
            <summary>
            Indicates the length of the list. The property is same as <see cref="P:System.Collections.Generic.ValueList`1.Count"/>, but the property is used
            by slicing and list patterns.
            </summary>
            <seealso cref="P:System.Collections.Generic.ValueList`1.Count"/>
        </member>
        <member name="P:System.Collections.Generic.ValueList`1.Item(System.Byte)">
            <summary>
            Gets the element from the current list, or sets the element to the current list,
            with the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The reference to the element at the specified index.</returns>
        </member>
        <member name="P:System.Collections.Generic.ValueList`1.Item(System.Index)">
            <inheritdoc cref="P:System.Collections.Generic.ValueList`1.Item(System.Byte)"/>
        </member>
        <member name="M:System.Collections.Generic.ValueList`1.AddIfNotContain(`0,)">
            <summary>
            Adds a new element into the collection if the element does not exist in the collection.
            </summary>
            <param name="element">The element.</param>
            <param name="predicate">The predicate checking whether two elements are same.</param>
        </member>
        <member name="M:System.Collections.Generic.ValueList`1.Add(`0)">
            <summary>
            Adds the element to the current list.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:System.Collections.Generic.ValueList`1.AddRange(System.Collections.Generic.ValueList{`0}@)">
            <summary>
            Adds a list of elements into the collection.
            </summary>
            <param name="elements">A list of elements.</param>
        </member>
        <member name="M:System.Collections.Generic.ValueList`1.Remove">
            <summary>
            Removes the last element from the collection.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ValueList`1.Clear">
            <summary>
            Removes all elements in this collection.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ValueList`1.Dispose">
            <summary>
            To dispose the current list.
            </summary>
            <remarks><i>
            This method should be called when the constructor <see cref="M:System.Collections.Generic.ValueList`1.#ctor(System.Byte)"/> is called.
            </i></remarks>
            <seealso cref="M:System.Collections.Generic.ValueList`1.#ctor(System.Byte)"/>
        </member>
        <member name="M:System.Collections.Generic.ValueList`1.Contains(`0,)">
            <summary>
            Determines whether the specified element is in the current collection
            using the specified equality comparing method to define whether two instances are considered equal.
            </summary>
            <param name="instance">The instance to be determined.</param>
            <param name="predicate">A method that defines whether two instances are considered equal.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:System.Collections.Generic.ValueList`1.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:System.Collections.Generic.ValueList`1.ToString(System.String)">
            <summary>
            Returns a string that represents the current object with the custom format string.
            </summary>
            <param name="format">The format.</param>
            <returns>The string that represents the current object.</returns>
            <exception cref="T:System.FormatException">Throws when the specified format is invalid.</exception>
        </member>
        <member name="M:System.Collections.Generic.ValueList`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:System.Collections.Generic.ValueList`1.ToArray">
            <summary>
            Converts the current instance into an array of type <typeparamref name="T"/>.
            </summary>
            <returns>The array of elements of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:System.Collections.Generic.ValueList`1.Enumerator">
            <summary>
            Defines the enumerator of this type.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.ValueList`1.Enumerator._ptr">
            <summary>
            Indicates the inner pointer.
            </summary>
            <remarks>
            <para><i>
            Due to the C# implementation, feature "<see href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/declarations#scoped-ref"><b><see langword="ref"/> fields</b></see>"
            does not support for native memory,
            which means you cannot define a reference-based field that reference to native memory.
            Therefore, here we can only use bare pointers to describe the internal data. <b>Do not change this field.</b>
            </i></para>
            <para><i>
            C# 11 does not support "<see href="https://github.com/dotnet/roslyn/issues/62243"><b><see langword="ref"/> to <see langword="ref struct"/></b></see>"
            neither.
            </i></para>
            </remarks>
        </member>
        <member name="F:System.Collections.Generic.ValueList`1.Enumerator._current">
            <summary>
            Indicates the current position.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ValueList`1.Enumerator.#ctor(System.Collections.Generic.ValueList{`0}@)">
            <summary>
            Initializes the <see cref="T:System.Collections.Generic.ValueList`1.Enumerator"/> type via the current instance.
            </summary>
            <param name="ptr">The pointer that points to the list.</param>
        </member>
        <member name="P:System.Collections.Generic.ValueList`1.Enumerator.Current">
            <inheritdoc cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="M:System.Collections.Generic.ValueList`1.Enumerator.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="F:System.Collections.Generic.ValueList`1._capacity">
            <summary>
            The generated field declaration for parameter <c>capacity</c>.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.CollectionExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.ICollection`1"/> and <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.ICollection`1"/>
            <seealso cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Immutable.ImmutableArray{``0})">
            <summary>
            Adds the elements of the specified collection to the end of the
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The collection.</param>
            <param name="values">
            The values you want to add to the end of the collection.
            </param>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the end of the
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The collection.</param>
            <param name="values">
            The values you want to add to the end of the collection.
            </param>
        </member>
        <member name="T:System.Collections.Generic.ListExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.List`1"/>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.Remove``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes the last element of the list, and return that removed element.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="this">The removed list.</param>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.Slice``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Slices the list.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The list.</param>
            <param name="startIndex">The desired start index.</param>
            <param name="count">The desired number of elements.</param>
            <returns>The sliced list.</returns>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.CopyExcept``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.List`1"/> instance, with all elements in the current instance, except the element at the specified index.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The list.</param>
            <param name="index">The desired index.</param>
            <returns>The target list.</returns>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.ToImmutableArray``1(System.Collections.Generic.List{``0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="T:System.Collections.BitArrayExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.BitArray"/>.
            </summary>
            <seealso cref="T:System.Collections.BitArray"/>
        </member>
        <member name="M:System.Collections.BitArrayExtensions.GetCardinality(System.Collections.BitArray)">
            <summary>
            Get the cardinality of the specified <see cref="T:System.Collections.BitArray"/>.
            </summary>
            <param name="this">The array.</param>
            <returns>The total number of bits set <see langword="true"/>.</returns>
        </member>
        <member name="T:System.Collections.Immutable.ImmutableArrayExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.
            </summary>
            <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.CollectionElementEquals``1(System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0},)">
            <summary>
            Determines whether two sequences are equal according to an equality comparer method, specified as a function pointer.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The fist collection to be compared.</param>
            <param name="other">The second collection to be compared.</param>
            <param name="comparison">
            The function pointer that points to a function that compares two <typeparamref name="T"/> instances,
            and returns a <see cref="T:System.Boolean"/> value indicating whether they are considered equal.
            </param>
            <returns><see langword="true"/> to indicate the sequences are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.CollectionElementRefEquals``1(System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0},)">
            <summary>
            Determines whether two sequences are equal according to an equality comparer method, specified as a function pointer.
            Different with <see cref="!:CollectionElementEquals&lt;T&gt;(ImmutableArray&lt;T&gt;, ImmutableArray&lt;T&gt;, delegate*&lt;T, T, bool&gt;)"/>,
            this method requires references instead of the value to optimize the argument passing rule.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The fist collection to be compared.</param>
            <param name="other">The second collection to be compared.</param>
            <param name="comparison">
            The function pointer that points to a function that compares two <typeparamref name="T"/> instances,
            and returns a <see cref="T:System.Boolean"/> value indicating whether they are considered equal.
            </param>
            <returns><see langword="true"/> to indicate the sequences are equal; otherwise, <see langword="false"/>.</returns>
            <seealso cref="!:CollectionElementEquals&lt;T&gt;(ImmutableArray&lt;T&gt;, ImmutableArray&lt;T&gt;, delegate*&lt;T, T, bool&gt;)"/>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.Count``1(System.Collections.Immutable.ImmutableArray{``0},System.Predicate{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.Count``1(System.Collections.Immutable.ImmutableArray{``0},)">
            <inheritdoc cref="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.Sum``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
            <summary>
            Computes the sum of sequence of <typeparamref name="TResult"/> values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <typeparam name="TResult">
            The result selected. The type must be a number type that implements interface type <see cref="T:System.Numerics.INumber`1"/>.
            For example, a <see cref="T:System.Decimal"/> type.
            </typeparam>
            <param name="this">The array.</param>
            <param name="selector">
            The selector method that converts each elements to an instance of type <typeparamref name="TResult"/>.
            </param>
            <returns>The sum of the projected values.</returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.CastToNotNull``1(System.Collections.Immutable.ImmutableArray{System.Nullable{``0}})">
            <summary>
            Casts the current array elements into target typed values.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The array to be casted.</param>
            <returns>The casted array.</returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.CastToNotNull``1(System.Collections.Immutable.ImmutableArray{``0})">
            <summary>
            Casts the current array elements into target typed values.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The array to be casted.</param>
            <returns>The casted array.</returns>
        </member>
        <member name="T:System.CommandLine.Annotations.CommandConverterAttribute`1">
            <summary>
            Represents an attribute that is applied to a property, indicating the property value should be converted
            through a <see cref="T:System.CommandLine.IValueConverter"/>.
            </summary>
            <typeparam name="T">
            The type of the converter. The type must implement interface type <see cref="T:System.CommandLine.IValueConverter"/>,
            and contains a parameterless constructor.
            </typeparam>
            <seealso cref="T:System.CommandLine.IValueConverter"/>
        </member>
        <member name="T:System.CommandLine.Annotations.DoubleArgumentsCommandAttribute">
            <summary>
            Represents a double-argument command. The command requires an argument name, following with a real value,
            such as "<c>-g grid</c>".
            </summary>
            <param name="shortName">The short name of the command.</param>
            <param name="fullName">The full name of the command. The command should not contain the prefix.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the argument <paramref name="shortName"/> is not a letter.
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws when the argument <paramref name="fullName"/> doesn't start with a letter, or a hyphen.
            </exception>
        </member>
        <member name="M:System.CommandLine.Annotations.DoubleArgumentsCommandAttribute.#ctor(System.Char,System.String)">
            <summary>
            Represents a double-argument command. The command requires an argument name, following with a real value,
            such as "<c>-g grid</c>".
            </summary>
            <param name="shortName">The short name of the command.</param>
            <param name="fullName">The full name of the command. The command should not contain the prefix.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the argument <paramref name="shortName"/> is not a letter.
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws when the argument <paramref name="fullName"/> doesn't start with a letter, or a hyphen.
            </exception>
        </member>
        <member name="P:System.CommandLine.Annotations.DoubleArgumentsCommandAttribute.IsRequired">
            <summary>
            <para>Indicates whether the command is required.</para>
            <para>The default value is <see langword="false"/>.</para>
            </summary>
        </member>
        <member name="P:System.CommandLine.Annotations.DoubleArgumentsCommandAttribute.Description">
            <summary>
            Indicates the description of the argument.
            </summary>
            <remarks><b>
            This property can be <see langword="null"/>. However, both properties <see cref="P:System.CommandLine.Annotations.DoubleArgumentsCommandAttribute.Description"/> and <see cref="P:System.CommandLine.Annotations.DoubleArgumentsCommandAttribute.DescriptionResourceKey"/>
            cannot be <see langword="null"/>.
            </b></remarks>
            <seealso cref="P:System.CommandLine.Annotations.DoubleArgumentsCommandAttribute.Description"/>
            <seealso cref="P:System.CommandLine.Annotations.DoubleArgumentsCommandAttribute.DescriptionResourceKey"/>
        </member>
        <member name="P:System.CommandLine.Annotations.DoubleArgumentsCommandAttribute.DescriptionResourceKey">
            <summary>
            Indicates the description key of the argument in resource dictionary.
            </summary>
            <remarks>
            <inheritdoc cref="P:System.CommandLine.Annotations.DoubleArgumentsCommandAttribute.Description" path="/remarks"/>
            </remarks>
            <seealso cref="P:System.CommandLine.Annotations.DoubleArgumentsCommandAttribute.Description"/>
            <seealso cref="P:System.CommandLine.Annotations.DoubleArgumentsCommandAttribute.DescriptionResourceKey"/>
        </member>
        <member name="P:System.CommandLine.Annotations.DoubleArgumentsCommandAttribute.ShortName">
            <summary>
            The generated property declaration for parameter <c>shortName</c>.
            </summary>
        </member>
        <member name="P:System.CommandLine.Annotations.DoubleArgumentsCommandAttribute.FullName">
            <summary>
            The generated property declaration for parameter <c>fullName</c>.
            </summary>
        </member>
        <member name="T:System.CommandLine.Annotations.GlobalConfigurationAttribute">
            <summary>
            Defines an attribute type that provides with the global configuration.
            </summary>
        </member>
        <member name="P:System.CommandLine.Annotations.GlobalConfigurationAttribute.FullCommandNamePrefix">
            <summary>
            <para>
            Indicates the prefix of the full command name. For example, the characters <c>--</c>
            in the command name <c>--say-hello</c>.
            </para>
            <para>
            The default value is <c>"--"</c>. Generally the value can be <c>"--"</c> or <c>"/"</c>.
            <b>Please do not assign empty string.</b>
            </para>
            </summary>
        </member>
        <member name="P:System.CommandLine.Annotations.GlobalConfigurationAttribute.ShortCommandNamePrefix">
            <summary>
            <para>
            Indicates the prefix of the short command name. For example, the character <c>-</c>
            in the command name <c>-s</c>.
            </para>
            <para>
            The default value is <c>"-"</c>. Generally the value should be <c>"-"</c>.
            <b>Please do not assign empty string.</b>
            </para>
            </summary>
        </member>
        <member name="T:System.CommandLine.Annotations.NameAttribute">
            <summary>
            Defines an attribute that is applied to an enumeration field, indicating the name of the field.
            </summary>
            <param name="name">Indicates the name of the enumeration field.</param>
        </member>
        <member name="M:System.CommandLine.Annotations.NameAttribute.#ctor(System.String)">
            <summary>
            Defines an attribute that is applied to an enumeration field, indicating the name of the field.
            </summary>
            <param name="name">Indicates the name of the enumeration field.</param>
        </member>
        <member name="P:System.CommandLine.Annotations.NameAttribute.Name">
            <summary>
            The generated property declaration for parameter <c>name</c>.
            </summary>
        </member>
        <member name="T:System.CommandLine.Annotations.RootCommandAttribute">
            <summary>
            Represents a root command description.
            </summary>
            <param name="name">Indicates the name of the command.</param>
        </member>
        <member name="M:System.CommandLine.Annotations.RootCommandAttribute.#ctor(System.String)">
            <summary>
            Represents a root command description.
            </summary>
            <param name="name">Indicates the name of the command.</param>
        </member>
        <member name="P:System.CommandLine.Annotations.RootCommandAttribute.IsSpecial">
            <summary>
            <para>Indicates whether the command is special.</para>
            <para>The default value is <see langword="false"/>.</para>
            </summary>
        </member>
        <member name="P:System.CommandLine.Annotations.RootCommandAttribute.Description">
            <summary>
            Indicates the description of the command.
            </summary>
            <remarks><b>
            This property can be <see langword="null"/>. However, both properties <see cref="P:System.CommandLine.Annotations.RootCommandAttribute.Description"/> and <see cref="P:System.CommandLine.Annotations.RootCommandAttribute.DescriptionResourceKey"/>
            cannot be <see langword="null"/>.
            </b></remarks>
            <seealso cref="P:System.CommandLine.Annotations.RootCommandAttribute.Description"/>
            <seealso cref="P:System.CommandLine.Annotations.RootCommandAttribute.DescriptionResourceKey"/>
        </member>
        <member name="P:System.CommandLine.Annotations.RootCommandAttribute.DescriptionResourceKey">
            <summary>
            Indicates the description of the command, represented as a resource key related to a resource dictionary.
            </summary>
            <remarks>
            <inheritdoc cref="P:System.CommandLine.Annotations.RootCommandAttribute.Description" path="/remarks"/>
            </remarks>
            <seealso cref="P:System.CommandLine.Annotations.RootCommandAttribute.Description"/>
            <seealso cref="P:System.CommandLine.Annotations.RootCommandAttribute.DescriptionResourceKey"/>
        </member>
        <member name="P:System.CommandLine.Annotations.RootCommandAttribute.Name">
            <summary>
            The generated property declaration for parameter <c>name</c>.
            </summary>
        </member>
        <member name="T:System.CommandLine.Annotations.RouteToTypeAttribute">
            <summary>
            Represents an attribute type that is applied to an enumeration field,
            indicating the routed type.
            </summary>
            <param name="typeToRoute">Indicates the type to be routed.</param>
        </member>
        <member name="M:System.CommandLine.Annotations.RouteToTypeAttribute.#ctor(System.Type)">
            <summary>
            Represents an attribute type that is applied to an enumeration field,
            indicating the routed type.
            </summary>
            <param name="typeToRoute">Indicates the type to be routed.</param>
        </member>
        <member name="P:System.CommandLine.Annotations.RouteToTypeAttribute.TypeToRoute">
            <summary>
            The generated property declaration for parameter <c>typeToRoute</c>.
            </summary>
        </member>
        <member name="T:System.CommandLine.Annotations.SingleArgumentCommandAttribute">
            <summary>
            Represents a single-argument command. The command don't require any argument name such as "<c>-f</c>".
            </summary>
            <param name="notation">Indicates the fast notation to introduce the command, which is used for the displaying the help text.</param>
        </member>
        <member name="M:System.CommandLine.Annotations.SingleArgumentCommandAttribute.#ctor(System.String)">
            <summary>
            Represents a single-argument command. The command don't require any argument name such as "<c>-f</c>".
            </summary>
            <param name="notation">Indicates the fast notation to introduce the command, which is used for the displaying the help text.</param>
        </member>
        <member name="P:System.CommandLine.Annotations.SingleArgumentCommandAttribute.IgnoreCase">
            <summary>
            <para>Indicates whether the command value can ignore the casing.</para>
            <para>The default value is <see langword="true"/>.</para>
            </summary>
        </member>
        <member name="P:System.CommandLine.Annotations.SingleArgumentCommandAttribute.IsRequired">
            <summary>
            <para>Indicates whether the command is required.</para>
            <para>The default value is <see langword="false"/>.</para>
            </summary>
        </member>
        <member name="P:System.CommandLine.Annotations.SingleArgumentCommandAttribute.Description">
            <summary>
            Indicates the description of the argument.
            </summary>
            <remarks><b>
            This property can be <see langword="null"/>. However, both properties <see cref="P:System.CommandLine.Annotations.SingleArgumentCommandAttribute.Description"/> and <see cref="P:System.CommandLine.Annotations.SingleArgumentCommandAttribute.DescriptionResourceKey"/>
            cannot be <see langword="null"/>.
            </b></remarks>
            <seealso cref="P:System.CommandLine.Annotations.SingleArgumentCommandAttribute.Description"/>
            <seealso cref="P:System.CommandLine.Annotations.SingleArgumentCommandAttribute.DescriptionResourceKey"/>
        </member>
        <member name="P:System.CommandLine.Annotations.SingleArgumentCommandAttribute.DescriptionResourceKey">
            <summary>
            Indicates the description key of the argument in resource dictionary.
            </summary>
            <remarks>
            <inheritdoc cref="P:System.CommandLine.Annotations.SingleArgumentCommandAttribute.Description" path="/remarks"/>
            </remarks>
            <seealso cref="P:System.CommandLine.Annotations.SingleArgumentCommandAttribute.Description"/>
            <seealso cref="P:System.CommandLine.Annotations.SingleArgumentCommandAttribute.DescriptionResourceKey"/>
        </member>
        <member name="P:System.CommandLine.Annotations.SingleArgumentCommandAttribute.Notation">
            <summary>
            The generated property declaration for parameter <c>notation</c>.
            </summary>
        </member>
        <member name="T:System.CommandLine.Annotations.SupportedArgumentsAttribute">
            <summary>
            Represents an attribute that is applied to an enumeration typed field, indicating all specified commands
            are supported to be used as a part of the command line arguments when introducing the enumeration instance.
            </summary>
            <param name="supportedNames">Indicates the supported names corresponding to the current enumeration field.</param>
        </member>
        <member name="M:System.CommandLine.Annotations.SupportedArgumentsAttribute.#ctor(System.String[])">
            <summary>
            Represents an attribute that is applied to an enumeration typed field, indicating all specified commands
            are supported to be used as a part of the command line arguments when introducing the enumeration instance.
            </summary>
            <param name="supportedNames">Indicates the supported names corresponding to the current enumeration field.</param>
        </member>
        <member name="P:System.CommandLine.Annotations.SupportedArgumentsAttribute.IgnoreCase">
            <summary>
            <para>
            Indicates whether the parser will ignore the case of the names when parsing to the actual instance.
            </para>
            <para>The default value is <see langword="true"/>.</para>
            </summary>
        </member>
        <member name="P:System.CommandLine.Annotations.SupportedArgumentsAttribute.SupportedArguments">
            <summary>
            The generated property declaration for parameter <c>supportedNames</c>.
            </summary>
        </member>
        <member name="T:System.CommandLine.Annotations.UsageAttribute">
            <summary>
            Represents an attribute that is applied to a command type, indicating the usage of the current root command.
            </summary>
            <param name="example">Indicates the example command.</param>
        </member>
        <member name="M:System.CommandLine.Annotations.UsageAttribute.#ctor(System.String)">
            <summary>
            Represents an attribute that is applied to a command type, indicating the usage of the current root command.
            </summary>
            <param name="example">Indicates the example command.</param>
        </member>
        <member name="P:System.CommandLine.Annotations.UsageAttribute.IsPattern">
            <summary>
            <para>
            Indicates whether the example command is fact, which means whether the current example command
            contains any wildcards or fuzzy argument patterns.
            </para>
            <para>The default value is <see langword="false"/>.</para>
            </summary>
            <remarks>
            Fuzzy argument patterns:
            <list type="table">
            <listheader>
            <term>Patterns</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><c><![CDATA[<name>]]></c></term>
            <description>
            Indicates the arguments that is passed whose main idea is surrounded with the name "<c>name</c>".
            </description>
            </item>
            <item>
            <term><c>{a|b|c|...}</c></term>
            <description>
            Indicates you should choose a value from the given values inside the curly brace.
            </description>
            </item>
            <item>
            <term><c>[-argName value]</c></term>
            <description>
            Indicates the current value is optional, which means the current argument "<c>argName</c>"
            has a default value even if you don't assign to it.
            </description>
            </item>
            </list>
            The wildcards:
            <list type="table">
            <listheader>
            <term>Wildcard</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Question mark <c>?</c></term>
            <description>Indicates the current argument can only appear no more than once.</description>
            </item>
            <item>
            <term>Star <c>*</c></term>
            <description>Indicates the current argument can appear arbitrary times.</description>
            </item>
            <item>
            <term>Plus sign <c>+</c></term>
            <description>Indicates the current argument can appear at least once.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:System.CommandLine.Annotations.UsageAttribute.Description">
            <summary>
            Indicates the description of the example command.
            </summary>
            <remarks><b>
            This property can be <see langword="null"/>. However, both properties <see cref="P:System.CommandLine.Annotations.UsageAttribute.Description"/> and <see cref="P:System.CommandLine.Annotations.UsageAttribute.DescriptionResourceKey"/>
            cannot be <see langword="null"/>.
            </b></remarks>
            <seealso cref="P:System.CommandLine.Annotations.UsageAttribute.Description"/>
            <seealso cref="P:System.CommandLine.Annotations.UsageAttribute.DescriptionResourceKey"/>
        </member>
        <member name="P:System.CommandLine.Annotations.UsageAttribute.DescriptionResourceKey">
            <summary>
            Indicates the description key of the example command stored in resource dictionary.
            </summary>
            <remarks>
            <inheritdoc cref="P:System.CommandLine.Annotations.UsageAttribute.Description" path="/remarks"/>
            </remarks>
            <seealso cref="P:System.CommandLine.Annotations.UsageAttribute.Description"/>
            <seealso cref="P:System.CommandLine.Annotations.UsageAttribute.DescriptionResourceKey"/>
        </member>
        <member name="P:System.CommandLine.Annotations.UsageAttribute.Example">
            <summary>
            The generated property declaration for parameter <c>example</c>.
            </summary>
        </member>
        <member name="T:System.CommandLine.Annotations.WebsiteAttribute">
            <summary>
            Defines an attribute that is applied to an enumeration field, indicating the website of the field.
            </summary>
            <param name="uriString">The website of the field.</param>
            <exception cref="T:System.ArgumentException">Throws when specified string value cannot be parsed into a valid URI link.</exception>
        </member>
        <member name="M:System.CommandLine.Annotations.WebsiteAttribute.#ctor(System.String)">
            <summary>
            Defines an attribute that is applied to an enumeration field, indicating the website of the field.
            </summary>
            <param name="uriString">The website of the field.</param>
            <exception cref="T:System.ArgumentException">Throws when specified string value cannot be parsed into a valid URI link.</exception>
        </member>
        <member name="P:System.CommandLine.Annotations.WebsiteAttribute.Site">
            <summary>
            Indicates the website of the enumeration field.
            </summary>
        </member>
        <member name="T:System.CommandLine.CommandConverterException">
            <summary>
            Represents an error case that is thrown if command converter has encountered it.
            </summary>
        </member>
        <member name="M:System.CommandLine.CommandConverterException.#ctor">
            <summary>
            Initializes a <see cref="T:System.CommandLine.Annotations.CommandConverterAttribute`1"/> instance.
            </summary>
        </member>
        <member name="M:System.CommandLine.CommandConverterException.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:System.CommandLine.Annotations.CommandConverterAttribute`1"/> instance via the specified error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:System.CommandLine.CommandLineException">
            <summary>
            Represents a command line exception that will be thrown while parsing or executing a command.
            </summary>
        </member>
        <member name="M:System.CommandLine.CommandLineException.#ctor(System.Int32)">
            <summary>
            Initializes the property <see cref="P:System.CommandLine.CommandLineException.ErrorCode"/> with the specified value.
            </summary>
            <param name="errorCode">The error code value.</param>
        </member>
        <member name="M:System.CommandLine.CommandLineException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes the property <see cref="P:System.CommandLine.CommandLineException.ErrorCode"/> and <see cref="P:System.Exception.Message"/>
            with the specified value.
            </summary>
            <param name="errorCode">The error code value.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="P:System.CommandLine.CommandLineException.ErrorCode">
            <summary>
            Indicates the error code.
            </summary>
        </member>
        <member name="T:System.CommandLine.CommandLineInternalError">
            <summary>
            Defines an error that is raised by the command-line handler runtime.
            </summary>
            <remarks><b>
            All possible internal error uses the integers between 1001 and 2000. If you has defined a new error code type,
            please avoid the range of these integers.
            </b></remarks>
        </member>
        <member name="F:System.CommandLine.CommandLineInternalError.ArgumentFormatInvalid">
            <summary>
            Indicates the error that the command line arguments is invalid.
            </summary>
        </member>
        <member name="F:System.CommandLine.CommandLineInternalError.CommandNameIsInvalid">
            <summary>
            Indicates the error that the command name is invalid.
            </summary>
        </member>
        <member name="F:System.CommandLine.CommandLineInternalError.ArgumentsAmbiguousMatchedOrMismatched">
            <summary>
            Indicates the error that ambiguous matched or mismatched.
            </summary>
        </member>
        <member name="F:System.CommandLine.CommandLineInternalError.MultipleSingleArgumentCommandPropertiesFound">
            <summary>
            Indicates the error that multiple single-argument commands found in a same root command type.
            </summary>
        </member>
        <member name="F:System.CommandLine.CommandLineInternalError.ArgumentExpected">
            <summary>
            Indicates the error that the argument is expected.
            </summary>
        </member>
        <member name="F:System.CommandLine.CommandLineInternalError.ConvertedTypeMustBeString">
            <summary>
            Indicates the error that the converted type must be a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:System.CommandLine.CommandLineInternalError.ArgumentIsEmpty">
            <summary>
            Indicates the error that the command line arguments is empty.
            </summary>
        </member>
        <member name="F:System.CommandLine.CommandLineInternalError.NotAllRequiredPropertiesAreAssigned">
            <summary>
            Indicates the error that not all required properties are assigned.
            </summary>
        </member>
        <member name="F:System.CommandLine.CommandLineInternalError.BothSingleAndDoubleCommandAttributesAreMarked">
            <summary>
            Indicates the error that both single and double command attributes are marked.
            </summary>
        </member>
        <member name="F:System.CommandLine.CommandLineInternalError.ConverterError">
            <summary>
            Indicates the error that the command converter cannot convert the specified text into the target type
            due to invalid text.
            </summary>
        </member>
        <member name="T:System.CommandLine.CommandLineParserException">
            <summary>
            Defines the command line parser exception.
            </summary>
        </member>
        <member name="M:System.CommandLine.CommandLineParserException.#ctor(System.CommandLine.CommandLineInternalError)">
            <summary>
            Initializes a <see cref="T:System.CommandLine.CommandLineParserException"/> instance via the specified error case.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:System.CommandLine.CommandLineParserException.#ctor(System.CommandLine.CommandLineInternalError,System.String)">
            <summary>
            Initializes a <see cref="T:System.CommandLine.CommandLineParserException"/> instance via the specified error case,
            and the extra message to describe the extra information.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="extraErrorMessage">The extra error message.</param>
        </member>
        <member name="M:System.CommandLine.CommandLineParserException.InitializePropertyMessage(System.CommandLine.CommandLineInternalError,System.String)">
            <summary>
            To initializes the property <see cref="P:System.Exception.Message"/> via the specified error code.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="extraMessage">The extra error message.</param>
            <returns>The message string value.</returns>
        </member>
        <member name="T:System.CommandLine.CommandLineRuntimeException">
            <summary>
            Defines an exception type that will be thrown when an error has been encountered while command line handling.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:System.CommandLine.CommandLineRuntimeException.#ctor(System.Int32)">
            <summary>
            Defines an exception type that will be thrown when an error has been encountered while command line handling.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="T:System.CommandLine.IExecutable">
            <summary>
            Represents an executable command.
            </summary>
        </member>
        <member name="M:System.CommandLine.IExecutable.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Try to execute the command, and returns the result reflected the execution.
            </summary>
            <param name="cancellationToken">The cancellation token that has ability to cancel the operation via itself.</param>
            <returns>A task that handles the operation.</returns>
            <exception cref="T:System.CommandLine.CommandLineRuntimeException">Throws when an error has been encountered.</exception>
        </member>
        <member name="T:System.CommandLine.IValueConverter">
            <summary>
            Represents a value converter.
            </summary>
        </member>
        <member name="M:System.CommandLine.IValueConverter.Convert(System.String)">
            <summary>
            Converts a string value as the command line argument into the target typed instance.
            </summary>
            <param name="value">The string value as the command line argument.</param>
            <returns>The target typed instance as the result.</returns>
            <exception cref="T:System.CommandLine.CommandConverterException">Throws when the current method has encountered an unexpected error.</exception>
        </member>
        <member name="T:System.CommandLine.MetaParser">
            <summary>
            Defines a meta parser that parses the raw string in a single line, separating them into multiple arguments using spaces and quotes.
            </summary>
            <remarks>
            This type uses a method by regular expressions to parse strings, referenced from StackOverflow.
            For more information please visit <see href="https://stackoverflow.com/a/59638741/13613782">this link</see>.
            </remarks>
        </member>
        <member name="M:System.CommandLine.MetaParser.Parse(System.String)">
            <summary>
            Parses a line of command, separating the command line into multiple <see cref="T:System.String"/> arguments using spaces and quotes.
            </summary>
            <param name="commandLine">The command line.</param>
            <returns>Parsed arguments, represented as an array of <see cref="T:System.String"/> values.</returns>
        </member>
        <member name="M:System.CommandLine.MetaParser.CommandArgumentsPattern">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match with 2 alternative expressions, atomically.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '"'.<br/>
                    ○ Match any character lazily at least once.<br/>
                    ○ Match '"'.<br/>
                ○ Match a character other than ' ' atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:System.CommandLine.Parser">
            <summary>
            Defines a command line parser that can parse the command line arguments as real instances.
            </summary>
        </member>
        <member name="M:System.CommandLine.Parser.ParseAndApplyTo(System.String[],System.CommandLine.IExecutable)">
            <summary>
            Try to parse the command line arguments and apply to the options into the specified instance.
            </summary>
            <param name="commandLineArguments">Indicates the command line arguments.</param>
            <param name="rootCommand">The option instance that stores the options.</param>
            <remarks>
            Due to using reflection, the type argument must be a <see langword="class"/> in order to prevent
            potential boxing and unboxing operations, which will make an unexpected error that the assignment
            will always be failed on <see langword="struct"/> types.
            </remarks>
            <exception cref="T:System.CommandLine.CommandLineParserException">
            Throws when the command line arguments is <see langword="null"/> or empty currently,
            or the command name is invalid.
            </exception>
        </member>
        <member name="T:System.CommandLine.Terminal">
            <summary>
            Provides with the operations for the terminal.
            </summary>
        </member>
        <member name="M:System.CommandLine.Terminal.Pause">
            <summary>
            Pauses the command line, and wait for user pressing a key to continue.
            </summary>
        </member>
        <member name="M:System.CommandLine.Terminal.Write(System.String)">
            <summary>
            Writes the string value, followed by the current line terminator to the standard output stream.
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.Write(System.String,System.ConsoleColor)">
            <summary>
            Writes the string value, followed by the current line terminator to the standard output stream.
            </summary>
            <param name="s">The string.</param>
            <param name="foreground">The foreground color.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.Write(System.String,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Writes the string value, followed by the current line terminator to the standard output stream.
            </summary>
            <param name="s">The string.</param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.Write``1(``0)">
            <inheritdoc cref="M:System.Console.Write(System.Object)"/>
            <typeparam name="T">The type argument that corresponds to the type of the argument <paramref name="value"/>.</typeparam>
        </member>
        <member name="M:System.CommandLine.Terminal.Write``1(``0,System.ConsoleColor)">
            <summary>
            Writes the text representation of the specified object to the standard output stream,
            with the specified foreground.
            </summary>
            <typeparam name="T">The type of the object to be displayed.</typeparam>
            <param name="value"><inheritdoc cref="M:System.Console.Write(System.Object)"/></param>
            <param name="foreground">The foreground color.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.Write``1(``0,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Writes the text representation of the specified object to the standard output stream,
            with the specified foreground.
            </summary>
            <typeparam name="T">The type of the object to be displayed.</typeparam>
            <param name="value"><inheritdoc cref="M:System.Console.Write(System.Object)"/></param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteLine">
            <inheritdoc cref="M:System.Console.WriteLine"/>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteLine``1(``0)">
            <inheritdoc cref="M:System.Console.WriteLine(System.Object)"/>
            <typeparam name="T">The type argument that corresponds to the type of the argument <paramref name="value"/>.</typeparam>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteLine``1(``0,System.ConsoleColor)">
            <inheritdoc cref="M:System.Console.WriteLine(System.Object)"/>
            <typeparam name="T">The type argument that corresponds to the type of the argument <paramref name="value"/>.</typeparam>
            <param name="value"><inheritdoc/></param>
            <param name="foreground">The foreground color.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteLine``1(``0,System.ConsoleColor,System.ConsoleColor)">
            <inheritdoc cref="M:System.Console.WriteLine(System.Object)"/>
            <typeparam name="T">The type argument that corresponds to the type of the argument <paramref name="value"/>.</typeparam>
            <param name="value"><inheritdoc/></param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteLine(System.String)">
            <summary>
            Writes the string value, followed by the current line terminator to the standard output stream.
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteLine(System.String,System.ConsoleColor)">
            <summary>
            Writes the string value, followed by the current line terminator to the standard output stream.
            </summary>
            <param name="s">The string.</param>
            <param name="foreground">The foreground color.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteLine(System.String,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Writes the string value, followed by the current line terminator to the standard output stream.
            </summary>
            <param name="s">The string.</param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteAsync(System.String)">
            <summary>
            Writes the string value, followed by the current line terminator to the standard output stream.
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteAsync(System.String,System.ConsoleColor)">
            <summary>
            Writes the string value, followed by the current line terminator to the standard output stream.
            </summary>
            <param name="s">The string.</param>
            <param name="foreground">The foreground color.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteAsync(System.String,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Writes the string value, followed by the current line terminator to the standard output stream.
            </summary>
            <param name="s">The string.</param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteAsync``1(``0)">
            <inheritdoc cref="M:System.Console.Write(System.Object)"/>
            <typeparam name="T">The type of the object to be displayed.</typeparam>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteAsync``1(``0,System.ConsoleColor)">
            <summary>
            Writes the text representation of the specified object to the standard output stream,
            with the specified foreground.
            </summary>
            <typeparam name="T">The type of the object to be displayed.</typeparam>
            <param name="value"><inheritdoc cref="M:System.Console.Write(System.Object)"/></param>
            <param name="foreground">The foreground color.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteAsync``1(``0,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Writes the text representation of the specified object to the standard output stream,
            with the specified foreground.
            </summary>
            <typeparam name="T">The type of the object to be displayed.</typeparam>
            <param name="value"><inheritdoc cref="M:System.Console.Write(System.Object)"/></param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteLineAsync">
            <inheritdoc cref="M:System.Console.WriteLine"/>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteLineAsync``1(``0)">
            <inheritdoc cref="M:System.Console.WriteLine(System.Object)"/>
            <typeparam name="T">The type argument that corresponds to the type of the argument <paramref name="value"/>.</typeparam>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteLineAsync``1(``0,System.ConsoleColor)">
            <inheritdoc cref="M:System.Console.WriteLine(System.Object)"/>
            <typeparam name="T">The type argument that corresponds to the type of the argument <paramref name="value"/>.</typeparam>
            <param name="value"><inheritdoc/></param>
            <param name="foreground">The foreground color.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteLineAsync``1(``0,System.ConsoleColor,System.ConsoleColor)">
            <inheritdoc cref="M:System.Console.WriteLine(System.Object)"/>
            <typeparam name="T">The type argument that corresponds to the type of the argument <paramref name="value"/>.</typeparam>
            <param name="value"><inheritdoc/></param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteLineAsync(System.String)">
            <summary>
            Writes the string value, followed by the current line terminator to the standard output stream.
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteLineAsync(System.String,System.ConsoleColor)">
            <summary>
            Writes the string value, followed by the current line terminator to the standard output stream.
            </summary>
            <param name="s">The string.</param>
            <param name="foreground">The foreground color.</param>
        </member>
        <member name="M:System.CommandLine.Terminal.WriteLineAsync(System.String,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Writes the string value, followed by the current line terminator to the standard output stream.
            </summary>
            <param name="s">The string.</param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntax">
            <summary>
            Represents a list of <see cref="T:System.String"/> constants being used by <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/>.
            </summary>
            <remarks>
            In fact such fields are totally same as ones in attribute type <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/>,
            but I don't like to reference them using attribute full name.
            </remarks>
            <seealso cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntax.Json">
            <summary>
            The syntax identifier for strings containing JavaScript Object Notation (JSON).
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntax.Regex">
            <summary>
            The syntax identifier for strings containing regular expressions.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntax.Uri">
            <summary>
            The syntax identifier for strings containing URIs.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntax.Xml">
            <summary>
            The syntax identifier for strings containing XML.
            </summary>
        </member>
        <member name="T:System.ArrayExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Array"/>.
            </summary>
            <seealso cref="T:System.Array"/>
        </member>
        <member name="M:System.ArrayExtensions.CollectionElementEquals``1(``0[],``0[],)">
            <inheritdoc cref="!:ImmutableArrayExtensions.CollectionElementEquals&lt;T&gt;(ImmutableArray&lt;T&gt;, ImmutableArray&lt;T&gt;, delegate*&lt;T, T, bool&gt;)"/>
        </member>
        <member name="M:System.ArrayExtensions.CollectionElementRefEquals``1(``0[],``0[],)">
            <inheritdoc cref="!:ImmutableArrayExtensions.CollectionElementRefEquals&lt;T&gt;(ImmutableArray&lt;T&gt;, ImmutableArray&lt;T&gt;, delegate*&lt;T, T, bool&gt;)"/>
        </member>
        <member name="M:System.ArrayExtensions.Zip``2(``0[],``1[])">
            <inheritdoc cref="M:System.Linq.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})"/>
            <param name="this">
            <inheritdoc cref="M:System.Linq.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" path="/param[@name='first']"/>
            </param>
            <param name="other">
            <inheritdoc cref="M:System.Linq.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" path="/param[@name='second']"/>
            </param>
        </member>
        <member name="T:System.Reflection.AssemblyExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <seealso cref="T:System.Reflection.Assembly"/>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetDerivedTypes(System.Reflection.Assembly,System.Type)">
            <summary>
            Gets all possible types derived from an <see langword="interface"/> type,
            or a base <see langword="class"/> type, in the specified assembly.
            </summary>
            <param name="this">The assembly to be checked.</param>
            <param name="baseType">The type as the base type.</param>
            <returns>All possible derived types.</returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetDerivedTypes``1(System.Reflection.Assembly)">
            <inheritdoc cref="M:System.Reflection.AssemblyExtensions.GetDerivedTypes(System.Reflection.Assembly,System.Type)"/>
            <typeparam name="TBase">The type as the base type.</typeparam>
            <param name="this"><inheritdoc/></param>
            <returns><inheritdoc/></returns>
        </member>
        <member name="T:System.Reflection.MemberInfoExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Reflection.MemberInfo"/> instances.
            </summary>
            <seealso cref="T:System.Reflection.MemberInfo"/>
        </member>
        <member name="M:System.Reflection.MemberInfoExtensions.GetGenericAttributeTypeArguments``1(``0,System.Type)">
            <summary>
            Gets the type arguments of the specified attribute type applied to the specified property.
            </summary>
            <typeparam name="T">The type of the member information.</typeparam>
            <param name="this">The <see cref="T:System.Reflection.MemberInfo"/> instance.</param>
            <param name="genericAttributeType">The generic attribute type.</param>
            <returns>The types of the generic type arguments.</returns>
        </member>
        <member name="M:System.Reflection.MemberInfoExtensions.GetCustomGenericAttribute``1(``0,System.Type)">
            <summary>
            <inheritdoc cref="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)" path="/summary"/>
            </summary>
            <typeparam name="T">The type of the member information.</typeparam>
            <param name="this">The <see cref="T:System.Reflection.MemberInfo"/> instance.</param>
            <param name="genericAttributeType">The generic attribute type.</param>
            <returns>
            <inheritdoc cref="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)" path="/returns"/>
            </returns>
        </member>
        <member name="T:System.Reflection.DefaultValueCreator">
            <summary>
            Represents a default value generator.
            </summary>
        </member>
        <member name="M:System.Reflection.DefaultValueCreator.CreateInstance(System.Type)">
            <summary>
            Creates an instance that is equivalent to <see langword="default"/>(<c>T</c>), where <c>T</c> is specified
            as a <see cref="T:System.Type"/> instance.
            </summary>
            <param name="type">The type instance.</param>
            <returns>The created result.</returns>
        </member>
        <member name="T:System.Reflection.ReflectionCopying">
            <summary>
            Provides a way to simplify the copying using reflection on cloneable types having implemented <see cref="T:System.ICloneable`1"/>.
            </summary>
            <seealso cref="T:System.ICloneable`1"/>
        </member>
        <member name="M:System.Reflection.ReflectionCopying.ReflectionClone``1(``0)">
            <summary>
            Defines a default clone method using reflection to copy all auto properties.
            </summary>
            <typeparam name="T">The type of the cloneable object. It must contain a parameterless constructor.</typeparam>
            <param name="this">The type of the instance to copy.</param>
            <returns>The copied result. The result has totally same value as <paramref name="this"/>.</returns>
        </member>
        <member name="M:System.Reflection.ReflectionCopying.ReflectionCover``1(``0,``0)">
            <summary>
            Copies and covers the current instance via the newer instance to copy all auto properties.
            </summary>
            <param name="this">The current instance to copy.</param>
            <param name="new">The newer instance to copy.</param>
        </member>
        <member name="T:System.DelegateExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Delegate"/>.
            </summary>
            <seealso cref="T:System.Delegate"/>
        </member>
        <member name="M:System.DelegateExtensions.GetInvocations``1(``0)">
            <summary>
            Returns the invocation list of the delegate.
            </summary>
            <typeparam name="T">The type of the delegate.</typeparam>
            <param name="this">The instance.</param>
            <returns>An array of delegates representing the invocation list of the current delegate.</returns>
        </member>
        <member name="T:System.DoubleExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Double"/>.
            </summary>
            <seealso cref="T:System.Double"/>
        </member>
        <member name="M:System.DoubleExtensions.NearlyEquals(System.Double,System.Double)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            </summary>
            <param name="this">The value.</param>
            <param name="other">The other value.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:System.DoubleExtensions.NearlyEquals(System.Double,System.Double,System.Double)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            If the differ of two values to compare is lower than the specified epsilon value,
            the method will return <see langword="true"/>.
            </summary>
            <param name="this">The value.</param>
            <param name="other">The other value to compare.</param>
            <param name="epsilon">The epsilon value (the minimal differ).</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:System.Linq.EnumerableExtensions">
            <summary>
            Provides a set of static methods for querying objects that implement
            <see cref="T:System.Collections.IEnumerable"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <remarks>This class has the same function and status with <see cref="T:System.Linq.Enumerable"/>.</remarks>
            <seealso cref="T:System.Collections.IEnumerable"/>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
            <seealso cref="T:System.Linq.Enumerable"/>
        </member>
        <member name="M:System.Linq.EnumerableExtensions.HasOnlyOneElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check whether the specified list has only one element.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="this">The list.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:System.Linq.ArrayEnumerable">
            <summary>
            Provides with the LINQ-related methods on type <see cref="T:System.Array"/>, especially for the one-dimensional array.
            </summary>
        </member>
        <member name="M:System.Linq.ArrayEnumerable.Select``2(``0[],System.Func{``0,``1})">
            <summary>
            <inheritdoc cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" path="/summary"/>
            </summary>
            <param name="this">
            <inheritdoc cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" path="/param[@name='source']"/>
            </param>
            <param name="selector">
            <inheritdoc cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" path="/param[@name='selector']"/>
            </param>
            <returns>
            A <typeparamref name="T"/>[] whose elements are the result of invoking the transform function on each element of <paramref name="this"/>.
            </returns>
        </member>
        <member name="M:System.Linq.ArrayEnumerable.SelectMany``3(``0[],System.Func{``0,``1[]},System.Func{``0,``1,``2})">
            <inheritdoc cref="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})"/>
        </member>
        <member name="M:System.Linq.ArrayEnumerable.Where``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="this">A (An) <typeparamref name="T"/>[] to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>A (An) <typeparamref name="T"/>[] that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="T:System.Linq.ArrayListEnumerable">
            <summary>
            Provides with extension methods on <see cref="T:System.Collections.ArrayList"/>.
            </summary>
            <seealso cref="T:System.Collections.ArrayList"/>
        </member>
        <member name="M:System.Linq.ArrayListEnumerable.Select``1(System.Collections.ArrayList,System.Func{System.Object,``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>
        </member>
        <member name="T:System.Linq.EnumFlagsEnumerable">
            <summary>
            Provides with some extension methods for enumeration types.
            </summary>
        </member>
        <member name="M:System.Linq.EnumFlagsEnumerable.Select``2(``0,System.Func{``0,``1})">
            <summary>
            Try to get all <typeparamref name="TEnum"/> elements as flags stored in argument <paramref name="this"/>,
            and convert them into an array of <typeparamref name="T"/> instances via specified argument <paramref name="selector"/>,
            then return the array.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <typeparam name="T">The type of the result elements.</typeparam>
            <param name="this">The enumeration type field.</param>
            <param name="selector">The selector that can convert the enumeration field into the target-typed instance.</param>
            <returns>An array of <typeparamref name="T"/> elements.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the enumeration type is not marked <see cref="T:System.FlagsAttribute"/>.
            </exception>
        </member>
        <member name="T:System.Linq.ImmutableArrayEnumerable">
            <summary>
            Provides with LINQ methods on <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.
            </summary>
        </member>
        <member name="M:System.Linq.ImmutableArrayEnumerable.Zip``2(System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``1})">
            <inheritdoc cref="M:System.Linq.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})"/>
        </member>
        <member name="T:System.Linq.SpanEnumerable">
            <summary>
            Provides LINQ-based extension methods on <see cref="T:System.Span`1"/> and <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <seealso cref="T:System.Span`1"/>
            <seealso cref="T:System.ReadOnlySpan`1"/>
        </member>
        <member name="M:System.Linq.SpanEnumerable.Select``2(System.Span{``0},System.Func{``0,``1})">
            <summary>
            The select method used in <see langword="from"/>-<see langword="in"/>-<see langword="select"/>
            clause.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="this">The list.</param>
            <param name="selector">The selector that is used for conversion.</param>
            <returns>The array of target result elements.</returns>
        </member>
        <member name="M:System.Linq.SpanEnumerable.Select``2(System.ReadOnlySpan{``0},System.Func{``0,``1})">
            <summary>
            The select method used in <see langword="from"/>-<see langword="in"/>-<see langword="select"/>
            clause.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="this">The list.</param>
            <param name="selector">The selector that is used for conversion.</param>
            <returns>The array of target result elements.</returns>
        </member>
        <member name="T:System.Linq.StringEnumerable">
            <summary>
            Provides with LINQ methods on a <see cref="T:System.String"/> value.
            </summary>
        </member>
        <member name="M:System.Linq.StringEnumerable.SplitByLength(System.String,System.Int32)">
            <summary>
            Splits the specified string value into multiple parts, with each part being a same length.
            </summary>
            <param name="this">The string to be split.</param>
            <param name="maxLength">The length to be split.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance with multiple parts of the string.</returns>
        </member>
        <member name="T:System.EnumExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Enum"/>.
            </summary>
            <seealso cref="T:System.Enum"/>
        </member>
        <member name="M:System.EnumExtensions.IsFlag``1(``0)">
            <summary>
            Checks whether the current enumeration field is a flag.
            </summary>
            <typeparam name="T">The type of the current field.</typeparam>
            <param name="this">The current field to check.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:System.EnumExtensions.GetAllFlags``1(``0)">
            <summary>
            To get all possible flags from a specified enumeration instance.
            </summary>
            <typeparam name="T">The type of that enumeration.</typeparam>
            <param name="this">The field.</param>
            <returns>
            All flags. If the enumeration field doesn't contain any flags, the return value will be <see langword="null"/>.
            </returns>
        </member>
        <member name="M:System.EnumExtensions.GetAllFlagsDistinct``1(``0)">
            <summary>
            <para><inheritdoc cref="M:System.EnumExtensions.GetAllFlags``1(``0)" path="/summary"/></para>
            <para>
            Different with method <see cref="M:System.EnumExtensions.GetAllFlags``1(``0)"/>, this method is used when an enumeration type <typeparamref name="T"/>
            contains duplicated values naming differently.
            </para>
            </summary>
            <typeparam name="T"><inheritdoc cref="M:System.EnumExtensions.GetAllFlags``1(``0)" path="/typeparam[@name='T']"/></typeparam>
            <param name="this"><inheritdoc cref="M:System.EnumExtensions.GetAllFlags``1(``0)" path="/param[@name='this']"/></param>
            <returns><inheritdoc cref="M:System.EnumExtensions.GetAllFlags``1(``0)" path="/returns"/></returns>
            <seealso cref="M:System.EnumExtensions.GetAllFlags``1(``0)"/>
        </member>
        <member name="M:System.EnumExtensions.Flags``1(``0,``0)">
            <summary>
            Determines whether one or more bit fields are set in the current instance.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="this">The current enumeration type instance.</param>
            <param name="other">The other instance to check.</param>
            <returns>
            <see langword="true"/> if the bit field or bit fields that are set in <paramref name="other"/>
            are also set in the current instance; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Throws when the used bytes aren't 1, 2 or 4.</exception>
        </member>
        <member name="M:System.EnumExtensions.MultiFlags``1(``0,``0)">
            <summary>
            Determines whether the instance has the flags specified as <paramref name="flags"/>.
            </summary>
            <typeparam name="T">The type of the enumeration field.</typeparam>
            <param name="this">The instance.</param>
            <param name="flags">All flags used.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:System.Int32Extensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Int32"/>.
            </summary>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:System.Int32Extensions.Seconds(System.Int32)">
            <summary>
            Gets the equivalent seconds of type <see cref="T:System.TimeSpan"/> from current integer value.
            </summary>
            <param name="this">The integer value.</param>
            <returns>The equivalent <see cref="T:System.TimeSpan"/> result.</returns>
        </member>
        <member name="M:System.Int32Extensions.Minutes(System.Int32)">
            <summary>
            Gets the equivalent minutes of type <see cref="T:System.TimeSpan"/> from current integer value.
            </summary>
            <param name="this">The integer value.</param>
            <returns>The equivalent <see cref="T:System.TimeSpan"/> result.</returns>
        </member>
        <member name="M:System.Int32Extensions.Days(System.Int32)">
            <summary>
            Gets the equivalent days of type <see cref="T:System.TimeSpan"/> from current integer value.
            </summary>
            <param name="this">The integer value.</param>
            <returns>The equivalent <see cref="T:System.TimeSpan"/> result.</returns>
        </member>
        <member name="T:System.Text.Json.JsonSerializerOptionsExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Text.Json.JsonSerializerOptions"/>.
            </summary>
            <seealso cref="T:System.Text.Json.JsonSerializerOptions"/>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptionsExtensions.GetConverter``2(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Returns the converter that supports the given type, or the <typeparamref name="TConverter"/>
            will be used when the property <see cref="P:System.Text.Json.JsonSerializerOptions.Converters"/>
            doesn't contain any valid converters.
            </summary>
            <typeparam name="T">The type to get converter.</typeparam>
            <typeparam name="TConverter">
            The type that is the converter type to convert the instance of type <typeparamref name="T"/>.
            </typeparam>
            <param name="this">The options to check the existence of the converter.</param>
            <returns>
            The converter that supports the given type, or the <typeparamref name="TConverter"/>
            will be used when the property <see cref="P:System.Text.Json.JsonSerializerOptions.Converters"/>
            doesn't contain any valid converters.
            </returns>
            <seealso cref="P:System.Text.Json.JsonSerializerOptions.Converters"/>
        </member>
        <member name="T:System.Text.Json.Utf8JsonReaderExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </summary>
            <seealso cref="T:System.Text.Json.Utf8JsonReader"/>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReaderExtensions.GetNestedObject``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            To read as a nested object in the JSON string stream.
            </summary>
            <typeparam name="T">The type of the instance to be deserialized.</typeparam>
            <param name="this">The <see cref="T:System.Text.Json.Utf8JsonReader"/> instance.</param>
            <param name="options">The options.</param>
        </member>
        <member name="T:System.Text.Json.Utf8JsonWriterExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Text.Json.Utf8JsonWriter"/>.
            </summary>
            <seealso cref="T:System.Text.Json.Utf8JsonWriter"/>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriterExtensions.WriteNestedObject``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            To write an object as nested one in the JSON string stream.
            </summary>
            <typeparam name="T">The type of the instance to be serialized.</typeparam>
            <param name="this">The <see cref="T:System.Text.Json.Utf8JsonWriter"/> instance.</param>
            <param name="instance">The instance to be serialized.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriterExtensions.WriteArray``1(System.Text.Json.Utf8JsonWriter,``0[],System.Text.Json.JsonSerializerOptions)">
            <summary>
            To write an array of element type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The <see cref="T:System.Text.Json.Utf8JsonWriter"/> instance.</param>
            <param name="array">The array.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriterExtensions.WriteStringValue(System.Text.Json.Utf8JsonWriter,System.Text.StringHandler@)">
            <summary>
            Writes a string text value specified as a <see cref="T:System.Text.StringHandler"/> instance as an element
            of a JSON array.
            </summary>
            <param name="this">The <see cref="T:System.Text.Json.Utf8JsonWriter"/> instance.</param>
            <param name="handler">The string handler.</param>
        </member>
        <member name="T:System.Text.Json.CommonSerializerOptions">
            <summary>
            Provides a list of <see cref="T:System.Text.Json.JsonSerializerOptions"/> instances that is used on default cases.
            </summary>
        </member>
        <member name="F:System.Text.Json.CommonSerializerOptions.PascalCasing">
            <summary>
            Creates a default option instance with:
            <list type="bullet">
            <item><see cref="P:System.Text.Json.JsonSerializerOptions.WriteIndented"/> is <see langword="true"/></item>
            <item><see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties"/> is <see langword="true"/></item>
            <item>
            <see cref="P:System.Text.Json.JsonSerializerOptions.Encoder"/> is <see cref="P:System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping"/>
            </item>
            <item><see cref="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling"/> is <see cref="F:System.Text.Json.JsonCommentHandling.Skip"/></item>
            </list>
            </summary>
        </member>
        <member name="T:System.Text.Json.EnumNameJsonConverter`1">
            <summary>
            Represents a type that can serialize a field from enumeration type <typeparamref name="T"/> into a JSON string,
            whose value is equivalent to the field's name.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
        </member>
        <member name="M:System.Text.Json.EnumNameJsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.Json.EnumNameJsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:System.Text.Json.PascalCaseJsonNamingPolicy">
            <summary>
            Defines the pascal casing JSON naming policy.
            </summary>
            <remarks>
            This type cannot be initialized; instead, you can use the property <see cref="P:System.Text.Json.PascalCaseJsonNamingPolicy.PascalCase"/> to get the instance.
            </remarks>
            <seealso cref="P:System.Text.Json.PascalCaseJsonNamingPolicy.PascalCase"/>
        </member>
        <member name="M:System.Text.Json.PascalCaseJsonNamingPolicy.#ctor">
            <summary>
            Initializes a <see cref="T:System.Text.Json.PascalCaseJsonNamingPolicy"/> instance.
            </summary>
        </member>
        <member name="P:System.Text.Json.PascalCaseJsonNamingPolicy.PascalCase">
            <summary>
            Gets the naming policy for pascal-casing.
            </summary>
            <returns>The naming policy for pascal-casing.</returns>
        </member>
        <member name="M:System.Text.Json.PascalCaseJsonNamingPolicy.ConvertName(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:System.Text.StringBuilderExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <seealso cref="T:System.Text.StringBuilder"/>
        </member>
        <member name="M:System.Text.StringBuilderExtensions.RemoveFrom(System.Text.StringBuilder,System.Int32)">
            <summary>
            Remove all characters behind the character whose index is specified.
            </summary>
            <param name="this">The instance to remove characters.</param>
            <param name="startIndex">The start index.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:System.Text.StringBuilderExtensions.RemoveFrom(System.Text.StringBuilder,System.Index@)">
            <summary>
            Remove all characters behind the character whose index is specified.
            </summary>
            <param name="this">The instance to remove characters.</param>
            <param name="startIndex">The start index.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="T:System.Text.StringHandlerExtensions">
            <summary>
            Provides the extension methods on <see cref="T:System.Text.StringHandler"/>.
            </summary>
            <seealso cref="T:System.Text.StringHandler"/>
        </member>
        <member name="M:System.Text.StringHandlerExtensions.AppendWhen(System.Text.StringHandler@,System.Boolean,System.String)">
            <summary>
            Append the content into the handler if the specified condition is satisfied.
            </summary>
            <param name="this">The handler.</param>
            <param name="condition">The condition.</param>
            <param name="value">The value to append.</param>
        </member>
        <member name="M:System.Text.StringHandlerExtensions.AppendRangeWithSeparatorUnsafe``1(System.Text.StringHandler@,``0,,System.String)">
            <summary>
            Append a serial of strings converted from a serial of elements.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The handler.</param>
            <param name="enumFlags">The list of enumeration flags.</param>
            <param name="converter">
            The converter that allows the instance to convert into the <see cref="T:System.String"/> representation,
            whose the rule is defined as a method specified as the function pointer as this argument.
            </param>
            <param name="separator">The separator.</param>
        </member>
        <member name="T:System.Text.RegularExpressions.MatchCollectionEnumerable">
            <summary>
            Provides LINQ-based extension methods on <see cref="T:System.Text.RegularExpressions.MatchCollection"/>.
            </summary>
            <seealso cref="T:System.Text.RegularExpressions.MatchCollection"/>
        </member>
        <member name="M:System.Text.RegularExpressions.MatchCollectionEnumerable.Select``1(System.Text.RegularExpressions.MatchCollection,System.Func{System.Text.RegularExpressions.Match,``0})">
            <summary>
            The select method used in <see langword="from"/>-<see langword="in"/>-<see langword="select"/>
            clause.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="this">The list.</param>
            <param name="selector">The selector that is used for conversion.</param>
            <returns>The array of target result elements.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utf8IdentifierPattern_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Utf8IdentifierPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utf8IdentifierPattern_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utf8IdentifierPattern_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utf8IdentifierPattern_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utf8IdentifierPattern_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utf8IdentifierPattern_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utf8IdentifierPattern_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utf8IdentifierPattern_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utf8IdentifierPattern_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CommandArgumentsPattern_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CommandArgumentsPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CommandArgumentsPattern_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CommandArgumentsPattern_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CommandArgumentsPattern_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CommandArgumentsPattern_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CommandArgumentsPattern_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CommandArgumentsPattern_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CommandArgumentsPattern_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CommandArgumentsPattern_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NullLinesOrHeaderSpacesPattern_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NullLinesOrHeaderSpacesPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NullLinesOrHeaderSpacesPattern_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NullLinesOrHeaderSpacesPattern_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NullLinesOrHeaderSpacesPattern_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NullLinesOrHeaderSpacesPattern_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NullLinesOrHeaderSpacesPattern_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NullLinesOrHeaderSpacesPattern_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NullLinesOrHeaderSpacesPattern_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsWordChar(System.Char)">
            <summary>Determines whether the character is part of the [\w] set.</summary>
        </member>
        <member name="T:System.Text.StringHandler">
            <summary>
            <para>
            Provides a handler used on two cases:
            <list type="bullet">
            <item>By the language compiler to process interpolated strings into <see cref="T:System.String"/> instances.</item>
            <item>
            As a <see cref="T:System.String"/> builder to append and catenate multiple <see cref="T:System.String"/>s to a whole one.
            </item>
            </list>
            </para>
            <para>
            Different with <see cref="T:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler"/>, this type won't contain
            any formatters to construct any custom format operations, i.e. using <see cref="T:System.IFormatProvider"/>.
            </para>
            </summary>
            <remarks>
            You can use this type like this:
            <code><![CDATA[
            scoped var sb = new StringHandler(initialCapacity: 100);
            sb.Append("Hello");
            sb.Append(',');
            sb.Append("World");
            sb.Append('!');
            
            Console.WriteLine(sb.ToStringAndClear());
            ]]></code>
            </remarks>
            <seealso cref="T:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler"/>
            <seealso cref="T:System.IFormatProvider"/>
        </member>
        <member name="F:System.Text.StringHandler.GuessedLengthPerHole">
            <summary>
            Expected average length of formatted data used for an individual interpolation expression result.
            </summary>
            <remarks>
            <para>
            This is inherited from <see cref="M:System.String.Format(System.String,System.Object[])"/>,
            and could be changed based on further data.
            </para>
            <para>
            <see cref="M:System.String.Format(System.String,System.Object[])"/> actually uses <c>format.Length + args.Length * 8</c>,
            but <c>format.Length</c> includes the format items themselves, e.g. <c>"{0}"</c>,
            and since it's rare to have double-digit numbers of items, we bump the 8 up to 11 to account
            for the three extra characters in <c>"{d}"</c>, since the compiler-provided base length won't include
            the equivalent character count.
            </para>
            <para><i>The original value implemented by .NET foundation is 11, but I change it to 8.</i></para>
            </remarks>
            <seealso cref="M:System.String.Format(System.String,System.Object[])"/>
        </member>
        <member name="F:System.Text.StringHandler.MinimumArrayPoolLength">
            <summary>
            Minimum size array to rent from the pool.
            </summary>
            <remarks>
            Same as stack-allocation size used today by <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </remarks>
            <seealso cref="M:System.String.Format(System.String,System.Object[])"/>
        </member>
        <member name="F:System.Text.StringHandler._arrayToReturnToPool">
            <summary>
            Array rented from the array pool and used to back <see cref="F:System.Text.StringHandler._chars"/>.
            </summary>
        </member>
        <member name="F:System.Text.StringHandler._chars">
            <summary>
            The span to write into.
            </summary>
        </member>
        <member name="M:System.Text.StringHandler.#ctor">
            <summary>
            Creates a handler used to translate an interpolated string into a <see cref="T:System.String" />,
            with the default-sized buffer 256.
            </summary>
            <remarks>
            <target name="constructor">
				<i>
					The feature "Custom parameterless struct constructor" makes the parameterless struct constructor
					different with <c>default(T)</c>. If you has defined a parameterless struct constructor,
					<c>new T()</c> is no longer with the same meaning as <c>default(T)</c>.
				</i>
			</target>
            </remarks>
        </member>
        <member name="M:System.Text.StringHandler.#ctor(System.Int32)">
            <summary>
            Creates a handler used to translate an interpolated string into a <see cref="T:System.String"/>.
            </summary>
            <param name="initialCapacity">The number of constant characters as the default memory to initialize.</param>
        </member>
        <member name="M:System.Text.StringHandler.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a handler used to translate an interpolated string into a <see cref="T:System.String"/>.
            </summary>
            <param name="literalLength">
            The number of constant characters outside of interpolation expressions in the interpolated string.
            </param>
            <param name="holeCount">The number of interpolation expressions in the interpolated string.</param>
            <remarks>
            This is intended to be called only by compiler-generated code.
            Arguments aren't validated as they'd otherwise be for members intended to be used directly.
            </remarks>
        </member>
        <member name="M:System.Text.StringHandler.#ctor(System.Int32,System.Int32,System.Span{System.Char})">
            <summary>
            Creates a handler used to translate an interpolated string into a <see cref="T:System.String"/>.
            </summary>
            <param name="literalLength">
            The number of constant characters outside of interpolation expressions in the interpolated string.
            </param>
            <param name="holeCount">The number of interpolation expressions in the interpolated string.</param>
            <param name="initialBuffer">
            A buffer temporarily transferred to the handler for use as part of its formatting.
            Contents may be overwritten.
            </param>
            <remarks>
            This is intended to be called only by compiler-generated code.
            Arguments are not validated as they'd otherwise be for members intended to be used directly.
            </remarks>
        </member>
        <member name="M:System.Text.StringHandler.#ctor(System.String)">
            <summary>
            Creates a handler used to translate an interpolated string into a <see cref="T:System.String"/>
            that is initialized by a string value.
            </summary>
            <param name="initialString">The initialized string.</param>
        </member>
        <member name="P:System.Text.StringHandler.Length">
            <summary>
            Position at which to write the next character.
            </summary>
        </member>
        <member name="P:System.Text.StringHandler.Text">
            <summary>
            Gets a span of the written characters thus far.
            </summary>
        </member>
        <member name="P:System.Text.StringHandler.Item(System.Int32)">
            <summary>
            Gets the reference of a character at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The reference of the character.</returns>
            <remarks>
            <target name="indexer-return">
				<i>
					This indexer returns a value by <see langword="ref" />,
					which means you can use the return value to re-assign a new value, as the same behavior
					as the <see langword="set" /> accessor, therefore the indexer does not contain the setter.
				</i>
			</target>
            </remarks>
        </member>
        <member name="M:System.Text.StringHandler.CopyTo(System.Text.StringHandler@)">
            <summary>
            Copies the current collection into the specified collection.
            </summary>
            <param name="handler">The collection.</param>
        </member>
        <member name="M:System.Text.StringHandler.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:System.Text.StringHandler.Equals(System.Text.StringHandler)">
            <summary>
            Determine whether the specified <see cref="T:System.Text.StringHandler"/> instance hold a same character set
            as the current instance.
            </summary>
            <param name="other">The instance to compare.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:System.Text.StringHandler.GetPinnableReference">
            <target name="method">
				<summary>
					Returns a reference as the fixed position of the current instance.
					For example, the return value will be the pointer value that points to the zero-indexed
					place in an array.
				</summary>
				<returns>A reference as the fixed position of the current instance.</returns>
				<remarks>
					Beginning with C# 7, we can customize the return value type of a <see langword="fixed" /> variable
					if we implement a parameterless method called <c>GetPinnableReference</c>, returning by
					<see langword="ref" /> or <see langword="ref readonly" />. For example, if we hold a fixed buffer
					of element type:
					<code>
<![CDATA[
class ExampleType
{
    private fixed short _maskList[100];

    public ref readonly short GetPinnableReference() => ref _maskList[0];
}
]]>
					</code>
					We can use <see langword="fixed" /> statement to define a variable of type <see langword="short" />*
					as the left-value.
					<code>
<![CDATA[
var instance = new ExampleType();
fixed (short* ptr = instance)
{
    // Operation here.
}
]]>
					</code>
				</remarks>
			</target>
        </member>
        <member name="M:System.Text.StringHandler.GetPinnableReference(System.Boolean)">
            <summary>
            Get a pinnable reference to the builder.
            </summary>
            <param name="withTerminate">
            Ensures that the builder has a null character after <see cref="P:System.Text.StringHandler.Length"/>.
            </param>
            <seealso cref="P:System.Text.StringHandler.Length"/>
        </member>
        <member name="M:System.Text.StringHandler.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:System.Text.StringHandler.ToString">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.StringHandler.GetEnumerator">
            <summary>
            Gets the enumerator of the current instance in order to use <see langword="foreach"/> loop.
            </summary>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="M:System.Text.StringHandler.AppendLiteral(System.String)">
            <summary>
            Writes the specified string to the handler.
            </summary>
            <param name="value">The string to write.</param>
            <remarks>
            <para>
            <see cref="M:System.Text.StringHandler.AppendLiteral(System.String)"/> is expected to always be called by compiler-generated code
            with a literal string. By inlining it, the method body is exposed to the constant length of that literal,
            allowing the JIT to prune away the irrelevant cases.
            This effectively enables multiple implementations of <see cref="M:System.Text.StringHandler.AppendLiteral(System.String)"/>,
            special-cased on and optimized for the literal's length.
            </para>
            <para>
            We special-case lengths 1 and 2 because they're very common, e.g.
            <list type="number">
            <item><c>' '</c>, <c>'.'</c>, <c>'-'</c>, <c>'\t'</c>, etc.</item>
            <item><c>", "</c>, <c>"0x"</c>, <c>"=>"</c>, <c>": "</c>, etc.</item>
            </list>
            but we refrain from adding more because, in the rare case where <see cref="M:System.Text.StringHandler.AppendLiteral(System.String)"/>
            is called with a non-literal, there is a lot of code here to be inlined.
            </para>
            </remarks>
        </member>
        <member name="M:System.Text.StringHandler.Append(System.Object,System.Int32,System.String)">
            <inheritdoc cref="M:System.Text.StringHandler.AppendFormatted(System.Object,System.Int32,System.String)"/>
        </member>
        <member name="M:System.Text.StringHandler.Append(System.Char)">
            <summary>
            Append a character at the tail of the collection.
            </summary>
            <param name="c">The character.</param>
        </member>
        <member name="M:System.Text.StringHandler.Append(System.Char,System.Int32)">
            <summary>
            Append a serial of same characters into the collection.
            </summary>
            <param name="c">The character.</param>
            <param name="count">The number of the character you want to append.</param>
        </member>
        <member name="M:System.Text.StringHandler.Append(System.Char*,System.Int32)">
            <summary>
            Append a string that is represented as a <see cref="T:System.Char"/>*.
            </summary>
            <param name="value">The string.</param>
            <param name="length">The length of the string.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws when the argument <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.StringHandler.Append(System.String)">
            <inheritdoc cref="M:System.Text.StringHandler.AppendFormatted(System.String)"/>
        </member>
        <member name="M:System.Text.StringHandler.Append(System.String,System.Int32,System.String)">
            <inheritdoc cref="M:System.Text.StringHandler.AppendFormatted(System.String,System.Int32,System.String)"/>
        </member>
        <member name="M:System.Text.StringHandler.Append(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.Text.StringHandler.AppendFormatted(System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:System.Text.StringHandler.Append(System.ReadOnlySpan{System.Char},System.Int32,System.String)">
            <inheritdoc cref="M:System.Text.StringHandler.AppendFormatted(System.ReadOnlySpan{System.Char},System.Int32,System.String)"/>
        </member>
        <member name="M:System.Text.StringHandler.Append``1(``0)">
            <inheritdoc cref="M:System.Text.StringHandler.AppendFormatted``1(``0)"/>
        </member>
        <member name="M:System.Text.StringHandler.Append``1(``0,System.Int32)">
            <inheritdoc cref="M:System.Text.StringHandler.AppendFormatted``1(``0,System.Int32)"/>
        </member>
        <member name="M:System.Text.StringHandler.Append``1(``0,System.String)">
            <inheritdoc cref="M:System.Text.StringHandler.AppendFormatted``1(``0,System.String)"/>
        </member>
        <member name="M:System.Text.StringHandler.Append``1(``0,System.Int32,System.String)">
            <inheritdoc cref="M:System.Text.StringHandler.AppendFormatted``1(``0,System.Int32,System.String)"/>
        </member>
        <member name="M:System.Text.StringHandler.AppendLine">
            <summary>
            Append a new line string <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <seealso cref="P:System.Environment.NewLine"/>
        </member>
        <member name="M:System.Text.StringHandler.AppendCharacters(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Append a serial of characters at the tail of the collection.
            </summary>
            <param name="chars">The serial of characters.</param>
        </member>
        <member name="M:System.Text.StringHandler.AppendRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Append a serial of strings from a serial of elements.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="list">The list of elements.</param>
        </member>
        <member name="M:System.Text.StringHandler.AppendRange``1(System.Collections.Generic.IEnumerable{``0},)">
            <summary>
            Append a serial of strings converted from a serial of elements.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="list">The list of elements.</param>
            <param name="converter">
            The converter that allows the instance to convert into the <see cref="T:System.String"/> representation,
            whose the rule is defined as a method specified as the function pointer as this argument.
            </param>
        </member>
        <member name="M:System.Text.StringHandler.AppendRange``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Append a serial of strings converted from a serial of elements.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="list">The list of elements.</param>
            <param name="converter">
            The converter that allows the instance to convert into the <see cref="T:System.String"/> representation,
            whose the rule is defined as a method specified as the delegate instance as this argument.
            </param>
        </member>
        <member name="M:System.Text.StringHandler.AppendRangeWithSeparator``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Append a serial of strings from a serial of elements.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="list">The list of elements.</param>
            <param name="separator">The separator to append when an element is finished to append.</param>
        </member>
        <member name="M:System.Text.StringHandler.AppendRangeWithSeparator``1(System.Collections.Generic.IEnumerable{``0},,System.String)">
            <summary>
            Append a serial of strings converted from a serial of elements.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="list">The list of elements.</param>
            <param name="converter">
            The converter that allows the instance to convert into the <see cref="T:System.String"/> representation,
            whose the rule is defined as a method specified as the function pointer as this argument.
            </param>
            <param name="separator">The separator to append when an element is finished to append.</param>
        </member>
        <member name="M:System.Text.StringHandler.AppendRangeWithSeparator``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Append a serial of strings converted from a serial of elements.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="list">The list of elements.</param>
            <param name="converter">
            The converter that allows the instance to convert into the <see cref="T:System.String"/> representation,
            whose the rule is defined as a method specified as the delegate instance as this argument.
            </param>
            <param name="separator">The separator to append when an element is finished to append.</param>
        </member>
        <member name="M:System.Text.StringHandler.AppendRangeWithSeparatorRef``1(``0*,System.Int32,,System.String)">
            <summary>
            Append a serial of strings converted from a serial of elements.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="list">The list of elements that is represented as a pointer.</param>
            <param name="length">The length of the list.</param>
            <param name="converter">
            The converter that allows the instance to convert into the <see cref="T:System.String"/> representation,
            whose the rule is defined as a method specified as the delegate instance as this argument.
            </param>
            <param name="separator">The separator to append when an element is finished to append.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws when the argument <paramref name="list"/> or <paramref name="converter"/>
            is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.StringHandler.AppendRangeWithSeparatorRef``1(``0*,System.Int32,System.Func{``0,System.String},System.String)">
            <summary>
            Append a serial of strings converted from a serial of elements.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="list">The list of elements that is represented as a pointer.</param>
            <param name="length">The length of the list.</param>
            <param name="converter">
            The converter that allows the instance to convert into the <see cref="T:System.String"/> representation,
            whose the rule is defined as a method specified as the delegate instance as this argument.
            </param>
            <param name="separator">The separator to append when an element is finished to append.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws when the argument <paramref name="list"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.StringHandler.AppendRangeWithSeparatorRef``1(``0@,System.Int32,,System.String)">
            <summary>
            Append a serial of strings converted from a serial of elements.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="list">The list of elements that is represented as a pointer.</param>
            <param name="length">The length of the list.</param>
            <param name="converter">
            The converter that allows the instance to convert into the <see cref="T:System.String"/> representation,
            whose the rule is defined as a method specified as the delegate instance as this argument.
            </param>
            <param name="separator">The separator to append when an element is finished to append.</param>
            <exception cref="T:System.ArgumentNullRefException">
            Throws when the argument <paramref name="list"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Throws when the argument <paramref name="converter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.StringHandler.AppendRangeWithSeparatorRef``1(``0@,System.Int32,System.Text.StringHandlerRefAppender{``0},System.String)">
            <summary>
            Append a serial of strings converted from a serial of elements.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="list">The list of elements that is represented as a pointer.</param>
            <param name="length">The length of the list.</param>
            <param name="converter">
            The converter that allows the instance to convert into the <see cref="T:System.String"/> representation,
            whose the rule is defined as a method specified as the delegate instance as this argument.
            </param>
            <param name="separator">The separator to append when an element is finished to append.</param>
            <exception cref="T:System.ArgumentNullRefException">
            Throws when the argument <paramref name="list"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.StringHandler.AppendRangeWithLines``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Append a series of elements into the current collection.
            In addition, new line characters will be inserted after each element.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="list">The list.</param>
        </member>
        <member name="M:System.Text.StringHandler.AppendLargeObjectFormatted``1(``0@)">
            <summary>
            Writes the specified large-object value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <typeparam name="T">The type of the value to write.</typeparam>
        </member>
        <member name="M:System.Text.StringHandler.AppendLargeObjectFormatted``1(``0@,System.String)">
            <summary>
            Writes the specified large-object value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <param name="format">The format string.</param>
            <typeparam name="T">The type of the value to write.</typeparam>
        </member>
        <member name="M:System.Text.StringHandler.AppendLargeObjectFormatted``1(``0@,System.Int32)">
            <summary>
            Writes the specified value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <param name="alignment">
            Minimum number of characters that should be written for this value.
            If the value is negative, it indicates left-aligned and the required minimum is the absolute value.
            </param>
            <typeparam name="T">The type of the value to write.</typeparam>
        </member>
        <member name="M:System.Text.StringHandler.AppendLargeObjectFormatted``1(``0@,System.Int32,System.String)">
            <summary>
            Writes the specified large-object value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <param name="format">The format string.</param>
            <param name="alignment">
            Minimum number of characters that should be written for this value.
            If the value is negative, it indicates left-aligned and the required minimum is the absolute value.
            </param>
            <typeparam name="T">The type of the value to write.</typeparam>
        </member>
        <member name="M:System.Text.StringHandler.AppendFormatted(System.Object,System.Int32,System.String)">
            <summary>
            Writes the specified value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <param name="alignment">
            Minimum number of characters that should be written for this value.
            If the value is negative, it indicates left-aligned and the required minimum is the absolute value.
            </param>
            <param name="format">The format string.</param>
            <remarks>
            This overload is expected to be used rarely, only if either:
            <list type="bullet">
            <item>
            a) something strongly typed as <see cref="T:System.Object"/> is formatted with both an alignment and a format.
            </item>
            <item>
            b) the compiler is unable to target type to <c>T</c>.
            </item>
            </list>
            It exists purely to help make cases from (b) compile. Just delegate to the <c>T</c>-based implementation.
            </remarks>
        </member>
        <member name="M:System.Text.StringHandler.AppendFormatted(System.String)">
            <summary>
            Writes the specified value to the handler.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Text.StringHandler.AppendFormatted(System.String,System.Int32,System.String)">
            <summary>
            Writes the specified value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <param name="alignment">
            Minimum number of characters that should be written for this value.
            If the value is negative, it indicates left-aligned and the required minimum is the absolute value.
            </param>
            <param name="format">The format string.</param>
            <remarks>
            Format is meaningless for strings and doesn't make sense for someone to specify.
            We have the overload simply to disambiguate between <c><![CDATA[ReadOnlySpan<char>]]></c>
            and <see cref="T:System.Object"/>, just in case someone does specify a format,
            as <see cref="T:System.String"/> is implicitly convertible to both.
            Just delegate to the <c>T</c>-based implementation.
            </remarks>
        </member>
        <member name="M:System.Text.StringHandler.AppendFormatted(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the specified character span to the handler.
            </summary>
            <param name="value">The span to write.</param>
        </member>
        <member name="M:System.Text.StringHandler.AppendFormatted(System.ReadOnlySpan{System.Char},System.Int32,System.String)">
            <summary>
            Writes the specified string of chars to the handler.
            </summary>
            <param name="value">The span to write.</param>
            <param name="alignment">
            Minimum number of characters that should be written for this value.
            If the value is negative, it indicates left-aligned and the required minimum is the absolute value.
            </param>
            <param name="format">The format string.</param>
        </member>
        <member name="M:System.Text.StringHandler.AppendFormatted(System.Text.StringHandler)">
            <summary>
            Writes the specified interpolated string into the handler.
            </summary>
            <param name="handler">The handler that creates the interpolated string as this argument.</param>
        </member>
        <member name="M:System.Text.StringHandler.AppendFormatted``1(``0)">
            <summary>
            Writes the specified value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <typeparam name="T">The type of the value to write.</typeparam>
        </member>
        <member name="M:System.Text.StringHandler.AppendFormatted``1(``0,System.String)">
            <summary>
            Writes the specified value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <param name="format">The format string.</param>
            <typeparam name="T">The type of the value to write.</typeparam>
        </member>
        <member name="M:System.Text.StringHandler.AppendFormatted``1(``0,System.Int32)">
            <summary>
            Writes the specified value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <param name="alignment">
            Minimum number of characters that should be written for this value.
            If the value is negative, it indicates left-aligned and the required minimum is the absolute value.
            </param>
            <typeparam name="T">The type of the value to write.</typeparam>
        </member>
        <member name="M:System.Text.StringHandler.AppendFormatted``1(``0,System.Int32,System.String)">
            <summary>
            Writes the specified value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <param name="format">The format string.</param>
            <param name="alignment">
            Minimum number of characters that should be written for this value.
            If the value is negative, it indicates left-aligned and the required minimum is the absolute value.
            </param>
            <typeparam name="T">The type of the value to write.</typeparam>
        </member>
        <member name="M:System.Text.StringHandler.Reverse">
            <summary>
            Reverse the instance. For example, if the handler holds a string <c>"Hello"</c>,
            after called this method, the string will be <c>"olleH"</c>.
            </summary>
        </member>
        <member name="M:System.Text.StringHandler.Insert(System.Int32,System.Char,System.Int32)">
            <summary>
            Inserts a new character into the collection at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The character you want to insert into the collection.</param>
            <param name="count">The number.</param>
        </member>
        <member name="M:System.Text.StringHandler.Insert(System.Int32,System.String)">
            <summary>
            Inserts a new string into the collection at the specified index.
            </summary>
            <param name="index">The index you want to insert.</param>
            <param name="s">The string you want to insert.</param>
        </member>
        <member name="M:System.Text.StringHandler.Remove(System.Int32,System.Int32)">
            <summary>
            Remove a serial of characters from the specified index, with the specified length.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="length">The length you want to remove.</param>
            <remarks>
            This method will be costly (move a lot of elements), so you shouldn't call this method usually.
            </remarks>
        </member>
        <member name="M:System.Text.StringHandler.RemoveFromEnd(System.Int32)">
            <summary>
            Removes the specified number of characters from the end of the collection.
            </summary>
            <param name="length">The number of characters you want to remove.</param>
            <remarks>
            This method can be used for removing the last separator in a whole string, split by separators.
            For example:
            <code><![CDATA[
            const string separator = ", "; // Defines a separator.
            
            scoped var sb = new StringHandler(); // Creates a string concatenator.
            foreach (int element in list)
            {
                sb.Append(element); // Append the element.
                sb.Append(separator); // Append the separator.
            }
            
            // Use the method 'RemoveFromEnd' to remove the last separator.
            sb.RemoveFromEnd(separator.Length);
            
            // Get the final string value and release the temporarily allocated memory.
            return sb.ToStringAndClear();
            ]]></code>
            </remarks>
        </member>
        <member name="M:System.Text.StringHandler.ToStringAndClear">
            <summary>
            Gets the built <see cref="T:System.String"/> and clears the handler.
            </summary>
            <returns>The built string.</returns>
            <remarks>
            This releases any resources used by the handler. The method should be invoked only
            once and as the last thing performed on the handler. Subsequent use is erroneous, ill-defined,
            and may destabilize the process, as may using any other copies of the handler after
            <see cref="M:System.Text.StringHandler.ToStringAndClear"/> is called on any one of them.
            </remarks>
        </member>
        <member name="M:System.Text.StringHandler.Dispose">
            <summary>
            To dispose the object, releasing the memory allocated temporarily.
            </summary>
        </member>
        <member name="M:System.Text.StringHandler.AppendStringDirect(System.String)">
            <summary>
            Writes the specified string to the handler.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:System.Text.StringHandler.Clear">
            <summary>
            Clears the handler, returning any rented array to the pool.
            </summary>
        </member>
        <member name="M:System.Text.StringHandler.AppendFormattedSlow(System.String)">
            <summary>Writes the specified value to the handler.</summary>
            <param name="value">The value to write.</param>
            <remarks>
            Slow path to handle a custom formatter, potentially null value,
            or a string that doesn't fit in the current buffer.
            </remarks>
        </member>
        <member name="M:System.Text.StringHandler.AppendOrInsertAlignmentIfNeeded(System.Int32,System.Int32)">
            <summary>
            Handles adding any padding required for aligning a formatted value in an interpolation expression.
            </summary>
            <param name="startingPos">The position at which the written value started.</param>
            <param name="alignment">
            Non-zero minimum number of characters that should be written for this value.
            If the value is negative, it indicates left-aligned and the required minimum is the absolute value.
            </param>
        </member>
        <member name="M:System.Text.StringHandler.EnsureCapacityForAdditionalChars(System.Int32)">
            <summary>
            Ensures <see cref="F:System.Text.StringHandler._chars"/> has the capacity to store <paramref name="additionalChars"/>
            beyond <see cref="P:System.Text.StringHandler.Length"/>.
            </summary>
        </member>
        <member name="M:System.Text.StringHandler.GrowThenCopyString(System.String)">
            <summary>
            Fallback for fast path in <see cref="M:System.Text.StringHandler.AppendStringDirect(System.String)"/>
            when there's not enough space in the destination.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:System.Text.StringHandler.GrowThenCopySpan(System.ReadOnlySpan{System.Char})">
            <summary>
            Fallback for <see cref="M:System.Text.StringHandler.AppendFormatted(System.ReadOnlySpan{System.Char})"/> for when not enough space exists
            in the current buffer.
            </summary>
            <param name="value">The span to write.</param>
        </member>
        <member name="M:System.Text.StringHandler.Grow(System.Int32)">
            <summary>
            Grows <see cref="F:System.Text.StringHandler._chars"/> to have the capacity to store at least <paramref name="additionalChars"/>
            beyond <see cref="P:System.Text.StringHandler.Length"/>.
            </summary>
            <remarks>
            This method is called when the remaining space <c>_chars.Length - _pos</c> is
            insufficient to store a specific number of additional characters.
            Thus, we need to grow to at least that new total. <see cref="M:System.Text.StringHandler.GrowCore(System.UInt32)"/>
            will handle growing by more than that if possible.
            </remarks>
            <seealso cref="M:System.Text.StringHandler.GrowCore(System.UInt32)"/>
        </member>
        <member name="M:System.Text.StringHandler.Grow">
            <summary>
            Grows the size of <see cref="F:System.Text.StringHandler._chars"/>.
            </summary>
            <remarks>
            This method is called when the remaining space in <c>_chars</c> isn't sufficient to continue
            the operation. Thus, we need at least one character beyond <c>_chars.Length</c>.
            <see cref="M:System.Text.StringHandler.GrowCore(System.UInt32)"/> will handle growing by more than that if possible.
            </remarks>
            <seealso cref="M:System.Text.StringHandler.GrowCore(System.UInt32)"/>
        </member>
        <member name="M:System.Text.StringHandler.GrowCore(System.UInt32)">
            <summary>
            Grow the size of <see cref="F:System.Text.StringHandler._chars"/> to at least the specified <paramref name="requiredMinCapacity"/>.
            </summary>
            <param name="requiredMinCapacity">The required minimum capacity.</param>
            <remarks>
            <para>Design notes:</para>
            <para>
            We want the max of how much space we actually required and doubling our capacity (without going
            beyond the max allowed length). We also want to avoid asking for small arrays,
            to reduce the number of times we need to grow, and since we're working with unsigned integers
            that could technically overflow if someone tried to, for example, append a huge string
            to a huge string, we also clamp to <see cref="F:System.Int32.MaxValue"/>. Even if the array creation
            fails in such a case, we may later fail in <see cref="M:System.Text.StringHandler.ToStringAndClear"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Text.StringHandler.Equals(System.Text.StringHandler,System.Text.StringHandler)">
            <summary>
            Determines whether two instances has same values with the other instance.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:System.Text.StringHandler.ElementToStringConverter``1(``0)">
            <summary>
            Provides with the default way to convert the specified instance of type <see cref="T:System.Int16"/>
            into a <see cref="T:System.String"/> value.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="this">The instance.</param>
            <returns>The <see cref="T:System.String"/> value.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the argument <paramref name="this"/> return <see langword="null"/>
            as the <c>ToString</c> method result.
            </exception>
            <remarks>
            You can put this method as the argument into the method invocation
            <see cref="!:AppendRangeWithSeparatorUnsafe&lt;T&gt;(T*, int, delegate*&lt;T, string?&gt;, string)"/>
            or <see cref="M:System.Text.StringHandler.AppendRangeWithSeparatorRef``1(``0*,System.Int32,System.Func{``0,System.String},System.String)"/>.
            </remarks>
            <seealso cref="!:AppendRangeWithSeparatorUnsafe&lt;T&gt;(T*, int, delegate*&lt;T, string?&gt;, string)"/>
            <seealso cref="M:System.Text.StringHandler.AppendRangeWithSeparatorRef``1(``0*,System.Int32,System.Func{``0,System.String},System.String)"/>
        </member>
        <member name="M:System.Text.StringHandler.ElementToStringConverter``1(``0@)">
            <summary>
            Provides with the default way to convert the specified instance of type <see cref="T:System.Int16"/>
            into a <see cref="T:System.String"/> value.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="this">The instance.</param>
            <returns>The <see cref="T:System.String"/> value.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the argument <paramref name="this"/> return <see langword="null"/>
            as the <c>ToString</c> method result.
            </exception>
            <remarks>
            You can put this method as the argument into the method invocation
            <see cref="!:AppendRangeWithSeparatorUnsafe&lt;T&gt;(in T, int, delegate*&lt;in T, string?&gt;, string)"/>
            or <see cref="M:System.Text.StringHandler.AppendRangeWithSeparatorRef``1(``0@,System.Int32,System.Text.StringHandlerRefAppender{``0},System.String)"/>.
            </remarks>
            <seealso cref="!:AppendRangeWithSeparatorUnsafe&lt;T&gt;(in T, int, delegate*&lt;in T, string?&gt;, string)"/>
            <seealso cref="M:System.Text.StringHandler.AppendRangeWithSeparatorRef``1(``0@,System.Int32,System.Text.StringHandlerRefAppender{``0},System.String)"/>
        </member>
        <member name="M:System.Text.StringHandler.op_Equality(System.Text.StringHandler,System.Text.StringHandler)">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.StringHandler.op_Inequality(System.Text.StringHandler,System.Text.StringHandler)">
            <inheritdoc/>
        </member>
        <member name="T:System.Text.StringHandler.Enumerator">
            <summary>
            Encapsulates the enumerator of this collection.
            </summary>
        </member>
        <member name="F:System.Text.StringHandler.Enumerator._length">
            <summary>
            Indicates the length.
            </summary>
        </member>
        <member name="F:System.Text.StringHandler.Enumerator._index">
            <summary>
            Indicates whether 
            </summary>
        </member>
        <member name="F:System.Text.StringHandler.Enumerator._ptr">
            <summary>
            Indicates the pointer that points to the current character.
            </summary>
        </member>
        <member name="M:System.Text.StringHandler.Enumerator.#ctor(System.Text.StringHandler)">
            <summary>
            Initializes an instance with the specified character list specified as a <see cref="T:System.Span`1"/>.
            </summary>
            <param name="chars">The characters.</param>
            <exception cref="T:System.NullReferenceException">
            Throws when the field <see cref="F:System.Text.StringHandler._chars"/> in argument <paramref name="chars"/>
            is a <see langword="null"/> reference after having been invoked <see cref="M:System.Span`1.GetPinnableReference"/>.
            </exception>
            <seealso cref="T:System.Span`1"/>
            <seealso cref="M:System.Span`1.GetPinnableReference"/>
        </member>
        <member name="P:System.Text.StringHandler.Enumerator.Current">
            <inheritdoc cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:System.Text.StringHandler.Enumerator.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="T:System.Text.StringHandlerRefAppender`1">
            <summary>
            Defines an appender method that converts a <typeparamref name="T"/> instance into a <see cref="T:System.String"/> result.
            </summary>
            <typeparam name="T">The type of each element in a collection, specified as a read-only reference.</typeparam>
            <param name="refFirstElement">A reference that reference to the collection.</param>
            <returns>The converted string result.</returns>
        </member>
        <member name="T:System.LazyExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Lazy`1"/>.
            </summary>
            <seealso cref="T:System.Lazy`1"/>
        </member>
        <member name="M:System.LazyExtensions.DoIfValueCreated``1(System.Lazy{``0},System.Action{``0})">
            <summary>
            Operate with inner value if <see cref="T:System.Lazy`1"/> value is created.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="this">The lazy data structure.</param>
            <param name="action">The action to handle the value.</param>
        </member>
        <member name="T:System.MathExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Math"/>.
            </summary>
            <seealso cref="T:System.Math"/>
        </member>
        <member name="M:System.MathExtensions.Min(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the minimal one of three values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="c">The third value.</param>
            <returns>Which is the minimal value.</returns>
        </member>
        <member name="M:System.MathExtensions.Max(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the maximum one of three values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="c">The third value.</param>
            <returns>Which is the maximum value.</returns>
        </member>
        <member name="T:System.RandomExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Random"/>.
            </summary>
            <seealso cref="T:System.Random"/>
        </member>
        <member name="M:System.RandomExtensions.NextInArray``1(System.Random,``0[],System.Int32@)">
            <summary>
            Try to get the random element in the specified array.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="this">The random number generator.</param>
            <param name="array">The array.</param>
            <param name="index">The index generated.</param>
            <returns>The random element fetched.</returns>
        </member>
        <member name="T:System.SingleExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Single"/>.
            </summary>
            <seealso cref="T:System.Single"/>
        </member>
        <member name="M:System.SingleExtensions.NearlyEquals(System.Single,System.Single)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            </summary>
            <param name="this">The value.</param>
            <param name="other">The other value.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:System.SingleExtensions.NearlyEquals(System.Single,System.Single,System.Single)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            If the differ of two values to compare is lower than the specified epsilon value,
            the method will return <see langword="true"/>.
            </summary>
            <param name="this">The value.</param>
            <param name="other">The other value to compare.</param>
            <param name="epsilon">The epsilon value (the minimal differ).</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.String"/>.
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="F:System.StringExtensions.MatchingTimeSpan">
            <summary>
            Indicates the time span that is used for matching.
            </summary>
        </member>
        <member name="F:System.StringExtensions.InvalidOperation">
            <summary>
            Indicates the exception that will be thrown when a certain regular expression is invalid.
            </summary>
        </member>
        <member name="M:System.StringExtensions.CountOf(System.String,System.Char)">
            <summary>
            Count how many specified characters are in the current string.
            </summary>
            <param name="this">The current string.</param>
            <param name="character">The character to count.</param>
            <returns>The number of characters found.</returns>
        </member>
        <member name="M:System.StringExtensions.SatisfyPattern(System.String,System.String)">
            <summary>
            Check whether the specified string instance is satisfied
            the specified regular expression pattern or not.
            </summary>
            <param name="this">The value to check.</param>
            <param name="pattern">
            The regular expression pattern. If the value is <see langword="null"/>,
            the return value is always <see langword="false"/>.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified <paramref name="pattern"/> is not a valid regular
            expression pattern.
            </exception>
        </member>
        <member name="M:System.StringExtensions.IsMatch(System.String,System.String)">
            <summary>
            Check whether the specified string instance can match the value
            using the specified regular expression pattern or not.
            </summary>
            <param name="this">The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified <paramref name="pattern"/> is not a valid regular
            expression pattern.
            </exception>
        </member>
        <member name="M:System.StringExtensions.ReplaceAt(System.String,System.Int32,System.Char)">
            <summary>
            Replace the character at the specified index with the new value.
            </summary>
            <param name="this">The current string.</param>
            <param name="index">The index.</param>
            <param name="charToInsert">The string to insert.</param>
            <returns>The result string.</returns>
        </member>
        <member name="M:System.StringExtensions.RemoveAll(System.String,System.Char)">
            <summary>
            Removes all specified characters.
            </summary>
            <param name="this">The string value.</param>
            <param name="character">The character to be removed from the base string.</param>
            <returns>The result string value after removal.</returns>
        </member>
        <member name="M:System.StringExtensions.Match(System.String,System.String)">
            <summary>
            Searches the specified input string for the first occurrence of
            the specified regular expression pattern.
            </summary>
            <param name="this">The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>
            The value after matching. If failed to match,
            the value will be <see langword="null"/>.
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)"/>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified <paramref name="pattern"/> is not a valid regular
            expression pattern.
            </exception>
        </member>
        <member name="M:System.StringExtensions.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the input string for the first occurrence of the specified regular
            expression, using the specified matching options.
            </summary>
            <param name="this">The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <param name="regexOption">The matching options.</param>
            <returns>
            The matched string value. If failed to match,
            the value will be <see langword="null"/>.
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified <paramref name="pattern"/> is not a valid regular
            expression pattern.
            </exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>
        </member>
        <member name="M:System.StringExtensions.ExpandCharacters(System.String)">
            <summary>
            Gets a new <see cref="T:System.String"/>[] result, with each element (a <see cref="T:System.String"/> with a single character)
            from the specified <see cref="T:System.String"/>.
            </summary>
            <param name="this">The current <see cref="T:System.String"/> instance.</param>
            <returns>An array of <see cref="T:System.String"/> elements.</returns>
        </member>
        <member name="M:System.StringExtensions.MatchAll(System.String,System.String)">
            <summary>
            Searches the specified input string for all occurrences of a
            specified regular expression pattern.
            </summary>
            <param name="this">The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>
            The result after matching. If failed to match,
            the returning array will be an empty string array (has no elements).
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified <paramref name="pattern"/> is not a valid regular
            expression pattern.
            </exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/>
        </member>
        <member name="M:System.StringExtensions.MatchAll(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for all occurrences of a
            specified regular expression pattern, using the specified matching
            options.
            </summary>
            <param name="this">The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <param name="regexOption">The matching options.</param>
            <returns>
            The result after matching. If failed to match,
            the returning array will be an empty string array (has no elements).
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified <paramref name="pattern"/> is not a valid regular
            expression pattern.
            </exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>
        </member>
        <member name="M:System.StringExtensions.RemoveLineEndings(System.String)">
            <summary>
            Remove all new-line sequences in the current string.
            </summary>
            <param name="this">The current string.</param>
            <returns>
            A string whose contents match the current string, but with all new-line sequences replaced with <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:System.StringExtensions.Reserve(System.String,System.String)">
            <summary>
            Reserve all characters that satisfy the specified pattern.
            </summary>
            <param name="this">The string.</param>
            <param name="reservePattern">
            The pattern that reserved characters satisfied. All supported patterns are:
            <list type="table">
            <item>
            <term><c>@"\d"</c></term>
            <description>To match a digit.</description>
            </item>
            <item>
            <term><c>@"\t"</c></term>
            <description>To match a tab.</description>
            </item>
            <item>
            <term><c>@"\w"</c></term>
            <description>To match a letter, digit or underscore character <c>'_'</c>.</description>
            </item>
            </list>
            </param>
            <returns>The result string.</returns>
            <remarks>
            For example, if code is <c>"Hello, world!".Reserve(@"\w")</c>, the return value
            will only contain the letters, digits or the underscore character '<c>_</c>'
            (i.e. <c>"Helloworld"</c> as the result of this example).
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Throws when the <paramref name="reservePattern"/> is invalid.
            All possible patterns are shown in the tip for the parameter <paramref name="reservePattern"/>.
            </exception>
        </member>
        <member name="M:System.StringExtensions.IsRegexPattern(System.String)">
            <summary>
            To check if the current string value is a valid regular
            expression pattern or not.
            </summary>
            <param name="this">The value to check.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="M:System.StringExtensions.NullLinesOrHeaderSpacesPattern">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions, atomically.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match if at the beginning of the string.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Zero-width positive lookbehind.<br/>
                            ○ Match the string "\r\n" right-to-left.<br/>
                        ○ Match a whitespace character atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Type"/>.
            </summary>
            <seealso cref="T:System.Type"/>
        </member>
        <member name="M:System.TypeExtensions.IsGenericAssignableTo(System.Type,System.Type)">
            <summary>
            Determines whether the current type can be assigned to a variable of the specified
            <paramref name="targetType"/>, although it is with generic parameters.
            </summary>
            <param name="this">The current type.</param>
            <param name="targetType">The type to compare with the current type.</param>
            <returns>Returns <see langword="true"/> if the target type is matched, without generic constraints.</returns>
            <seealso href="https://stackoverflow.com/questions/74616/how-to-detect-if-type-is-another-generic-type/1075059#1075059">
            Question: How to detect if type is another generic type
            </seealso>
        </member>
        <member name="M:System.TypeExtensions.HasParameterlessConstructor(System.Type)">
            <summary>
            Determines whether the type has a parameterless constructor.
            </summary>
            <param name="type">The type.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:System.Utf8StringExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Utf8String"/>.
            </summary>
            <remarks>
            This type is lazy-implemented: all methods uses corresponding methods of <see cref="T:System.String"/> as implementation.
            </remarks>
            <seealso cref="T:System.Utf8String"/>
        </member>
        <member name="M:System.Utf8StringExtensions.SatisfyPattern(System.Utf8String,System.Utf8String)">
            <summary>
            Check whether the specified string instance is satisfied
            the specified regular expression pattern or not.
            </summary>
            <param name="this">The value to check.</param>
            <param name="pattern">
            The regular expression pattern. If the value is <see langword="null"/>,
            the return value is always <see langword="false"/>.
            </param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified <paramref name="pattern"/> is not a valid regular
            expression pattern.
            </exception>
        </member>
        <member name="M:System.Utf8StringExtensions.IsMatch(System.Utf8String,System.Utf8String)">
            <summary>
            Check whether the specified string instance can match the value
            using the specified regular expression pattern or not.
            </summary>
            <param name="this">The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified <paramref name="pattern"/> is not a valid regular
            expression pattern.
            </exception>
        </member>
        <member name="M:System.Utf8StringExtensions.Match(System.Utf8String,System.Utf8String)">
            <summary>
            Searches the specified input string for the first occurrence of
            the specified regular expression pattern.
            </summary>
            <param name="this">The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>
            The value after matching. If failed to match,
            the value will be <see langword="null"/>.
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)"/>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified <paramref name="pattern"/> is not a valid regular
            expression pattern.
            </exception>
        </member>
        <member name="M:System.Utf8StringExtensions.Match(System.Utf8String,System.Utf8String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the input string for the first occurrence of the specified regular
            expression, using the specified matching options.
            </summary>
            <param name="this">The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <param name="regexOption">The matching options.</param>
            <returns>
            The matched string value. If failed to match,
            the value will be <see langword="null"/>.
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified <paramref name="pattern"/> is not a valid regular
            expression pattern.
            </exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>
        </member>
        <member name="M:System.Utf8StringExtensions.MatchAll(System.Utf8String,System.Utf8String)">
            <summary>
            Searches the specified input string for all occurrences of a
            specified regular expression pattern.
            </summary>
            <param name="this">The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>
            The result after matching. If failed to match,
            the returning array will be an empty string array (has no elements).
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified <paramref name="pattern"/> is not a valid regular
            expression pattern.
            </exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/>
        </member>
        <member name="M:System.Utf8StringExtensions.MatchAll(System.Utf8String,System.Utf8String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for all occurrences of a
            specified regular expression pattern, using the specified matching
            options.
            </summary>
            <param name="this">The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <param name="regexOption">The matching options.</param>
            <returns>
            The result after matching. If failed to match,
            the returning array will be an empty string array (has no elements).
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Throws when the specified <paramref name="pattern"/> is not a valid regular
            expression pattern.
            </exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>
        </member>
        <member name="M:System.Utf8StringExtensions.IsRegexPattern(System.Utf8String)">
            <summary>
            To check if the current string value is a valid regular
            expression pattern or not.
            </summary>
            <param name="this">The value to check.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="T:System.ValueTupleExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.ValueTuple"/> type set.
            </summary>
            <seealso cref="T:System.ValueTuple"/>
        </member>
        <member name="M:System.ValueTupleExtensions.Invoke(System.ValueTuple{System.Action,System.Action})">
            <summary>
            Invokes the tuple.
            </summary>
            <param name="this">The pair elements.</param>
        </member>
        <member name="T:System.ForEachRefCallback`1">
            <summary>
            Indicates a callback method that is used by for-each methods, iterating on each reference instead of instance.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="element">The reference to the element.</param>
        </member>
        <member name="T:System.ICloneable`1">
            <summary>
            <inheritdoc cref="T:System.ICloneable" path="/summary"/>
            </summary>
            <typeparam name="TSelf">The type of the instance.</typeparam>
        </member>
        <member name="M:System.ICloneable`1.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:System.ICloneable`1.System#ICloneable#Clone">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Throws when method <see cref="M:System.ICloneable`1.Clone"/> returns <see langword="null"/>.</exception>
            <seealso cref="M:System.ICloneable`1.Clone"/>
        </member>
        <member name="T:System.ISimpleFormattable">
            <summary>
            Defines a type that supports <c>ToString(<see langword="string"/>?)</c>.
            </summary>
            <seealso cref="M:System.ISimpleFormattable.ToString(System.String)"/>
        </member>
        <member name="M:System.ISimpleFormattable.ToString(System.String)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The format to use, or <see langword="null"/> to use the default format.</param>
            <returns>The value of the current instance in the specified format.</returns>
            <exception cref="T:System.FormatException">Throws when the format is invalid.</exception>
        </member>
        <member name="T:System.ISimpleParsable`1">
            <summary>
            Defines an instance that allows the <see cref="T:System.String"/> value
            to be parsed to the target type <typeparamref name="TSelf"/>.
            </summary>
            <remarks>
            Different with type <see cref="T:System.IParsable`1"/>, this type is not necessary to convert
            instances into <see cref="T:System.IFormatProvider"/>.
            </remarks>
            <typeparam name="TSelf">The type of the target result.</typeparam>
            <seealso cref="T:System.IParsable`1"/>
            <seealso cref="T:System.IFormatProvider"/>
        </member>
        <member name="M:System.ISimpleParsable`1.Parse(System.String)">
            <summary>
            Parse the specified string text, and get the same-meaning instance
            of type <typeparamref name="TSelf"/>.
            </summary>
            <param name="str">The string to parse. The value cannot be <see langword="null"/>.</param>
            <returns>The result parsed.</returns>
            <exception cref="T:System.FormatException">Throws when failed to parse.</exception>
            <exception cref="T:System.ArgumentNullException">
            Throws when the argument <paramref name="str"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.ISimpleParsable`1.TryParse(System.String,`0@)">
            <summary>
            Try to parse the specified string text, and get the same-meaning instance
            of type <typeparamref name="TSelf"/>.
            </summary>
            <param name="str">The string to parse. The value cannot be <see langword="null"/>.</param>
            <param name="result">
            The result parsed. If failed to parse, the value will keep the <see langword="default"/> value,
            i.e. <see langword="default"/>(<typeparamref name="TSelf"/>).
            </param>
            <returns>
            A <see cref="T:System.Boolean"/> result indicating whether the operation is successful to execute.
            </returns>
        </member>
        <member name="T:System.Numerics.BitOperationsExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Numerics.BitOperations"/>.
            </summary>
            <seealso cref="T:System.Numerics.BitOperations"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.SByte)">
            <summary>
            Find all offsets of set bits of the binary representation of a specified value.
            </summary>
            <param name="this">The value.</param>
            <returns>All offsets.</returns>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.Byte)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.Int16)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.UInt16)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.Int32)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.UInt32)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.Int64)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.UInt64)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.IntPtr)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.UIntPtr)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetAllSets(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.SByte)">
            <summary>
            <para>Get an enumerator to iterate on each bits of the specified integer value.</para>
            <para>This method will allow you to use <see langword="foreach"/> loop to iterate on all indices of set bits.</para>
            </summary>
            <param name="this">The value.</param>
            <returns>All indices of set bits.</returns>
            <remarks>
            This method allows you using <see langword="foreach"/> loop to iterate this value:
            <code><![CDATA[
            foreach (int bit in 17)
            {
                // Do something...
            }
            ]]></code>
            </remarks>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.Byte)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.Int16)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.UInt16)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.Int32)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.UInt32)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.Int64)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.UInt64)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.IntPtr)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.UIntPtr)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetEnumerator(System.SByte)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetNextSet(System.Byte,System.Int32)">
            <summary>
            Find an index of the binary representation of a value after the specified index whose bit is set <see langword="true"/>.
            </summary>
            <param name="this">The value.</param>
            <param name="index">The index.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetNextSet(System.Int16,System.Int32)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetNextSet(System.Byte,System.Int32)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetNextSet(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetNextSet(System.Byte,System.Int32)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.GetNextSet(System.Int64,System.Int32)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.GetNextSet(System.Byte,System.Int32)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.ReverseBits(System.Byte@)">
            <summary>
            <para>Reverse all bits in a specified value.</para>
            <para>Note that the value is passed by <b>reference</b> though the method is an extension method, and returns nothing.</para>
            </summary>
            <param name="this">The value.</param>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.ReverseBits(System.Int16@)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.ReverseBits(System.Byte@)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.ReverseBits(System.Int32@)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.ReverseBits(System.Byte@)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.ReverseBits(System.Int64@)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.ReverseBits(System.Byte@)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.SetAt(System.Byte,System.Int32)">
            <summary>
            Get an <see cref="T:System.Int32"/> value, indicating that the absolute position of all set bits with the specified set bit order.
            </summary>
            <param name="this">The value.</param>
            <param name="order">The number of the order of set bits.</param>
            <returns>The position.</returns>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.SetAt(System.Int16,System.Int32)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.SetAt(System.Byte,System.Int32)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.SetAt(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.SetAt(System.Byte,System.Int32)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.SetAt(System.Int64,System.Int32)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.SetAt(System.Byte,System.Int32)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.SkipSetBit(System.Byte,System.Int32)">
            <summary>
            Skip the specified number of set bits and iterate on the integer with other set bits.
            </summary>
            <param name="this">The integer to iterate.</param>
            <param name="setBitPosCount">Indicates how many set bits you want to skip to iterate.</param>
            <returns>The byte value that only contains the other set bits.</returns>
            <remarks>
            For example:
            <code><![CDATA[
            byte value = 0b00010111;
            foreach (int bitPos in value.SkipSetBit(2))
            {
                yield return bitPos + 1;
            }
            ]]></code>
            You will get 3 and 5, because all set bit positions are 0, 1, 2 and 4, and we have skipped
            two of them, so the result set bit positions to iterate on are only 2 and 4.
            </remarks>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.SkipSetBit(System.Int16,System.Int32)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.SkipSetBit(System.Byte,System.Int32)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.SkipSetBit(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.SkipSetBit(System.Byte,System.Int32)"/>
        </member>
        <member name="M:System.Numerics.BitOperationsExtensions.SkipSetBit(System.Int64,System.Int32)">
            <inheritdoc cref="M:System.Numerics.BitOperationsExtensions.SkipSetBit(System.Byte,System.Int32)"/>
        </member>
        <member name="T:System.PointerOperations">
            <summary>
            Provides methods for pointer handling.
            </summary>
        </member>
        <member name="M:System.PointerOperations.Swap``1(``0*,``0*)">
            <summary>
            To swap the two variables using pointers.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="left">The left variable.</param>
            <param name="right">The right variable.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws when <paramref name="left"/> or <paramref name="right"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.PointerOperations.GetArrayFromStart``1(``0*,System.Int32,System.Int32)">
            <summary>
            Get the new array from the pointer, with the specified start index.
            </summary>
            <typeparam name="T">The type of the pointer element.</typeparam>
            <param name="ptr">The pointer.</param>
            <param name="length">The length of the array that pointer points to.</param>
            <param name="index">The start index that you want to pick from.</param>
            <returns>The array of elements.</returns>
            <exception cref="T:System.ArgumentNullException">
            Throws when the argument <paramref name="ptr"/> is <see langword="null"/>.
            </exception>
            <remarks>
            For example, the pointer is the address of the first element in an array <c>{ 0, 1, 3, 6, 10 }</c>,
            if parameter <paramref name="index"/> is 2, the return array will be <c>{ 3, 6, 10 }</c>. Note that
            the parameter <paramref name="length"/> should keep the value 5 because the array contains
            5 elements in this case.
            </remarks>
        </member>
        <member name="M:System.PointerOperations.GetArrayFromStart(System.Int32*,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the new array from the pointer, with the specified start index.
            </summary>
            <param name="ptr">The pointer.</param>
            <param name="length">The length of the array that pointer points to.</param>
            <param name="index">The start index that you want to pick from.</param>
            <param name="removeTrailingZeros">
            Indicates whether the method will remove the trailing zeros. If <see langword="false"/>,
            the method will be same as <see cref="M:System.PointerOperations.GetArrayFromStart``1(``0*,System.Int32,System.Int32)"/>.
            </param>
            <returns>The array of elements.</returns>
            <exception cref="T:System.ArgumentNullException">
            Throws when the argument <paramref name="ptr"/> is <see langword="null"/>.
            </exception>
            <remarks>
            For example, the pointer is the address of the first element in an array <c>{ 0, 1, 3, 6, 10 }</c>,
            if parameter <paramref name="index"/> is 2, the return array will be <c>{ 3, 6, 10 }</c>. Note that
            the parameter <paramref name="length"/> should keep the value 5 because the array contains
            5 elements in this case.
            </remarks>
            <seealso cref="M:System.PointerOperations.GetArrayFromStart``1(``0*,System.Int32,System.Int32)"/>
        </member>
        <member name="T:System.Runtime.CompilerServices.Unsafe2">
            <summary>
            Provides extra methods that is an extension of type <see cref="T:System.Runtime.CompilerServices.Unsafe"/>.
            </summary>
            <seealso cref="T:System.Runtime.CompilerServices.Unsafe"/>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe2.RefMoveNext``1(``0@)">
            <summary>
            Moves the reference to the next position. Simply calls <see cref="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)"/> with arguments
            <paramref name="ref"/> and 1.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="ref">The reference.</param>
            <seealso cref="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)"/>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe2.RefMovePrevious``1(``0@)">
            <summary>
            Moves the reference to the previous position. Simply calls <see cref="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)"/> with arguments
            <paramref name="ref"/> and 1.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="ref">The reference.</param>
            <seealso cref="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)"/>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe2.AsByteRef``1(``0@)">
            <summary>
            Simply invokes the method <see cref="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)"/>, but with target generic type being fixed type <see cref="T:System.Byte"/>.
            </summary>
            <typeparam name="T">The base type that is converted from.</typeparam>
            <param name="ref">
            The reference to the value. Generally speaking the value should be a <see langword="ref readonly"/> parameter, but C# disallows it,
            using <see langword="ref readonly"/> as a combined parameter modifier.
            </param>
        </member>
        <member name="T:System.Runtime.Messages.DeprecatedConstructorsMessage">
            <summary>
            Provides with a message that is represented as deprecated message for deprecated constructors.
            </summary>
        </member>
        <member name="F:System.Runtime.Messages.DeprecatedConstructorsMessage.ConstructorIsMeaningless">
            <summary>
            Indicates the message that reports a warning that user cannot invoke this constructor because of meaninglessness.
            </summary>
        </member>
        <member name="T:System.Runtime.Messages.ModuleInitializerMessage">
            <summary>
            Provides with a message that is represented as warning message used by module initializers.
            </summary>
        </member>
        <member name="F:System.Runtime.Messages.ModuleInitializerMessage.ModuleInitializerCannotBeCalledManually">
            <summary>
            Indicates the message is telling user that module initializers cannot be used manually.
            </summary>
        </member>
        <member name="T:System.Runtime.Messages.RefStructDefaultImplementationMessage">
            <summary>
            Provides with a message that is represented as deprecated message in default-overridden methods
            of <see langword="ref struct"/>-typed instances.
            </summary>
        </member>
        <member name="F:System.Runtime.Messages.RefStructDefaultImplementationMessage.OverriddenEqualsMethod">
            <summary>
            Indicates the message is telling user that the method <c>Equals</c> will become invalid
            in <see langword="ref struct"/> because the argument type is <see cref="T:System.Object"/>,
            which is not able to be a target converted type for a <see langword="ref struct"/> instance.
            </summary>
        </member>
        <member name="F:System.Runtime.Messages.RefStructDefaultImplementationMessage.OverriddenGetHashCodeMethod">
            <summary>
            Indicates the message is telling user that the method <c>GetHashCode</c> will become invalid
            in <see langword="ref struct"/> because the argument type is <see cref="T:System.Object"/>,
            which is not able to be a target converted type for a <see langword="ref struct"/> instance.
            </summary>
        </member>
        <member name="T:System.Runtime.Messages.RequiresCompilerInvocationMessage">
            <summary>
            Provides with a message that is represented as deprecated message for compiler invocation.
            </summary>
        </member>
        <member name="F:System.Runtime.Messages.RequiresCompilerInvocationMessage.CompilerInvocationOnly">
            <summary>
            Indicates the message that reports an error that user cannot use this constructor because of requirements on compiler invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.Messages.RequiresJsonSerializerDynamicInvocationMessage">
            <summary>
            Provides with a message that is represented as deprecated message in JSON serialization dynamic invocation.
            </summary>
        </member>
        <member name="F:System.Runtime.Messages.RequiresJsonSerializerDynamicInvocationMessage.DynamicInvocationByJsonSerializerOnly">
            <summary>
            Indicates the message that reports an error that user cannot use this constructor because of requirements on dynamic invocation
            by JSON serializer handling.
            </summary>
        </member>
        <member name="T:System.SourceGeneration.DeconstructionMethodArgumentAttribute">
            <summary>
            Defines an attribute that specifies a parameter used by a deconstruction method.
            </summary>
            <param name="referencedMemberName">The referenced member name.</param>
        </member>
        <member name="M:System.SourceGeneration.DeconstructionMethodArgumentAttribute.#ctor(System.String)">
            <summary>
            Defines an attribute that specifies a parameter used by a deconstruction method.
            </summary>
            <param name="referencedMemberName">The referenced member name.</param>
        </member>
        <member name="T:System.SourceGeneration.DeconstructionMethodAttribute">
            <summary>
            Defines an attribute that specifies a deconstrution method.
            </summary>
        </member>
        <member name="T:System.SourceGeneration.GeneralizedAccessibility">
            <summary>
            Defines a kind of accessibility that is defined in C#.
            </summary>
        </member>
        <member name="F:System.SourceGeneration.GeneralizedAccessibility.None">
            <summary>
            Indicates the accessibility is invalid and not defined in this type.
            </summary>
        </member>
        <member name="F:System.SourceGeneration.GeneralizedAccessibility.File">
            <summary>
            Indicates the accessibility is <see langword="file"/>-scoped.
            </summary>
        </member>
        <member name="F:System.SourceGeneration.GeneralizedAccessibility.Private">
            <summary>
            Indicates the accessibility is <see langword="private"/>.
            </summary>
        </member>
        <member name="F:System.SourceGeneration.GeneralizedAccessibility.Protected">
            <summary>
            Indicates the accessibility is <see langword="protected"/>.
            </summary>
        </member>
        <member name="F:System.SourceGeneration.GeneralizedAccessibility.PrivateProtected">
            <summary>
            Indicates the accessibility is <see langword="private protected"/>.
            </summary>
        </member>
        <member name="F:System.SourceGeneration.GeneralizedAccessibility.Internal">
            <summary>
            Indicates the accessibility is <see langword="internal"/>.
            </summary>
        </member>
        <member name="F:System.SourceGeneration.GeneralizedAccessibility.ProtectedInternal">
            <summary>
            Indicates the accessibility is <see langword="protected internal"/>.
            </summary>
        </member>
        <member name="F:System.SourceGeneration.GeneralizedAccessibility.Public">
            <summary>
            Indicates the accessibility is <see langword="public"/>.
            </summary>
        </member>
        <member name="T:System.SourceGeneration.GeneratedEqualsBehavior">
            <summary>
            Defines a kind of behavior describing source generator's generated source code on overridding <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <seealso cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="F:System.SourceGeneration.GeneratedEqualsBehavior.RefStructDefault">
            <summary>
            Indicates the generated code will directly return <see langword="false"/> to mark the target method cannot be invoked by user
            due to the method is in <see langword="ref struct"/>, which is meaningless on calling this method.
            </summary>
            <remarks>
            The generated code will be like:
            <code><![CDATA[
            // <auto-generated/>
            
            ref partial struct Type
            {
                /// <inheritdoc cref="object.Equals(object?)"/>
                [CompilerGenerated]
                [GeneratedCode("SourceGeneratorName", "1.0.0.0")]
                [Obsolete(RefStructDefaultImplementationMessage.OverriddenEqualsMethod, false)]
                public override readonly partial bool Equals([NotNullWhen(false)] object? obj) => false;
            }
            ]]></code>
            </remarks>
        </member>
        <member name="F:System.SourceGeneration.GeneratedEqualsBehavior.TypeCheckingAndCallingOverloading">
            <summary>
            Indicates the generated code will do the type checking, and then directly calls the overloaded method on <c>Equals</c>.
            </summary>
            <remarks>
            The generated code will be like:
            <code><![CDATA[
            // <auto-generated/>
            
            partial struct Type
            {
                /// <inheritdoc cref="object.Equals(object?)"/>
                [CompilerGenerated]
                [GeneratedCode("SourceGeneratorName", "1.0.0.0")]
                public override readonly bool Equals([NotNullWhen(false)] object? obj) => obj is Type comparer && Equals(comparer);
                
                // Suppose the type 'Type' has already contained an overloading like this:
                //public readonly partial bool Equals(Type other) { ... }
            }
            ]]></code>
            </remarks>
        </member>
        <member name="F:System.SourceGeneration.GeneratedEqualsBehavior.AsCastAndCallingOverloading">
            <summary>
            Indicates the generated code will use <see langword="as"/> expression, and then directly calls the overloaded method on <c>Equals</c>
            which can receive a nullable type as argument's type.
            </summary>
            <remarks>
            The generated code will be like:
            <code><![CDATA[
            // <auto-generated/>
            
            partial class Type
            {
                /// <inheritdoc cref="object.Equals(object?)"/>
                [CompilerGenerated]
                [GeneratedCode("SourceGeneratorName", "1.0.0.0")]
                public override bool Equals([NotNullWhen(false)] object? obj) => Equals(comparer as Type);
                
                // Suppose the type 'Type' has already contained an overloading like this:
                //public partial bool Equals([NotNullWhen(true)] Type? other) { ... }
            }
            ]]></code>
            </remarks>
        </member>
        <member name="T:System.SourceGeneration.GeneratedGetHashCodeBehavior">
            <summary>
            Defines a kind of behavior describing source generator's generated source code on overridding <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <seealso cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="F:System.SourceGeneration.GeneratedGetHashCodeBehavior.RefStructDefault">
            <summary>
            Indicates the generated code will directly throws <see cref="T:System.NotSupportedException"/> to mark the target method cannot be invoked by user
            due to the method is in <see langword="ref struct"/>, which is meaningless on calling this method.
            </summary>
            <remarks>
            The generated code will be like:
            <code><![CDATA[
            // <auto-generated/>
            
            ref partial struct Type
            {
                /// <inheritdoc cref="object.Equals(object?)"/>
                [CompilerGenerated]
                [GeneratedCode("SourceGeneratorName", "1.0.0.0")]
                [Obsolete(RefStructDefaultImplementationMessage.OverriddenGetHashCodeMethod, false)]
                public override readonly partial int GetHashCode()
                    => throw new NotSupportedException(RefStructDefaultImplementationMessage.OverriddenGetHashCodeMethod);
            }
            ]]></code>
            </remarks>
        </member>
        <member name="F:System.SourceGeneration.GeneratedGetHashCodeBehavior.SimpleField">
            <summary>
            Indicates the generated code will directly returns the backing fields in the type, as returning value.
            </summary>
            <remarks>
            The generated code will be like:
            <code><![CDATA[
            // <auto-generated/>
            
            partial struct Type
            {
                /// <inheritdoc cref="object.GetHashCode"/>
                [CompilerGenerated]
                [GeneratedCode("SourceGeneratorName", "1.0.0.0")]
                public override readonly partial int GetHashCode() => _mask;
                
                // Suppose the type contains a field named '_mask':
                //private readonly int _mask;
            }
            ]]></code>
            Where the extra field name <c>_mask</c> can be specified as the other argument <c>extraArguments</c>.
            </remarks>
        </member>
        <member name="F:System.SourceGeneration.GeneratedGetHashCodeBehavior.CallingHashCodeCombine">
            <summary>
            Indicates the generated code will returns an expression calling <c>HashCode.Combine</c> method group
            (e.g. <see cref="M:System.HashCode.Combine``1(``0)"/>), passing fields or expressions into it.
            </summary>
            <remarks>
            The generated code will be like:
            <code><![CDATA[
            // <auto-generated/>
            
            partial struct Type
            {
                /// <inheritdoc cref="object.GetHashCode"/>
                [CompilerGenerated]
                [GeneratedCode("SourceGeneratorName", "1.0.0.0")]
                public override readonly partial int GetHashCode() => HashCode.Combine(_m1, _m2);
                
                // Suppose the type contains a field named '_m1' and '_m2':
                //private readonly int _m1;
                //private readonly string _m2;
            }
            ]]></code>
            Where the extra field name <c>_m1</c> and <c>_m2</c> can be specified as the other argument <c>extraArguments</c>.
            </remarks>
            <seealso cref="M:System.HashCode.Combine``1(``0)"/>
        </member>
        <member name="T:System.SourceGeneration.GeneratedOverridingMemberAttribute">
            <summary>
            Represents a marker attribute to tell source generators that the member derived from type <see cref="T:System.Object"/>
            or <see cref="T:System.ValueType"/> should be automatically implemented.
            </summary>
            <remarks>
            This attribute supports the following members:
            <list type="bullet">
            <item><see cref="M:System.Object.Equals(System.Object)"/> and <see cref="M:System.ValueType.Equals(System.Object)"/></item>
            <item><see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.ValueType.GetHashCode"/></item>
            <item><see cref="M:System.Object.ToString"/> and <see cref="M:System.ValueType.ToString"/></item>
            </list>
            </remarks>
            <seealso cref="T:System.Object"/>
            <seealso cref="T:System.ValueType"/>
        </member>
        <member name="M:System.SourceGeneration.GeneratedOverridingMemberAttribute.#ctor(System.SourceGeneration.GeneratedEqualsBehavior)">
            <summary>
            Initializes a <see cref="T:System.SourceGeneration.GeneratedOverridingMemberAttribute"/> instance via the specified behavior on generating
            <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="overridingEqualsBehavior">The behavior.</param>
        </member>
        <member name="M:System.SourceGeneration.GeneratedOverridingMemberAttribute.#ctor(System.SourceGeneration.GeneratedGetHashCodeBehavior,System.Object[])">
            <summary>
            Initializes a <see cref="T:System.SourceGeneration.GeneratedOverridingMemberAttribute"/> instance via the specified behavior on generating
            <see cref="M:System.Object.GetHashCode"/>, with the specified array as extra arguments.
            </summary>
            <param name="overridingGetHashCodeBehavior">The behavior.</param>
            <param name="arguments">Extra arguments.</param>
        </member>
        <member name="M:System.SourceGeneration.GeneratedOverridingMemberAttribute.#ctor(System.SourceGeneration.GeneratedToStringBehavior,System.Object[])">
            <summary>
            Initializes a <see cref="T:System.SourceGeneration.GeneratedOverridingMemberAttribute"/> instance via the specified behavior on generating
            <see cref="M:System.Object.ToString"/>, with the specified array as extra arguments.
            </summary>
            <param name="overridingToStringBehavior">The behavior.</param>
            <param name="arguments">Extra arguments.</param>
        </member>
        <member name="T:System.SourceGeneration.GeneratedToStringBehavior">
            <summary>
            Defines a kind of behavior describing source generator's generated source code on overridding <see cref="M:System.Object.ToString"/>.
            </summary>
            <seealso cref="M:System.Object.ToString"/>
        </member>
        <member name="F:System.SourceGeneration.GeneratedToStringBehavior.CallOverloadWithNull">
            <summary>
            Indicates the generated code will directly invoke <see cref="M:System.ISimpleFormattable.ToString(System.String)"/> method,
            with <see langword="null"/> as target argument.
            </summary>
            <remarks>
            The generated code will be like:
            <code><![CDATA[
            // <auto-generated/>
            
            partial struct Type
            {
                /// <inheritdoc cref="object.ToString"/>
                [CompilerGenerated]
                [GeneratedCode("SourceGeneratorName", "1.0.0.0")]
                public override readonly partial string ToString() => ToString(default(string));
            }
            ]]></code>
            </remarks>
            <seealso cref="M:System.ISimpleFormattable.ToString(System.String)"/>
        </member>
        <member name="F:System.SourceGeneration.GeneratedToStringBehavior.SimpleMember">
            <summary>
            Indicates the generated code will directly returns the expression constructed in the target member.
            </summary>
            <remarks>
            The generated code will be like:
            <code><![CDATA[
            // <auto-generated/>
            
            partial struct Type
            {
                /// <inheritdoc cref="object.ToString"/>
                [CompilerGenerated]
                [GeneratedCode("SourceGeneratorName", "1.0.0.0")]
                public override readonly partial string ToString() => _field.ToString();
                
                // Suppose the type contains a field named '_field':
                // private readonly int _field = 42;
            }
            ]]></code>
            </remarks>
        </member>
        <member name="F:System.SourceGeneration.GeneratedToStringBehavior.RecordLike">
            <summary>
            Indicates the generated code will output record-like <c>ToString</c> result.
            </summary>
            <remarks>
            The generated code will be like:
            <code><![CDATA[
            // <auto-generated/>
            
            partial struct Type
            {
                /// <inheritdoc cref="object.ToString"/>
                [CompilerGenerated]
                [GeneratedCode("SourceGeneratorName", "1.0.0.0")]
                public override readonly partial string ToString()
                    => $$"""{{nameof(Type)}} { {{nameof(_field)}} = {{_field}}, {{nameof(Property)}} = {{Property}} }""";
            }
            ]]></code>
            </remarks>
        </member>
        <member name="T:System.SourceGeneration.ImplicitFieldAttribute">
            <summary>
            Indicates the source generator should generate its backing field without compiler controlling.
            </summary>
            <remarks>
            You can use this attribute to create a field:
            <code><![CDATA[
            [ImplicitField]
            public int Property
            {
                get => _property;
                set => _property ??= value;
            }
            ]]></code>
            You may not write code to create field <c>_property</c>. This attribute will make source generators generate it.
            </remarks>
        </member>
        <member name="P:System.SourceGeneration.ImplicitFieldAttribute.RequiredReadOnlyModifier">
            <summary>
            Indiactes whether the generated field automatically appends a <see langword="readonly"/> modifier.
            The value is <see langword="true"/> by default.
            </summary>
        </member>
        <member name="T:System.SourceGeneration.MemberKinds">
            <summary>
            Indicates a member kind.
            </summary>
        </member>
        <member name="F:System.SourceGeneration.MemberKinds.Field">
            <summary>
            Indicates the member kind is field.
            </summary>
        </member>
        <member name="F:System.SourceGeneration.MemberKinds.Property">
            <summary>
            Indicates the member kind is property.
            </summary>
        </member>
        <member name="T:System.SourceGeneration.PrimaryConstructorParameterAttribute">
            <summary>
            Indicates the attribute type that can be marked for a parameter, indicating the parameter is a <see langword="record"/>-like one,
            telling the source generator that it should generate a property that references this parameter.
            </summary>
            <param name="memberKind">
            Indicates the member kind to be generated. You can reference the target value via type <see cref="T:System.SourceGeneration.MemberKinds"/>.
            </param>
            <remarks>
            <para>
            Begin with C# 12, we can define primary constructors for non-<see langword="record"/> types.
            However, the parameter defined will be expanded as a real parameter in its containing constructor.
            The compiler won't create a binding field or property. We should define it manually. This attribute will solve this problem.
            </para>
            <para>
            The original way to declare a type with primary constructor is like:
            <code><![CDATA[
            public readonly struct Color(byte a, byte r, byte g, byte b)
            {
                public byte A { get; } = a;
                public byte R { get; } = r;
                public byte G { get; } = g;
                public byte B { get; } = b;
            }
            ]]></code>
            </para>
            <para>
            Via this attribute type, we can simplify the code:
            <code><![CDATA[
            public readonly partial struct Color(
                [PrimaryConstructorParameter] byte a,
                [PrimaryConstructorParameter] byte r,
                [PrimaryConstructorParameter] byte g,
                [PrimaryConstructorParameter] byte b
            );
            ]]></code>
            Such code is equivalent to the original one.
            </para>
            <para>If you want to learn more information about this attribute type, please visit the metadata of the type.</para>
            </remarks>
        </member>
        <member name="M:System.SourceGeneration.PrimaryConstructorParameterAttribute.#ctor(System.String)">
            <summary>
            Indicates the attribute type that can be marked for a parameter, indicating the parameter is a <see langword="record"/>-like one,
            telling the source generator that it should generate a property that references this parameter.
            </summary>
            <param name="memberKind">
            Indicates the member kind to be generated. You can reference the target value via type <see cref="T:System.SourceGeneration.MemberKinds"/>.
            </param>
            <remarks>
            <para>
            Begin with C# 12, we can define primary constructors for non-<see langword="record"/> types.
            However, the parameter defined will be expanded as a real parameter in its containing constructor.
            The compiler won't create a binding field or property. We should define it manually. This attribute will solve this problem.
            </para>
            <para>
            The original way to declare a type with primary constructor is like:
            <code><![CDATA[
            public readonly struct Color(byte a, byte r, byte g, byte b)
            {
                public byte A { get; } = a;
                public byte R { get; } = r;
                public byte G { get; } = g;
                public byte B { get; } = b;
            }
            ]]></code>
            </para>
            <para>
            Via this attribute type, we can simplify the code:
            <code><![CDATA[
            public readonly partial struct Color(
                [PrimaryConstructorParameter] byte a,
                [PrimaryConstructorParameter] byte r,
                [PrimaryConstructorParameter] byte g,
                [PrimaryConstructorParameter] byte b
            );
            ]]></code>
            Such code is equivalent to the original one.
            </para>
            <para>If you want to learn more information about this attribute type, please visit the metadata of the type.</para>
            </remarks>
        </member>
        <member name="P:System.SourceGeneration.PrimaryConstructorParameterAttribute.NamingRule">
            <summary>
            Indicates the naming rule of the generated member name.
            </summary>
            <remarks>
            <para>
            The syntax of this property can be described as two parts:
            <list type="number">
            <item>
            A verbatim symbol <c>@</c> ("At" symbol, may contain an extra character <c><![CDATA[<]]></c> or <c><![CDATA[>]]></c>:
            <c><![CDATA[<@]]></c> or <c><![CDATA[>@]]></c>)
            </item>
            <item>Characters used in a valid identifier</item>
            </list>
            </para>
            <para>
            For example, if you want to set a generated property is named like <c>xxxTargetProperty</c>
            where the <c>xxx</c> is the name of the generated property, you can set this property as value <c>"@TargetProperty"</c>.
            Then the generated property will be like:
            <code><![CDATA[
            public int ParameterTargetProperty { get; } = parameter;
            ]]></code>
            </para>
            <para>
            Also, you can set the first character as lower or upper case via symbols <c><![CDATA[<]]></c> and <c><![CDATA[>]]></c>.
            If this property is <c><![CDATA["_<@"]]></c>, the generated member will be like:
            <code><![CDATA[
            private int _parameter = parameter;
            ]]></code>
            where <c><![CDATA["<@"]]></c> means the generated member name will use lower case for its first character.
            </para>
            <para>
            By default, the naming rule is <c><![CDATA["_<@"]]></c> for fields, and <c><![CDATA[">@"]]></c> for properties.
            </para>
            </remarks>
        </member>
        <member name="P:System.SourceGeneration.PrimaryConstructorParameterAttribute.MembersNotNull">
            <summary>
            Indicates the member names becoming not <see langword="null"/>
            when this generated member is <see langword="true"/> or <see langword="false"/>.
            </summary>
            <remarks>
            The syntax of this property can be described as two parts:
            <list type="number">
            <item>Boolean value literal</item>
            <item>Member or parameter names</item>
            </list>
            The complete expression is <c>"(1): (2)"</c>. For example: <c>"<see langword="false"/>: property1, property2"</c>.
            The generated member will be:
            <code><![CDATA[
            [MemberNotNullWhen(false, nameof(Property1), nameof(Property2))]
            public bool Parameter { get; } = parameter;
            ]]></code>
            where <c>property1</c> and <c>property2</c> are supposed to be two parameters marked this attribute.
            </remarks>
        </member>
        <member name="P:System.SourceGeneration.PrimaryConstructorParameterAttribute.GeneratedMemberName">
            <summary>
            Indicates the name of the generated member.
            </summary>
        </member>
        <member name="P:System.SourceGeneration.PrimaryConstructorParameterAttribute.Accessibility">
            <summary>
            Indicates the accessibility of the generated member.
            </summary>
            <remarks>
            <para>
            This property controls the case when you want to customize the accessibility of generated member.
            For example, the value is <c>"private"</c> or <c>"Private"</c>, the generated member will automatically insert the accessibility modifier
            into property declaration:
            <code><![CDATA[
            private int Parameter { get; } = parameter;
            ]]></code>
            </para>
            <para>By default, the accessibility is <see langword="private"/> for fields and <see langword="public"/> for properties.</para>
            </remarks>
        </member>
        <member name="P:System.SourceGeneration.PrimaryConstructorParameterAttribute.RefKind">
            <summary>
            Indicates the <see langword="ref"/> kind of the generated member.
            </summary>
            <remarks>
            <para>
            This property controls the case when you want to customize the reference kind of return value of the field or property.
            For example, the value is <c>"ref readonly"</c>, the generated member will automatically insert the <see langword="ref"/> modifiers
            into declaration:
            <code><![CDATA[
            private ref readonly int _parameter = ref parameter;
            ]]></code>
            </para>
            <para>
            By default, the <see langword="ref"/> kind should be suitable with parameter's declaration.
            If the parameter is defined without any <see langword="ref"/> modifiers:
            <list type="bullet">
            <item><see langword="ref"/></item>
            <item><see langword="ref readonly"/> (May not be supported for C# 12)</item>
            <item><see langword="in"/></item>
            <item><see langword="scoped ref"/></item>
            <item><see langword="scoped ref readonly"/> (May not be supported for C# 12)</item>
            <item><see langword="scoped in"/></item>
            <item><see langword="scoped in scoped"/> (May not be supported for C# 12)</item>
            <item><see langword="scoped ref scoped"/> (May not be supported for C# 12)</item>
            <item><see langword="scoped ref readonly scoped"/> (May not be supported for C# 12)</item>
            </list>
            the generated member will automatically include a <see langword="ref"/> modifier if the modifiers don't include <see langword="scoped"/>;
            otherwise, no <see langword="ref"/> modifiers.
            If you want to set <see langword="ref readonly"/>, you should manually set this property with value <c>"ref readonly"</c> value.
            </para>
            </remarks>
        </member>
        <member name="T:System.SourceGeneration.ToStringIdentifierAttribute">
            <summary>
            Indicates the identifier name displayed in generated code for <c>ToString</c> method.
            </summary>
            <param name="displayMemberName">The display member name.</param>
        </member>
        <member name="M:System.SourceGeneration.ToStringIdentifierAttribute.#ctor(System.String)">
            <summary>
            Indicates the identifier name displayed in generated code for <c>ToString</c> method.
            </summary>
            <param name="displayMemberName">The display member name.</param>
        </member>
        <member name="T:System.Timers.ValueStopwatch">
            <summary>
            Defines a stopwatch that uses <see langword="struct"/> instead of <see langword="class"/> to optimize the performance.
            </summary>
        </member>
        <member name="F:System.Timers.ValueStopwatch.TimestampToTicks">
            <summary>
            The read-only value that indicates the formula converting from timestamp to ticks.
            </summary>
        </member>
        <member name="F:System.Timers.ValueStopwatch._startTimestamp">
            <summary>
            The inner timestamp.
            </summary>
        </member>
        <member name="M:System.Timers.ValueStopwatch.#ctor(System.Int64)">
            <summary>
            Initializes a <see cref="T:System.Timers.ValueStopwatch"/> instance via the current timestamp.
            </summary>
            <param name="startTimestamp">The timestamp value that is represented as a <see cref="T:System.Int64"/> value.</param>
        </member>
        <member name="P:System.Timers.ValueStopwatch.IsActive">
            <summary>
            Determines whether the current stopwatch is currently active.
            </summary>
        </member>
        <member name="M:System.Timers.ValueStopwatch.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:System.Timers.ValueStopwatch.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:System.Timers.ValueStopwatch.GetElapsedTime">
            <summary>
            Try to get the elapsed time.
            </summary>
            <returns>The elapsed time, specified as a <see cref="T:System.TimeSpan"/> instance.</returns>
            <exception cref="T:System.InvalidOperationException">
            Throws when the current stopwatch is not active at present.
            </exception>
        </member>
        <member name="M:System.Timers.ValueStopwatch.StartNew">
            <summary>
            Try to get a new <see cref="T:System.Timers.ValueStopwatch"/> that is running now.
            </summary>
            <returns>An instance of type <see cref="T:System.Timers.ValueStopwatch"/> that is running now.</returns>
        </member>
        <member name="T:System.Utf8Char">
            <summary>
            Represents a character as a UTF-8 code unit.
            </summary>
        </member>
        <member name="F:System.Utf8Char.MinValue">
            <summary>
            Indicates the minimum-valued instance of the current type.
            </summary>
        </member>
        <member name="F:System.Utf8Char.MaxValue">
            <summary>
            Indicates the maximum-valued instance of the current type.
            </summary>
        </member>
        <member name="F:System.Utf8Char._char">
            <summary>
            Indicates the inner character.
            </summary>
        </member>
        <member name="M:System.Utf8Char.#ctor(System.Byte)">
            <summary>
            Initializes a <see cref="T:System.Utf8Char"/> instance via the specified <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value.</param>
        </member>
        <member name="P:System.Utf8Char.CharString">
            <summary>
            Indicates the character string.
            </summary>
        </member>
        <member name="P:System.Utf8Char.System#Numerics#IMinMaxValue{System#Utf8Char}#MinValue">
            <inheritdoc/>
        </member>
        <member name="P:System.Utf8Char.System#Numerics#IMinMaxValue{System#Utf8Char}#MaxValue">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.IsDigit">
            <summary>
            Determines whether the current character is a digit.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:System.Utf8Char.IsLetter">
            <summary>
            Determines whether the current character is a letter.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:System.Utf8Char.IsUpper">
            <summary>
            Determines whether the current character is a upper-casing letter.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:System.Utf8Char.IsLower">
            <summary>
            Determines whether the current character is a lower-casing letter.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:System.Utf8Char.IsLetterOrDigit">
            <summary>
            Determines whether a character is a letter or a digit.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:System.Utf8Char.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:System.Utf8Char.Equals(System.Utf8Char)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:System.Utf8Char.CompareTo(System.Utf8Char)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:System.Utf8Char.ToUpper">
            <summary>
            Converts the current character to the upper-casing letter.
            </summary>
            <returns>The result character.</returns>
        </member>
        <member name="M:System.Utf8Char.ToLower">
            <summary>
            Converts the current character to the lower-casing letter.
            </summary>
            <returns>The result character.</returns>
        </member>
        <member name="M:System.Utf8Char.System#IComparable#CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.op_Equality(System.Utf8Char,System.Utf8Char)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.op_Inequality(System.Utf8Char,System.Utf8Char)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.op_GreaterThan(System.Utf8Char,System.Utf8Char)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.op_GreaterThanOrEqual(System.Utf8Char,System.Utf8Char)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.op_LessThan(System.Utf8Char,System.Utf8Char)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.op_LessThanOrEqual(System.Utf8Char,System.Utf8Char)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.op_Addition(System.Utf8Char,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.op_CheckedAddition(System.Utf8Char,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.op_Subtraction(System.Utf8Char,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.op_CheckedSubtraction(System.Utf8Char,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.op_Increment(System.Utf8Char)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.op_CheckedIncrement(System.Utf8Char)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.op_Decrement(System.Utf8Char)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.op_CheckedDecrement(System.Utf8Char)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8Char.op_Explicit(System.Char)~System.Utf8Char">
            <summary>
            Explicitly cast from <see cref="T:System.Char"/> instance to <see cref="T:System.Utf8Char"/> instance.
            </summary>
            <param name="utf16Char">The <see cref="T:System.Char"/> instance.</param>
        </member>
        <member name="M:System.Utf8Char.op_CheckedExplicit(System.Char)~System.Utf8Char">
            <summary>
            Explicitly cast from <see cref="T:System.Char"/> instance to <see cref="T:System.Utf8Char"/> instance,
            with range check.
            </summary>
            <param name="utf16Char">The <see cref="T:System.Char"/> instance.</param>
        </member>
        <member name="M:System.Utf8Char.op_Implicit(System.Utf8Char)~System.Byte">
            <summary>
            Implicitly cast from <see cref="T:System.Utf8Char"/> instance to <see cref="T:System.Byte"/> instance.
            </summary>
            <param name="utf8Char">The <see cref="T:System.Utf8Char"/> instance.</param>
        </member>
        <member name="M:System.Utf8Char.op_Implicit(System.Utf8Char)~System.Char">
            <summary>
            Implicitly cast from <see cref="T:System.Utf8Char"/> instance to <see cref="T:System.Char"/> instance.
            </summary>
            <param name="utf8Char">The <see cref="T:System.Utf8Char"/> instance.</param>
        </member>
        <member name="M:System.Utf8Char.op_Implicit(System.Byte)~System.Utf8Char">
            <summary>
            Implicitly cast from <see cref="T:System.Byte"/> instance to <see cref="T:System.Utf8Char"/> instance.
            </summary>
            <param name="byteValue">The <see cref="T:System.Byte"/> instance.</param>
        </member>
        <member name="M:System.JsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:System.JsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Utf8Char,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:System.Utf8String">
            <summary>
            Represents text as a sequence of UTF-8 code units.
            </summary>
        </member>
        <member name="F:System.Utf8String.Empty">
            <summary>
            Indicates the default instance.
            </summary>
        </member>
        <member name="F:System.Utf8String._value">
            <summary>
            Indicates the inner value.
            </summary>
        </member>
        <member name="M:System.Utf8String.#ctor(System.Utf8Char,System.Int32)">
            <summary>
            Initializes a <see cref="T:System.Utf8String"/> instance via the specified UTF-8 character and the specified
            times of the appearance.
            </summary>
            <param name="c">The character.</param>
            <param name="count">The times of the appearance.</param>
        </member>
        <member name="M:System.Utf8String.#ctor(System.Utf8Char*)">
            <inheritdoc cref="M:System.String.#ctor(System.Char*)"/>
        </member>
        <member name="M:System.Utf8String.#ctor(System.Utf8Char[])">
            <summary>
            Initializes a <see cref="T:System.Utf8String"/> instance via the specified array of <see cref="T:System.Utf8Char"/>s
            as the underlying array.
            </summary>
            <param name="underlyingArray">The underlying array.</param>
        </member>
        <member name="M:System.Utf8String.#ctor(System.Byte[])">
            <summary>
            Initializes a <see cref="T:System.Utf8String"/> instance via the specified array of <see cref="T:System.Byte"/>s
            as the underlying values.
            </summary>
            <param name="array">The array of <see cref="T:System.Byte"/>s.</param>
        </member>
        <member name="P:System.Utf8String.Length">
            <inheritdoc/>
        </member>
        <member name="P:System.Utf8String.UnderlyingArray">
            <summary>
            Indicates the underlying array.
            </summary>
        </member>
        <member name="P:System.Utf8String.System#Collections#Generic#IReadOnlyCollection{System#Utf8Char}#Count">
            <inheritdoc/>
        </member>
        <member name="P:System.Utf8String.Item(System.Int32)">
            <summary>
            Gets the reference of a character at the specified index in the current string.
            </summary>
            <param name="index">The index.</param>
            <returns>The reference of the character.</returns>
        </member>
        <member name="P:System.Utf8String.System#Collections#Generic#IReadOnlyList{System#Utf8Char}#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8String.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:System.Utf8String.Equals(System.Utf8String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8String.Contains(System.Utf8Char)">
            <summary>
            Determines whether the current string contains the specified UTF-8 character.
            </summary>
            <param name="c">The character.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:System.Utf8String.Contains(System.Utf8String)">
            <summary>
            Determines whether the current string contains the specified UTF-8 string.
            </summary>
            <param name="s">The string.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
        </member>
        <member name="M:System.Utf8String.GetPinnableReference">
            <target name="method">
				<summary>
					Returns a reference as the fixed position of the current instance.
					For example, the return value will be the pointer value that points to the zero-indexed
					place in an array.
				</summary>
				<returns>A reference as the fixed position of the current instance.</returns>
				<remarks>
					Beginning with C# 7, we can customize the return value type of a <see langword="fixed" /> variable
					if we implement a parameterless method called <c>GetPinnableReference</c>, returning by
					<see langword="ref" /> or <see langword="ref readonly" />. For example, if we hold a fixed buffer
					of element type:
					<code>
<![CDATA[
class ExampleType
{
    private fixed short _maskList[100];

    public ref readonly short GetPinnableReference() => ref _maskList[0];
}
]]>
					</code>
					We can use <see langword="fixed" /> statement to define a variable of type <see langword="short" />*
					as the left-value.
					<code>
<![CDATA[
var instance = new ExampleType();
fixed (short* ptr = instance)
{
    // Operation here.
}
]]>
					</code>
				</remarks>
			</target>
        </member>
        <member name="M:System.Utf8String.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8String.CompareTo(System.Utf8String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8String.IndexOf(System.Utf8Char)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified UTF-8 character in this string.
            </summary>
            <param name="c">The character.</param>
            <returns>
            The zero-based index position of <paramref name="c"/> if that character is found, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.Utf8String.IndexOf(System.Utf8String)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified UTF-8 string in this string.
            </summary>
            <param name="s">The character.</param>
            <returns>
            The zero-based index position of <paramref name="s"/> if that character is found, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.Utf8String.ToString">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8String.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:System.Utf8String.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8String.System#Collections#Generic#IEnumerable{System#Utf8Char}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8String.Compare(System.Utf8String,System.Utf8String)">
            <summary>
            Compares two values.
            </summary>
            <param name="strA">The first string to be compared.</param>
            <param name="strB">The second string to be compared.</param>
            <returns>An <see cref="T:System.Int32"/> value indicating which one is greater.</returns>
        </member>
        <member name="M:System.Utf8String.op_Addition(System.Utf8String,System.Utf8String)">
            <summary>
            Catenate two <see cref="T:System.Utf8String"/> instances.
            </summary>
            <param name="left">The left-side instance to be catenated.</param>
            <param name="right">The right-side instance to be catenated.</param>
            <returns>The final string.</returns>
        </member>
        <member name="M:System.Utf8String.StringLengthOf(System.Utf8Char*)">
            <summary>
            Get the length of the specified string which is represented by a <see cref="T:System.Utf8Char"/>*.
            </summary>
            <param name="ptr">The pointer.</param>
            <returns>The total length.</returns>
            <exception cref="T:System.ArgumentNullException">
            Throws when the argument <paramref name="ptr"/> is <see langword="null"/>.
            </exception>
            <remarks>
            In C#, this function is unsafe because the implementation of
            <see cref="T:System.Utf8String"/> types between C and C# is totally different.
            In C, <see cref="T:System.Utf8String"/> is like a <see cref="T:System.Utf8Char"/>* or a
            <see cref="T:System.Utf8Char"/>[], they ends with the terminator symbol <c>'\0'</c>.
            However, C# not.
            </remarks>
        </member>
        <member name="M:System.Utf8String.op_Equality(System.Utf8String,System.Utf8String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8String.op_Inequality(System.Utf8String,System.Utf8String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8String.op_GreaterThan(System.Utf8String,System.Utf8String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8String.op_GreaterThanOrEqual(System.Utf8String,System.Utf8String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8String.op_LessThan(System.Utf8String,System.Utf8String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8String.op_LessThanOrEqual(System.Utf8String,System.Utf8String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Utf8String.op_Explicit(System.Utf8String)~System.Utf8Char[]">
            <summary>
            Explicitly cast from <see cref="T:System.Utf8String"/> to <see cref="T:System.Utf8Char"/>[].
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:System.Utf8String.op_Explicit(System.String)~System.Utf8String">
            <summary>
            Explicitly cast from <see cref="T:System.String"/> to <see cref="T:System.Utf8String"/> instance.
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:System.Utf8String.op_CheckedExplicit(System.String)~System.Utf8String">
            <summary>
            Explicitly cast from <see cref="T:System.String"/> to <see cref="T:System.Utf8String"/> instance,
            with character range check.
            </summary>
            <param name="s">The string.</param>
            <exception cref="T:System.ArithmeticException">
            Throws when a certain character in the sequence cannot convert to a UTF-8 formatted character.
            </exception>
        </member>
        <member name="M:System.Utf8String.op_Implicit(System.Utf8String)~System.String">
            <summary>
            Implicitly cast from <see cref="T:System.Utf8String"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:System.Utf8String.op_Implicit(System.Utf8Char[])~System.Utf8String">
            <summary>
            Implicitly cast from <see cref="T:System.Utf8Char"/>[] to <see cref="T:System.Utf8String"/>.
            </summary>
            <param name="underlyingArray">The underlying array.</param>
        </member>
        <member name="M:System.Utf8String.op_Implicit(System.Byte[])~System.Utf8String">
            <summary>
            Implicitly cast from <see cref="T:System.Byte"/>[] to <see cref="T:System.Utf8String"/>.
            </summary>
            <param name="underlyingArray">The underlying array.</param>
        </member>
        <member name="M:System.Utf8String.op_Implicit(System.ReadOnlySpan{System.Byte})~System.Utf8String">
            <summary>
            Implicitly cast from <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/> to <see cref="T:System.Utf8String"/>.
            </summary>
            <param name="underlyingArray">The underlying array.</param>
        </member>
    </members>
</doc>
