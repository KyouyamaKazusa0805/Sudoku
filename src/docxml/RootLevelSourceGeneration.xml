<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RootLevelSourceGeneration</name>
    </assembly>
    <members>
        <member name="T:Accessibility">
            <summary>
            Defines an accessibility kind.
            </summary>
        </member>
        <member name="F:Accessibility.File">
            <summary>
            Indicates the accessibility is <see langword="file"/>-scoped.
            </summary>
        </member>
        <member name="F:Accessibility.Private">
            <summary>
            Indicates the accessibility is <see langword="private"/>.
            </summary>
        </member>
        <member name="F:Accessibility.Protected">
            <summary>
            Indicates the accessibility is <see langword="protected"/>.
            </summary>
        </member>
        <member name="F:Accessibility.PrivateProtected">
            <summary>
            Indicates the accessibility is <see langword="private protected"/>.
            </summary>
        </member>
        <member name="F:Accessibility.Internal">
            <summary>
            Indicates the accessibility is <see langword="internal"/>.
            </summary>
        </member>
        <member name="F:Accessibility.ProtectedInternal">
            <summary>
            Indicates the accessibility is <see langword="protected internal"/>.
            </summary>
        </member>
        <member name="F:Accessibility.Public">
            <summary>
            Indicates the accessibility is <see langword="public"/>.
            </summary>
        </member>
        <member name="T:Banner">
            <summary>
            Banner provider type.
            </summary>
        </member>
        <member name="F:Banner.AutoGenerated">
            <summary>
            The auto-generated banner.
            </summary>
        </member>
        <member name="T:AccessibilityExtensions">
            <summary>
            Provides with extension methods for <see cref="T:Accessibility"/>.
            </summary>
            <seealso cref="T:Accessibility"/>
        </member>
        <member name="M:AccessibilityExtensions.GetName(Accessibility)">
            <summary>
            Gets the name of the accessibility enumeration field.
            </summary>
            <param name="this">The field.</param>
            <returns>The name of the field.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AttributeDataExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Microsoft.CodeAnalysis.AttributeData"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.AttributeData"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AttributeDataExtensions.GetNamedArgument``1(Microsoft.CodeAnalysis.AttributeData,System.String,``0)">
            <summary>
            Try to get the named arguments in the specified attribute data.
            </summary>
            <typeparam name="T">The type of the named argument.</typeparam>
            <param name="this">The attribute data instance.</param>
            <param name="namedArgumentName">The named argument name.</param>
            <param name="defaultValue">Indicates the default value of the current named argument.</param>
            <returns>The found value.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExtendedSymbolDisplayFormat">
            <summary>
            Provides extended <see cref="T:Microsoft.CodeAnalysis.SymbolDisplayFormat"/>s instance that is for types.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.SymbolDisplayFormat"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtendedSymbolDisplayFormat.FullyQualifiedFormatWithConstraints">
            <summary>
            Indicates the type format that is the full name of the type,
            and is with type argument constraints.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorExecutionContextExtensions.AddSource(Microsoft.CodeAnalysis.GeneratorExecutionContext@,System.String,System.String,System.String)">
            <summary>
            Simply calls <see cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,System.String)"/>.
            </summary>
            <param name="this">The current context.</param>
            <param name="fileName">The file name. The file name may be same as the symbol name</param>
            <param name="sourceGeneratorName">The source generator name.</param>
            <param name="sourceCode">The source code.</param>
            <seealso cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,System.String)"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions">
            <summary>
            Provides extension methods for <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.IsDerivedFrom(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Determines whether the current type is derived from the specified type (a <see langword="class"/>, not <see langword="interface"/>).
            </summary>
            <param name="this">The current type.</param>
            <param name="baseType">The base type to be checked.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.GetAllMembers(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Gets all possible members in a type, even including its base type members.
            </summary>
            <param name="this">The type symbol.</param>
            <param name="enumerateInterfaces">Indicates whether this method enumerates interface members.</param>
            <returns>All members.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.ToFileName(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Get the file name of the type symbol.
            </summary>
            <param name="this">The symbol.</param>
            <returns>
            The file name. Due to the limited file name and the algorithm, if:
            <list type="bullet">
            <item>
            The character is <c><![CDATA['<']]></c> or <c><![CDATA['>']]></c>:
            Change them to <c>'['</c> and <c>']'</c>.
            </item>
            <item>The character is <c>','</c>: Change it to <c>'_'</c>.</item>
            <item>The character is <c>' '</c>: Remove it.</item>
            </list>
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamedTypeSymbolExtensions.GetTypeKindModifier(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Gets the type kind modifier for a symbol.
            </summary>
            <param name="this">The named type symbol.</param>
            <returns>The string as the representation of the type kind modifier.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when the current named type symbol holds an invalid case that doesn't contain
            any possible type kind modifier.
            </exception>
        </member>
        <member name="T:Microsoft.CodeAnalysis.INamespaceSymbolExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Microsoft.CodeAnalysis.INamespaceSymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.INamespaceSymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.INamespaceSymbolExtensions.GetAllNestedTypes(Microsoft.CodeAnalysis.INamespaceSymbol)">
            <summary>
            Try to fetch all possible types that is from the specified namespace and its children namespaces.
            </summary>
            <param name="this">The namespace.</param>
            <returns>All found types.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ISymbolExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ISymbolExtensions.ContainsAttribute``1(``0,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> instance has marked the specified attribute type.
            </summary>
            <typeparam name="TSymbol">The type of the symbol.</typeparam>
            <param name="this">The instance.</param>
            <param name="attributeType">The attribute type.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ITypeSymbolExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/>.
            </summary>
            <seealso cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ITypeSymbolExtensions.GetCollectionElementType(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Try to treat the current type as a collection type, to fetch its element type.
            </summary>
            <param name="this">The current type symbol.</param>
            <returns>The type of element.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.StringExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.String"/>.
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the specified string value as the camel-casing.
            </summary>
            <param name="this">The string.</param>
            <returns>The converted string value.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.StringExtensions.ToPascalCase(System.String)">
            <summary>
            Converts the specified string value as the pascal-casing.
            </summary>
            <param name="this">The string.</param>
            <returns>The converted string value.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.StringExtensions.IsKeyword(System.String)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsKeywordKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)"/>
            <param name="this">The string.</param>
        </member>
        <member name="T:System.Collections.Immutable.ImmutableArrayExtensions">
            <summary>
            Provides with extension methods on <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Immutable.ImmutableArray`1"/>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.TryGetValueOrDefault``1(System.Collections.Immutable.ImmutableArray{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.TypedConstant}},System.String,``0@)">
            <summary>
            Try to get the target value of the named argument collection, whose key is equal to the specified one.
            </summary>
            <typeparam name="T">The type of the target value.</typeparam>
            <param name="this">The collection of named arguments.</param>
            <param name="name">The name to be compared.</param>
            <param name="resultValue">The final found result value.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating whether we can use the argument <paramref name="resultValue"/>.</returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.CastToNotNull``1(System.Collections.Immutable.ImmutableArray{System.Nullable{``0}})">
            <summary>
            Casts the current array elements into target typed values.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The array to be casted.</param>
            <returns>The casted array.</returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.CastToNotNull``1(System.Collections.Immutable.ImmutableArray{``0})">
            <summary>
            Casts the current array elements into target typed values.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">The array to be casted.</param>
            <returns>The casted array.</returns>
        </member>
        <member name="T:System.Collections.Generic.KeyValuePairExtensions">
            <summary>
            Provides with the extension methods on type <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.KeyValuePair`2"/>
        </member>
        <member name="M:System.Collections.Generic.KeyValuePairExtensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstruct the instance of type <see cref="T:System.Collections.Generic.KeyValuePair`2"/> into two values:
            <list type="table">
            <item>
            <term><see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/></term>
            <description>The key.</description>
            </item>
            <item>
            <term><see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/></term>
            <description>The value.</description>
            </item>
            </list>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="T:System.Linq.SymbolGroupByExtensions">
            <summary>
            Represents extension methods on <see cref="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>
            with symbol checking.
            </summary>
            <seealso cref="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>
        </member>
        <member name="M:System.Linq.SymbolGroupByExtensions.GroupBy``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,Microsoft.CodeAnalysis.INamedTypeSymbol},System.Boolean)">
            <inheritdoc cref="M:System.Linq.SymbolGroupByExtensions.GroupBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,Microsoft.CodeAnalysis.INamedTypeSymbol},System.Boolean)"/>
        </member>
        <member name="M:System.Linq.SymbolGroupByExtensions.GroupBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,Microsoft.CodeAnalysis.INamedTypeSymbol},System.Boolean)">
            <inheritdoc cref="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})"/>
        </member>
        <member name="T:System.Xml.XmlDocumentExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
            <seealso cref="T:System.Xml.XmlDocument"/>
        </member>
        <member name="M:System.Xml.XmlDocumentExtensions.OnLoading(System.Xml.XmlDocument,System.String)">
            <summary>
            Try to load the XML document located to the specified path.
            </summary>
            <param name="this">The current XML document instance.</param>
            <param name="path">The path to load.</param>
            <returns>The current reference to the XML document.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Declare this to get init properties.
            </summary>
            <remarks>
            Please see
            <see href="https://github.com/dotnet/roslyn/issues/45510#issuecomment-694977239">this link</see>
            to learn more details about this type.
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>
            Represent a type can be used to index a collection either from the start or the end.
            </summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>
            Construct an Index using a value and indicating if the index is from the start or from the end.
            </summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element
            and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
            <remarks>Construct a Range object using the start and end indexes.</remarks>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
            <remarks>Construct a Range object using the start and end indexes.</remarks>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:NameAttribute">
            <summary>
            The name attribute that applies to a field in enumeration field, indicating its name.
            </summary>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:NameAttribute.#ctor(System.String)">
            <summary>
            The name attribute that applies to a field in enumeration field, indicating its name.
            </summary>
            <param name="name">The name of the field.</param>
        </member>
        <member name="P:NameAttribute.Name">
            <summary>
            Indicates the name of the attribute.
            </summary>
        </member>
        <member name="T:VersionValueGenerator">
            <summary>
            Defines the incremental source generator that is used for the generation on sync the solution version.
            </summary>
        </member>
        <member name="M:VersionValueGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <inheritdoc/>
        </member>
    </members>
</doc>
