<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Analytics.Fishing</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Concepts.Fish">
            <summary>
            Represents a fish pattern.
            </summary>
            <param name="digit">Indicates the digit to be used.</param>
            <param name="baseSets">Indicates the base sets.</param>
            <param name="coverSets">Indicates the cover sets.</param>
            <param name="exofins">Indicates the exo-fins.</param>
            <param name="endofins">Indicates the endo-fins.</param>
        </member>
        <member name="M:Sudoku.Concepts.Fish.#ctor(System.Int32,System.Int32,System.Int32,Sudoku.Concepts.CellMap@,Sudoku.Concepts.CellMap@)">
            <summary>
            Represents a fish pattern.
            </summary>
            <param name="digit">Indicates the digit to be used.</param>
            <param name="baseSets">Indicates the base sets.</param>
            <param name="coverSets">Indicates the cover sets.</param>
            <param name="exofins">Indicates the exo-fins.</param>
            <param name="endofins">Indicates the endo-fins.</param>
        </member>
        <member name="P:Sudoku.Concepts.Fish.IsComplex">
            <summary>
            Indicates whether the pattern is complex fish.
            </summary>
        </member>
        <member name="P:Sudoku.Concepts.Fish.Fins">
            <summary>
            Indicates all fins.
            </summary>
        </member>
        <member name="P:Sudoku.Concepts.Fish.ShapeKind">
            <summary>
            Indicates the shape kind of the current fish.
            </summary>
        </member>
        <member name="M:Sudoku.Concepts.Fish.Equals(Sudoku.Concepts.Fish@)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:Sudoku.Concepts.Fish.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Sudoku.Concepts.Fish.ToString``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Concepts.Fish.GetFinKind(Sudoku.Concepts.Grid@)">
            <summary>
            Try to get the fin kind using the specified grid as candidate references.
            </summary>
            <param name="grid">The grid to be used.</param>
            <returns>The fin kind.</returns>
        </member>
        <member name="M:Sudoku.Concepts.Fish.System#IEquatable{Sudoku#Concepts#Fish}#Equals(Sudoku.Concepts.Fish)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Concepts.Fish.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="P:Sudoku.Concepts.Fish.Digit">
            <summary>
            The generated property declaration for parameter <c>digit</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Concepts.Fish.BaseSets">
            <summary>
            The generated property declaration for parameter <c>baseSets</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Concepts.Fish.CoverSets">
            <summary>
            The generated property declaration for parameter <c>coverSets</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Concepts.Fish.Exofins">
            <summary>
            The generated property declaration for parameter <c>exofins</c>.
            </summary>
        </member>
        <member name="P:Sudoku.Concepts.Fish.Endofins">
            <summary>
            The generated property declaration for parameter <c>endofins</c>.
            </summary>
        </member>
        <member name="M:Sudoku.Concepts.Fish.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Sudoku.Concepts.Fish.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Sudoku.Concepts.Fish.op_Equality(Sudoku.Concepts.Fish@,Sudoku.Concepts.Fish@)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Sudoku.Concepts.Fish.op_Inequality(Sudoku.Concepts.Fish@,Sudoku.Concepts.Fish@)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="M:Sudoku.Concepts.Fish.System#Numerics#IEqualityOperators{Sudoku#Concepts#Fish,Sudoku#Concepts#Fish,System#Boolean}#op_Equality(Sudoku.Concepts.Fish,Sudoku.Concepts.Fish)">
            <inheritdoc/>
        </member>
        <member name="M:Sudoku.Concepts.Fish.System#Numerics#IEqualityOperators{Sudoku#Concepts#Fish,Sudoku#Concepts#Fish,System#Boolean}#op_Inequality(Sudoku.Concepts.Fish,Sudoku.Concepts.Fish)">
            <inheritdoc/>
        </member>
        <member name="T:Sudoku.Concepts.FishFinKind">
            <summary>
            Indicates a fin modifier that is used for a complex fish pattern.
            </summary>
            <remarks><flags-attribute>
		<para>
			<i>
				This type is marked <see cref="T:System.FlagsAttribute" />, which means you can use
				<see langword="operator" /> | to combine multiple fields.
			</i>
		</para>
	</flags-attribute></remarks>
        </member>
        <member name="F:Sudoku.Concepts.FishFinKind.Normal">
            <summary>
            Indicates the normal fish (i.e. no fins).
            </summary>
        </member>
        <member name="F:Sudoku.Concepts.FishFinKind.Finned">
            <summary>
            Indicates the finned fish
            (i.e. contains fins, but the fish may be regular when the fins are removed).
            </summary>
        </member>
        <member name="F:Sudoku.Concepts.FishFinKind.Sashimi">
            <summary>
            Indicates the sashimi fish
            (i.e. contains fins, and the fish may be degenerated to hidden singles when the fins are removed).
            </summary>
        </member>
        <member name="F:Sudoku.Concepts.FishFinKind.Siamese">
            <summary>
            Indicates the Siamese fish (i.e. two fish share same base sets, with different cover sets).
            </summary>
        </member>
        <member name="T:Sudoku.Concepts.FishShapeKind">
            <summary>
            Indicates a shape modifier that is used for a complex fish pattern.
            </summary>
            <remarks><flags-attribute>
		<para>
			<i>
				This type is marked <see cref="T:System.FlagsAttribute" />, which means you can use
				<see langword="operator" /> | to combine multiple fields.
			</i>
		</para>
	</flags-attribute></remarks>
        </member>
        <member name="F:Sudoku.Concepts.FishShapeKind.Basic">
            <summary>
            Indicates the basic fish.
            </summary>
        </member>
        <member name="F:Sudoku.Concepts.FishShapeKind.Franken">
            <summary>
            Indicates the franken fish.
            </summary>
        </member>
        <member name="F:Sudoku.Concepts.FishShapeKind.Mutant">
            <summary>
            Indicates the mutant fish.
            </summary>
        </member>
    </members>
</doc>
