global using System.Algorithm;
global using System.Globalization;
global using System.Runtime.Versioning;
global using System.SourceGeneration;
global using System.Timers;
global using Expressive;
global using Expressive.Exceptions;
global using Expressive.Expressions;
global using Expressive.Expressions.Binary;
global using Expressive.Operators;
global using Sudoku.Analytics;
global using Sudoku.Analytics.Buffers;
global using Sudoku.Analytics.Categorization;
global using Sudoku.Analytics.Eliminations;
global using Sudoku.Analytics.InternalHelpers;
global using Sudoku.Analytics.Metadata;
global using Sudoku.Analytics.Patterns;
global using Sudoku.Analytics.Rating;
global using Sudoku.Analytics.Resources;
global using Sudoku.Analytics.Steps;
global using Sudoku.Analytics.StepSearchers;
global using Sudoku.Compatibility.Hodoku;
global using Sudoku.Compatibility.SudokuExplainer;
global using Sudoku.Facts;
global using Sudoku.Filtering.Expressions;
global using Sudoku.Filtering.Operators;
global using Sudoku.Rendering;
global using Sudoku.Rendering.Nodes;
global using Sudoku.Runtime.MaskServices;
global using Sudoku.Text.Formatting;
global using Sudoku.Text.Notations;
global using static System.Algorithm.Sequences;
global using static System.Math;
global using static Sudoku.Analytics.Buffers.CachedFields;
global using static Sudoku.Analytics.CommonReadOnlies;
global using static Sudoku.Analytics.Resources.MergedResources;
global using RawResources = Sudoku.Analytics.Resources.Resources;
global using ChainBranch = System.Collections.Generic.Dictionary<byte, Sudoku.Analytics.Patterns.NodeSet>;
global using unsafe LoopChecker = delegate*<in Sudoku.Concepts.CellMap, bool>;
global using ChainNodeListWithHeadCandidate = System.Collections.Generic.Dictionary<Sudoku.Analytics.Patterns.ChainNode, /*Candidate*/ int>;
global using ExtraDifficultyCase = (string Name, decimal Value);
global using DifficultyRange = (Sudoku.Compatibility.SudokuExplainer.SudokuExplainerDifficultyRatingRange? Original, Sudoku.Compatibility.SudokuExplainer.SudokuExplainerDifficultyRatingRange? Advanced);
global using HouseCellsTuple = (Sudoku.Concepts.CellMap LineMap, Sudoku.Concepts.CellMap BlockMap, Sudoku.Concepts.CellMap IntersectionMap, byte[] OtherBlocks);
global using HousePair = (byte Line, byte Block);
