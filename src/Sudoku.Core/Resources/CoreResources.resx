<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BlockLabel" xml:space="preserve">
    <value>Block {0}</value>
  </data>
  <data name="CandidateLabel" xml:space="preserve">
    <value>{0}, digit {1}</value>
  </data>
  <data name="CellLabel" xml:space="preserve">
    <value>row {0} column {1}</value>
  </data>
  <data name="CellsLabel" xml:space="preserve">
    <value>cells: {0}</value>
  </data>
  <data name="ColumnLabel" xml:space="preserve">
    <value>Column {0}</value>
  </data>
  <data name="ConjugatePairWith" xml:space="preserve">
    <value>{0} conjugates with {1}, for digit {2}</value>
  </data>
  <data name="HousesLabel" xml:space="preserve">
    <value>houses: {0}</value>
  </data>
  <data name="LockedCandidatesLabel" xml:space="preserve">
    <value>{0} {1}</value>
  </data>
  <data name="MegaColumnLabel" xml:space="preserve">
    <value>Mega column {0}</value>
  </data>
  <data name="MegaLinesLabel" xml:space="preserve">
    <value>Mega lines: {0}</value>
  </data>
  <data name="MegaRowLabel" xml:space="preserve">
    <value>Mega row {0}</value>
  </data>
  <data name="RowLabel" xml:space="preserve">
    <value>Row {0}</value>
  </data>
  <data name="ErrorInfo_SubsetsExceeded" xml:space="preserve">
    <value>Both cells count and subset size is too large, which may cause potential out of memory exception. This operator will throw this exception to calculate the result, in order to prevent any possible exceptions thrown.</value>
  </data>
  <data name="ErrorInfo_NotExist" xml:space="preserve">
    <value>The file does not exist.</value>
  </data>
  <data name="ErrorInfo_MultipleSamePropertiesFound" xml:space="preserve">
    <value>Multiple same properties are found.</value>
  </data>
  <data name="ErrorInfo_DifferentExistenceOfConfigAndLibraryFile" xml:space="preserve">
    <value>Different existence of config file and library file.</value>
  </data>
  <data name="ErrorInfo_FileShouldBeInitializedFirst" xml:space="preserve">
    <value>Related files should be initialized first.</value>
  </data>
  <data name="Error_UnrecognizedGridFormat" xml:space="preserve">
    <value>You cannot append text that cannot be recognized as a valid sudoku grid.</value>
  </data>
  <data name="Error_ArgExtensionShouldBeValid" xml:space="preserve">
    <value>The argument should contains the prefix period token.</value>
  </data>
  <data name="ErrorInfo_LibraryShouldBeInitialized" xml:space="preserve">
    <value>The library is not initialized. It must be initialized file, ensuring the file in local exists.</value>
  </data>
  <data name="ErrorInfo_PointerCannotMove" xml:space="preserve">
    <value>The pointer cannot move.</value>
  </data>
  <data name="ErrorInfo_GridInvalid" xml:space="preserve">
    <value>The grid is invalid - it may contain invalid internal data, or it is invalid as an argument to the method.</value>
  </data>
  <data name="ErrorInfo_GridMultipleSolutions" xml:space="preserve">
    <value>The grid contains multiple solutions.</value>
  </data>
  <data name="ErrorInfo_GridNoSolution" xml:space="preserve">
    <value>The grid has no possible solution.</value>
  </data>
  <data name="ErrorInfo_StringValueInvalidToBeParsed" xml:space="preserve">
    <value>The string value is invalid to be parsed.</value>
  </data>
  <data name="ErrorInfo_LengthMustBeMatched" xml:space="preserve">
    <value>The length of the string must be {0}.</value>
  </data>
  <data name="ErrorInfo_MultipleChuteValuesFound" xml:space="preserve">
    <value>Multiple chute values found.</value>
  </data>
  <data name="ErrorInfo_MultipleConjugatePairValuesFound" xml:space="preserve">
    <value>Multiple conjuagte pair values found.</value>
  </data>
  <data name="ErrorInfo_GridInvalidCellState" xml:space="preserve">
    <value>The grid cannot keep invalid cell state value.</value>
  </data>
  <data name="ErrorInfo_NoElementsInSequence" xml:space="preserve">
    <value>No possible elements can be found in the current sequence.</value>
  </data>
  <data name="ErrorInfo_InvalidStateOnParsing" xml:space="preserve">
    <value>Invalid state on parsing values.</value>
  </data>
  <data name="ErrorInfo_ContainsEmptySegmentOnParsing" xml:space="preserve">
    <value>The string contains empty segment.</value>
  </data>
  <data name="ErrorInfo_DuplicatedValuesMayExistOrInvalid" xml:space="preserve">
    <value>Duplicated or invalid values found.</value>
  </data>
  <data name="SymmetricType_None" xml:space="preserve">
    <value>No symmetry</value>
  </data>
  <data name="SymmetricType_Central" xml:space="preserve">
    <value>Central</value>
  </data>
  <data name="SymmetricType_Diagonal" xml:space="preserve">
    <value>Diagonal</value>
  </data>
  <data name="SymmetricType_XAxis" xml:space="preserve">
    <value>X axis</value>
  </data>
  <data name="SymmetricType_YAxis" xml:space="preserve">
    <value>Y axis</value>
  </data>
  <data name="SymmetricType_AxisBoth" xml:space="preserve">
    <value>Both axes</value>
  </data>
  <data name="SymmetricType_DiagonalBoth" xml:space="preserve">
    <value>Both diagonals</value>
  </data>
  <data name="SymmetricType_All" xml:space="preserve">
    <value>All symmetry</value>
  </data>
  <data name="SymmetricType_AntiDiagonal" xml:space="preserve">
    <value>Anti-diagonal</value>
  </data>
  <data name="ErrorInfo_MultipleFlagsExist" xml:space="preserve">
    <value>Multiple flags exist. The method only allows the enumeration field only holds one flag value.</value>
  </data>
  <data name="Message_LibraryInitializedException" xml:space="preserve">
    <value>The library (local path: '{0}\{1}') has already been initialized.</value>
  </data>
  <data name="ErrorInfo_CellsShouldInSameLine" xml:space="preserve">
    <value>Two cells must be in a same line (row or column).</value>
  </data>
  <data name="RowName" xml:space="preserve">
    <value>Row</value>
  </data>
  <data name="ColumnName" xml:space="preserve">
    <value>Column</value>
  </data>
  <data name="DigitName" xml:space="preserve">
    <value>Digit</value>
  </data>
  <data name="ErrorInfo_CannotAssignSuccessForFailureCases" xml:space="preserve">
    <value>Cannot assign success field to describe such failure.</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="ErrorInfo_CannotSolveAPuzzleAlreadySolved" type="System.Resources.ResXNullRef, System.Windows.Forms">
	  <value>Cannot solve a puzzle that has already been solved.</value>
  </data>
  <data name="ErrorInfo_NotSupportedForSukakuPuzzles" xml:space="preserve">
    <value>This function does not support for Sukaku puzzles.</value>
  </data>
</root>