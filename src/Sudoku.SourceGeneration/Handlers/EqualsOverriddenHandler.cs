namespace Sudoku.SourceGeneration.Handlers;

/// <summary>
/// The generator handler for default overridden of <c>Equals</c>.
/// </summary>
internal sealed class EqualsOverriddenHandler : IIncrementalGeneratorAttributeHandler<EqualsOverriddenCollectedResult>
{
	/// <inheritdoc/>
	public void Output(SourceProductionContext spc, ImmutableArray<EqualsOverriddenCollectedResult> values)
	{
		var codeSnippets = new List<string>();
		foreach (var value in values)
		{
			if (value is not (var mode, var modifiers, { Name: var typeName, ContainingNamespace: var @namespace } type, var paramName))
				continue;

			var (_, _, _, _, genericParamList, _, _, _, _, _) = SymbolOutputInfo.FromSymbol(type);
			var extraAttributeStr = mode switch
			{
				0 => """
				[global::System.Obsolete(global::System.Runtime.Messages.RefStructDefaultImplementationMessage.OverriddenEqualsMethod, false)]
						[global::System.Diagnostics.DebuggerHiddenAttribute]
						[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
							
				""",
				_ => string.Empty
			};
			var targetExpression = mode switch
			{
				0 => "false",
				1 => $"{paramName} is {type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)} comparer && Equals(comparer)",
				2 => $"Equals({paramName} as {type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)})"
			};
			var attributeStr = mode switch
			{
				0 => string.Empty,
				1 or 2 => "[global::System.Diagnostics.CodeAnalysis.NotNullWhenAttribute(true)] "
			};

			var namespaceStr = @namespace.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)["global::".Length..];
			codeSnippets.Add(
				$$"""
				namespace {{namespaceStr}}
				{
					partial {{type.GetTypeKindModifier()}} {{typeName}}{{genericParamList}}
					{
						/// <inheritdoc cref="object.Equals(object?)"/>
						[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
						[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{typeof(Generator).FullName}}", "{{Value}}")]
						[global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
						{{extraAttributeStr}}{{modifiers}} bool Equals({{attributeStr}}object? {{paramName}})
							=> {{targetExpression}};
					}
				}
				"""
			);
		}

		spc.AddSource(
			$"DefaultOverrides.g.{Shortcuts.GeneratedOverriddenMemberEquals}.cs",
			$"""
			// <auto-generated/>

			#nullable enable

			{string.Join("\r\n\r\n", codeSnippets)}
			"""
		);
	}

	/// <inheritdoc/>
	public EqualsOverriddenCollectedResult? Transform(GeneratorAttributeSyntaxContext gasc, CancellationToken cancellationToken)
	{
		if (gasc is not
			{
				Attributes: [{ ConstructorArguments: [{ Value: int rawMode }] }],
				TargetNode: MethodDeclarationSyntax { Modifiers: var modifiers },
				TargetSymbol: IMethodSymbol
				{
					OverriddenMethod: var overriddenMethod,
					ContainingType: { } type,
					Name: nameof(Equals),
					IsOverride: true,
					IsStatic: false,
					ReturnType.SpecialType: System_Boolean,
					IsGenericMethod: false,
					Parameters: [{ Name: var parameterName, Type: { SpecialType: System_Object, NullableAnnotation: Annotated } }]
				} method
			})
		{
			return null;
		}

		// Check whether the method is overridden from object.Equals(object?).
		var rootMethod = overriddenMethod;
		var currentMethod = method;
		for (; rootMethod is not null; rootMethod = rootMethod.OverriddenMethod, currentMethod = currentMethod!.OverriddenMethod) ;
		if (currentMethod!.ContainingType.SpecialType is not (System_Object or System_ValueType))
			return null;

		if ((rawMode, type) switch
		{
			(0, { TypeKind: TypeKind.Struct, IsRefLikeType: true }) => false,
			(1, _) => false,
			(2, { TypeKind: TypeKind.Class }) => false,
			_ => true
		})
		{
			return null;
		}

		return new(rawMode, modifiers, type, parameterName);
	}
}
