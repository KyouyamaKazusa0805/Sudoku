using Sudoku.Diagnostics.CodeGen;

namespace Sudoku.SourceGeneration.Handlers;

/// <summary>
/// The generator handler for default overridden of <c>GetHashCode</c>.
/// </summary>
internal sealed class GetHashCodeOveriddenHandler : IIncrementalGeneratorAttributeHandler<GetHashCodeCollectedResult>
{
	/// <inheritdoc/>
	public void Output(SourceProductionContext spc, ImmutableArray<GetHashCodeCollectedResult> values)
	{
		var codeSnippets = new List<string>();
		foreach (var value in values)
		{
			if (value is not (var mode, var modifiers, { Name: var typeName, ContainingNamespace: var @namespace } type, var rawMemberNames))
				continue;

			var (_, _, _, _, genericParamList, _, _, _, _, _) = SymbolOutputInfo.FromSymbol(type);
			var needCast = mode switch
			{
				1 when rawMemberNames.First() is var name
					=> (from m in type.GetMembers() where m.Name == name select m).FirstOrDefault() switch
					{
						IFieldSymbol field => field is not { Type.SpecialType: System_Int32, RefKind: RefKind.None },
						IPropertySymbol property => property is not { Type.SpecialType: System_Int32, RefKind: RefKind.None },
						IMethodSymbol { Parameters: [] } method => method is not { ReturnType.SpecialType: System_Int32, RefKind: RefKind.None },
						_ => null
					},
				_ => default(bool?)
			};

			var extraAttributeStr = mode switch
			{
				0 => """
				[global::System.Obsolete(global::System.Runtime.Messages.RefStructDefaultImplementationMessage.OverriddenGetHashCodeMethod, false)]
						[global::System.Diagnostics.DebuggerHiddenAttribute]
						[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
							
				""",
				_ => string.Empty
			};
			var targetExpression = (mode, rawMemberNames.ToArray(), needCast) switch
			{
				(0, [], _)
					=> $"\t=> throw new global::System.NotSupportedException(global::System.Runtime.Messages.RefStructDefaultImplementationMessage.OverriddenGetHashCodeMethod);",
				(1, [var memberName], true or null)
					=> $"\t=> (int){memberName};",
				(1, [var memberName], _)
					=> $"\t=> {memberName};",
				(2, { Length: <= 8 } memberNames, _) when string.Join(", ", from e in memberNames select e) is var a
					=> $"\t=> global::System.HashCode.Combine({a});",
				(2, { Length: > 8 } memberNames, _) when string.Join("\r\n\t\t\t", from e in memberNames select $"result.Add({e});") is var a
					=> $$"""
					{
								var result = new global::System.HashCode();
								{{a}}
								return result.ToHashCode();
							}
					""",
			};

			var namespaceStr = @namespace.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)["global::".Length..];
			codeSnippets.Add(
				$$"""
				namespace {{namespaceStr}}
				{
					partial {{type.GetTypeKindModifier()}} {{typeName}}{{genericParamList}}
					{
						/// <inheritdoc cref="object.GetHashCode"/>
						[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
						[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{typeof(Generator).FullName}}", "{{VersionValue}}")]
						[global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
						{{extraAttributeStr}}{{modifiers}} int GetHashCode()
						{{targetExpression}}
					}
				}
				"""
			);
		}

		spc.AddSource(
			$"DefaultOverrides.g.{Shortcuts.GeneratedOverriddenMemberGetHashCode}.cs",
			$"""
			// <auto-generated/>

			#nullable enable

			{string.Join("\r\n\r\n", codeSnippets)}
			"""
		);
	}

	/// <inheritdoc/>
	public GetHashCodeCollectedResult? Transform(GeneratorAttributeSyntaxContext gasc, CancellationToken cancellationToken)
	{
		if (gasc is not
			{
				Attributes: [{ ConstructorArguments: [{ Value: int rawMode }, { Values: var extraArguments }] }],
				TargetNode: MethodDeclarationSyntax { Modifiers: var modifiers },
				TargetSymbol: IMethodSymbol
				{
					OverriddenMethod: var overriddenMethod,
					ContainingType: { } type,
					Name: nameof(GetHashCode),
					IsOverride: true,
					IsStatic: false,
					ReturnType.SpecialType: System_Int32,
					IsGenericMethod: false,
					Parameters: []
				} method
			})
		{
			return null;
		}

		// Check whether the method is overridden from object.GetHashCode.
		var rootMethod = overriddenMethod;
		var currentMethod = method;
		for (; rootMethod is not null; rootMethod = rootMethod.OverriddenMethod, currentMethod = currentMethod!.OverriddenMethod) ;
		if (currentMethod!.ContainingType.SpecialType is not (System_Object or System_ValueType))
			return null;

		if ((rawMode, type) switch { (0, { TypeKind: TypeKind.Struct, IsRefLikeType: true }) => false, (1 or 2, _) => false, _ => true })
			return null;

		return new(rawMode, modifiers, type, from extraArgument in extraArguments select (string)extraArgument.Value!);
	}
}
