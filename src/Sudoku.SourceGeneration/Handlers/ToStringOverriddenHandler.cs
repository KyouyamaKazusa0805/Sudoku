namespace Sudoku.SourceGeneration.Handlers;

/// <summary>
/// The generator handler for default overridden of <c>ToString</c>.
/// </summary>
internal sealed class ToStringOverriddenHandler : IIncrementalGeneratorAttributeHandler<ToStringCollectedResult>
{
	/// <inheritdoc/>
	public void Output(SourceProductionContext spc, ImmutableArray<ToStringCollectedResult> values)
	{
		var codeSnippets = new List<string>();
		foreach (var (mode, modifiers, type, attributeType, rawMemberNames) in values)
		{
			if (type is not { Name: var typeName, ContainingNamespace: var @namespace })
			{
				continue;
			}

			var (_, _, _, _, genericParamList, _, _, _, _, _) = SymbolOutputInfo.FromSymbol(type);

			var needCast = mode switch
			{
				0 => (
					from IMethodSymbol method in type.GetAllMembers().OfType<IMethodSymbol>().Distinct(SymbolEqualityComparer.Default)
					where method is { Name: nameof(ToString), Parameters: [{ Type.IsReferenceType: true }] }
					select method
				).Take(2).Count() == 2,
				_ => default(bool?)
			};

			var targetExpression = (mode, rawMemberNames.ToArray(), needCast) switch
			{
				(0, [], true) => $"\t=> ToString(default(string));",
				(0, [], _) => $"\t=> ToString(null);",
				(1, [var memberName], _) => $"\t=> {memberName};",
				(2, var memberNames, _) when argStr(memberNames) is var a => $$$""""{{{"\t"}}}=> $$"""{{nameof({{{typeName}}})}} { {{{a}}} }""";"""",
			};

			var namespaceStr = @namespace.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)["global::".Length..];
			codeSnippets.Add(
				$$"""
				namespace {{namespaceStr}}
				{
					partial {{type.GetTypeKindModifier()}} {{typeName}}{{genericParamList}}
					{
						/// <inheritdoc cref="object.ToString"/>
						[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
						[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{typeof(Generator).FullName}}", "{{Value}}")]
						[global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
						{{modifiers}} string ToString()
						{{targetExpression}}
					}
				}
				"""
			);


			string argStr(string[] memberNames)
			{
				bool attributePredicate(AttributeData a) => SymbolEqualityComparer.Default.Equals(a.AttributeClass, attributeType);
				return string.Join(
					", ",
					from memberName in memberNames
					let targetMember = (
						from internalMember in type.GetAllMembers()
						where internalMember is IFieldSymbol or IPropertySymbol
						let internalMemberName = internalMember.Name
						where internalMemberName == memberName
						select internalMember
					).FirstOrDefault()
					let foundAttribute = targetMember?.GetAttributes().FirstOrDefault(attributePredicate)
					let projectedMemberName = foundAttribute switch { { ConstructorArguments: [{ Value: string value }] } => value, _ => null }
					select $$$""""{{{(projectedMemberName is null ? $$$"""{{nameof({{{memberName}}})}}""" : projectedMemberName)}}} = {{{{{memberName}}}}}""""
				);
			}
		}

		spc.AddSource(
			$"DefaultOverrides.g.{Shortcuts.GeneratedOverriddenMemberToString}.cs",
			$"""
			// <auto-generated/>

			#nullable enable

			{string.Join("\r\n\r\n", codeSnippets)}
			"""
		);
	}

	/// <inheritdoc/>
	public ToStringCollectedResult? Transform(GeneratorAttributeSyntaxContext gasc, CancellationToken cancellationToken)
	{
		if (gasc is not
			{
				Attributes: [{ ConstructorArguments: [{ Value: int rawMode }, { Values: var extraArguments }] }],
				TargetNode: MethodDeclarationSyntax { Modifiers: var modifiers },
				TargetSymbol: IMethodSymbol
				{
					OverriddenMethod: var overriddenMethod,
					ContainingType: { } type,
					Name: nameof(ToString),
					IsOverride: true,
					IsStatic: false,
					ReturnType.SpecialType: System_String,
					IsGenericMethod: false,
					Parameters: []
				} method,
				SemanticModel.Compilation: var compilation
			})
		{
			return null;
		}

		// Check whether the method is overridden from object.ToString.
		var rootMethod = overriddenMethod;
		var currentMethod = method;
		for (; rootMethod is not null; rootMethod = rootMethod.OverriddenMethod, currentMethod = currentMethod!.OverriddenMethod)
		{
			;
		}

		if (currentMethod!.ContainingType.SpecialType is not (System_Object or System_ValueType))
		{
			return null;
		}

		var attributeType = compilation.GetTypeByMetadataName("System.SourceGeneration.GeneratedDisplayNameAttribute");
		if (attributeType is null)
		{
			return null;
		}

		return new(rawMode, modifiers, type, attributeType, from extraArgument in extraArguments select (string)extraArgument.Value!);
	}
}
